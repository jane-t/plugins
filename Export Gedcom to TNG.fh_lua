--[[
@Title:			Export Gedcom to TNG
@Author:			Mike Tate
@LastUpdated:	10 May 2012
@Version:			1.4
@Description:	Converts the current FH Gedcom file into a format ready to import into 'The Next Generation' (TNG).
					Converts _ATTR _USED _EMAIL _WEB _PHON tags to TNG valid tags.
					Removes user-defined _VAR _UID _LIST _ROOT _SENT tags & FILE tag.
					Optionally converts characters not in TNG default ISO-8859-1 set.
					Optionally converts characters to TNG alternative UTF-8 with BOM.
					An initial Tag Replacement table can be easily edited by users to alter the Tag replacements if required.
@V1.4:				Revised GUI with Output Folder selection, plus other minor enhancements.
@V1.3:				First public version.
]]

-- Global Constants --

	StrPlugin		= "Export Gedcom to TNG"		-- Plugin title & version
	StrIssue		= " V1.4"

	TblTag =
	{	--		Old				,		New				-- Table of Tag replacements for TNG GEDCOM, where ^ anchors string to start of line
		{	"^1 CHAR .*"		,	"1 CHAR ANSI"},	-- Alter "1 CHAR ..." into "1 CHAR ANSI" (or UTF-8 if that option is chosen)
		{	"^1 FILE .*"		,	""			},		-- Erase "1 FILE ..."		Optional Filename Tag
		{	"^2 _VAR DSR"	,	""			},		-- Erase "2 _VAR DSR"		FH custom Variant Tag
		{	"^1 _UID {.-}"	,	""			},		-- Erase "1 _UID {...}"	FH custom UID Tag
		{	"^1 _LIST .*"	,	""			},		-- Erase "1 _LIST ..."		FH custom Named Lists
		{	"^1 _ROOT @.-@"	,	""			},		-- Erase "1 _ROOT @...@"	FH custom File Root Tag
		{	"^2 _SENT .*"	,	""			},		-- Erase "2 _SENT ..."		FH custom Sentences
--		{	"^1 _FLGS"		,	""			},		-- Erase "1 _FLGS"			FH custom Flags ??
		{	"^1 _ATTR"		,	"1 EVEN"	},		-- Replacement GEDCOM Tags necessary for TNG ...
		{	"^2 _USED"		,	"1 _USED"	},		-- _ATTR & _USED defined by http://www.tng.lythgoes.net/wiki/index.php?title=Desktop_gotchas#Family_Historian_.28FH.29
--		{	"^2 NICK"			,	"1 _NICK"	},		-- Remove comment '--' on left to include this replacement (other similar ones can be added)
		{	"^1 _EMAIL"		,	"2 EMAIL"	},
		{	"^1 _WEB"			,	"2 WWW"	},
		{	"^1 PHON"			,	"2 PHON"	},		-- Adjust level number and Tag name for E-mail, Website, and Telephone data
		{	"^2 _EMAIL"		,	"3 EMAIL"	},
		{	"^2 _WEB"			,	"3 WWW"	},
		{	"^2 PHON"			,	"3 PHON"	},
	}

	-- Family Historian uses Windows Code Page 1252 Latin as defined at http://en.wikipedia.org/wiki/Windows-1252
	-- Character set: !"#$%&'()*+,-./0-9:;<=>?@A-Z[\]^_`a-z{|}~€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ

	TblISO = { }										-- Table of Code Page 1252 to ISO-8859-1 translations
	TblISO[0x7F]= ""								-- ISO-8859-1 omits: €‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ as defined at http://en.wikipedia.org/wiki/ISO/IEC_8859-1
	TblISO["€"] = "EUR"	
	TblISO[0x81]= ""
	TblISO["‚"] = "¸"
	TblISO["ƒ"] = "f"
	TblISO["„"] = "¸¸"
	TblISO["…"] = "..."
	TblISO["†"] = "+"
	TblISO["‡"] = "±"
	TblISO["ˆ"] = "^"
	TblISO["‰"] = "%"
	TblISO["Š"] = "S"
	TblISO["‹"] = "<"
	TblISO["Œ"] = "OE"
	TblISO[0x8D]= ""
	TblISO["Ž"] = "Z"
	TblISO[0x8F]= ""
	TblISO[0x90]= ""
	TblISO["‘"] = "'"
	TblISO["’"] = "'"
	TblISO["“"] = "\""								-- \" needed to represent " within "quotes"
	TblISO["”"] = "\""
	TblISO["•"] = "º"
	TblISO["–"] = "-"
	TblISO["—"] = "-"
	TblISO["˜"] = "~"
	TblISO["™"] = "TM"
	TblISO["š"] = "s"
	TblISO["›"] = ">"
	TblISO["œ"] = "oe"
	TblISO[0x9D]= ""
	TblISO["ž"] = "z"
	TblISO["Ÿ"] = "Y"

	TblUTF = { }										-- Table of Code Page 1252 to UTF-8 multi-byte encodings as defined at http://en.wikipedia.org/wiki/UTF-8
	TblUTF["€"] = string.char(0xE2,0x82,0xAC)
	TblUTF[0x81]= ""
	TblUTF["‚"] = string.char(0xE2,0x80,0x9A)
	TblUTF["ƒ"] = string.char(0xC6,0x92)
	TblUTF["„"] = string.char(0xE2,0x80,0x9E)
	TblUTF["…"] = string.char(0xE2,0x80,0xA6)
	TblUTF["†"] = string.char(0xE2,0x80,0xA0)
	TblUTF["‡"] = string.char(0xE2,0x80,0xA1)
	TblUTF["ˆ"] = string.char(0xCB,0x86)
	TblUTF["‰"] = string.char(0xE2,0x80,0xB0)
	TblUTF["Š"] = string.char(0xC5,0xA0)
	TblUTF["‹"] = string.char(0xE2,0x80,0xB9)
	TblUTF["Œ"] = string.char(0xC5,0x92)
	TblUTF[0x8D]= ""
	TblUTF["Ž"] = string.char(0xC5,0xBD)
	TblUTF[0x8F]= ""
	TblUTF[0x90]= ""
	TblUTF["‘"] = string.char(0xE2,0x80,0x98)
	TblUTF["’"] = string.char(0xE2,0x80,0x99)
	TblUTF["“"] = string.char(0xE2,0x80,0x9C)
	TblUTF["”"] = string.char(0xE2,0x80,0x9D)
	TblUTF["•"] = string.char(0xE2,0x80,0xA2)
	TblUTF["–"] = string.char(0xE2,0x80,0x93)
	TblUTF["—"] = string.char(0xE2,0x80,0x94)
	TblUTF["˜"] = string.char(0xCB,0x9C)
	TblUTF["™"] = string.char(0xE2,0x84,0xA2)
	TblUTF["š"] = string.char(0xC5,0xA1)
	TblUTF["›"] = string.char(0xE2,0x80,0xBA)
	TblUTF["œ"] = string.char(0xC5,0x93)
	TblUTF[0x9D]= ""
	TblUTF["ž"] = string.char(0xC5,0xBE)
	TblUTF["Ÿ"] = string.char(0xC5,0xB8)
	TblUTF[0xA0]= string.char(0xC2,0xA0)		-- No Break Space
	TblUTF["¡"] = string.char(0xC2,0xA1)
	TblUTF["¢"] = string.char(0xC2,0xA2)
	TblUTF["£"] = string.char(0xC2,0xA3)
	TblUTF["¤"] = string.char(0xC2,0xA4)
	TblUTF["¥"] = string.char(0xC2,0xA5)
	TblUTF["¦"] = string.char(0xC2,0xA6)
	TblUTF["§"] = string.char(0xC2,0xA7)
	TblUTF["¨"] = string.char(0xC2,0xA8)
	TblUTF["©"] = string.char(0xC2,0xA9)
	TblUTF["ª"] = string.char(0xC2,0xAA)
	TblUTF["«"] = string.char(0xC2,0xAB)
	TblUTF["¬"] = string.char(0xC2,0xAC)
	TblUTF["­"] = string.char(0xC2,0xAD)
	TblUTF["®"] = string.char(0xC2,0xAE)
	TblUTF["¯"] = string.char(0xC2,0xAF)
	TblUTF["°"] = string.char(0xC2,0xB0)
	TblUTF["±"] = string.char(0xC2,0xB1)
	TblUTF["²"] = string.char(0xC2,0xB2)
	TblUTF["³"] = string.char(0xC2,0xB3)
	TblUTF["´"] = string.char(0xC2,0xB4)
	TblUTF["µ"] = string.char(0xC2,0xB5)
	TblUTF["¶"] = string.char(0xC2,0xB6)
	TblUTF["·"] = string.char(0xC2,0xB7)
	TblUTF["¸"] = string.char(0xC2,0xB8)
	TblUTF["¹"] = string.char(0xC2,0xB9)
	TblUTF["º"] = string.char(0xC2,0xBA)
	TblUTF["»"] = string.char(0xC2,0xBB)
	TblUTF["¼"] = string.char(0xC2,0xBC)
	TblUTF["½"] = string.char(0xC2,0xBD)
	TblUTF["¾"] = string.char(0xC2,0xBE)
	TblUTF["¿"] = string.char(0xC2,0xBF)
	TblUTF["À"] = string.char(0xC3,0x80)
	TblUTF["Á"] = string.char(0xC3,0x81)
	TblUTF["Â"] = string.char(0xC3,0x82)
	TblUTF["Ã"] = string.char(0xC3,0x83)
	TblUTF["Ä"] = string.char(0xC3,0x84)
	TblUTF["Å"] = string.char(0xC3,0x85)
	TblUTF["Æ"] = string.char(0xC3,0x86)
	TblUTF["Ç"] = string.char(0xC3,0x87)
	TblUTF["È"] = string.char(0xC3,0x88)
	TblUTF["É"] = string.char(0xC3,0x89)
	TblUTF["Ê"] = string.char(0xC3,0x8A)
	TblUTF["Ë"] = string.char(0xC3,0x8B)
	TblUTF["Ì"] = string.char(0xC3,0x8C)
	TblUTF["Í"] = string.char(0xC3,0x8D)
	TblUTF["Î"] = string.char(0xC3,0x8E)
	TblUTF["Ï"] = string.char(0xC3,0x8F)
	TblUTF["Ð"] = string.char(0xC3,0x90)
	TblUTF["Ñ"] = string.char(0xC3,0x91)
	TblUTF["Ò"] = string.char(0xC3,0x92)
	TblUTF["Ó"] = string.char(0xC3,0x93)
	TblUTF["Ô"] = string.char(0xC3,0x94)
	TblUTF["Õ"] = string.char(0xC3,0x95)
	TblUTF["Ö"] = string.char(0xC3,0x96)
	TblUTF["×"] = string.char(0xC3,0x97)
	TblUTF["Ø"] = string.char(0xC3,0x98)
	TblUTF["Ù"] = string.char(0xC3,0x99)
	TblUTF["Ú"] = string.char(0xC3,0x9A)
	TblUTF["Û"] = string.char(0xC3,0x9B)
	TblUTF["Ü"] = string.char(0xC3,0x9C)
	TblUTF["Ý"] = string.char(0xC3,0x9D)
	TblUTF["Þ"] = string.char(0xC3,0x9E)
	TblUTF["ß"] = string.char(0xC3,0x9F)
	TblUTF["à"] = string.char(0xC3,0xA0)
	TblUTF["á"] = string.char(0xC3,0xA1)
	TblUTF["â"] = string.char(0xC3,0xA2)
	TblUTF["ã"] = string.char(0xC3,0xA3)
	TblUTF["ä"] = string.char(0xC3,0xA4)
	TblUTF["å"] = string.char(0xC3,0xA5)
	TblUTF["æ"] = string.char(0xC3,0xA6)
	TblUTF["ç"] = string.char(0xC3,0xA7)
	TblUTF["è"] = string.char(0xC3,0xA8)
	TblUTF["é"] = string.char(0xC3,0xA9)
	TblUTF["ê"] = string.char(0xC3,0xAA)
	TblUTF["ë"] = string.char(0xC3,0xAB)
	TblUTF["ì"] = string.char(0xC3,0xAC)
	TblUTF["í"] = string.char(0xC3,0xAD)
	TblUTF["î"] = string.char(0xC3,0xAE)
	TblUTF["ï"] = string.char(0xC3,0xAF)
	TblUTF["ð"] = string.char(0xC3,0xB0)
	TblUTF["ñ"] = string.char(0xC3,0xB1)
	TblUTF["ò"] = string.char(0xC3,0xB2)
	TblUTF["ó"] = string.char(0xC3,0xB3)
	TblUTF["ô"] = string.char(0xC3,0xB4)
	TblUTF["õ"] = string.char(0xC3,0xB5)
	TblUTF["ö"] = string.char(0xC3,0xB6)
	TblUTF["÷"] = string.char(0xC3,0xB7)
	TblUTF["ø"] = string.char(0xC3,0xB8)
	TblUTF["ù"] = string.char(0xC3,0xB9)
	TblUTF["ú"] = string.char(0xC3,0xBA)
	TblUTF["û"] = string.char(0xC3,0xBB)
	TblUTF["ü"] = string.char(0xC3,0xBC)
	TblUTF["ý"] = string.char(0xC3,0xBD)
	TblUTF["þ"] = string.char(0xC3,0xBE)
	TblUTF["ÿ"] = string.char(0xC3,0xBF)

-- Global Functions --

	require "iuplua"																					-- To access GUI window builder
	require "lfs"																						-- To access LUA filing system

-- Global Data Constants Definition --
function PresetGlobalConstants()

	StrComputerName = os.getenv("COMPUTERNAME")

	StrStickyFile = fhGetPluginDataFileName()
	-- Allow plugins with variant filenames to use same plugin data files
	StrStickyFile = string.gsub(StrStickyFile,"\\"..StrPlugin..".+%.[D,d][A,a][T,t]$","\\"..StrPlugin..".dat")
	if StrStickyFile == "" then
		-- Use standalone GEDCOM path & filename..".fh_data\Plugin Data\" as the folder + the Plugin Filename..".dat"
		StrStickyFile = fhGetContextInfo("CI_GEDCOM_FILE")
		StrStickyFile = string.gsub(StrStickyFile, "%.[G,g][E,e][D,d]", ".fh_data")
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\Plugin Data"
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\"..StrPlugin..".dat"
	end

	-- Plugin data folder path name
	StrPluginPath = string.gsub(StrStickyFile,"\\"..StrPlugin.."%.[D,d][A,a][T,t]$","")

	-- Plugin data file root name
	local strPluginRoot = StrPluginPath.."\\"..StrPlugin

	-- Public data folder path name
	StrPublicPath = fhGetContextInfo("CI_PROJECT_PUBLIC_FOLDER")
	if StrPublicPath == "" then StrPublicPath = StrPluginPath end

end -- function PresetGlobalConstants

-- Table of Progress Bar functions --
ProgressBar = {

	Start = function(strTitle,intMax)																-- Create & start Progress Bar window
		IsBarStop = false
		IntStart = os.time()
		IntDelta = 0
		StrClock = "00:00:00"
		local	btnStop	= iup.button	{ title="Stop "..strTitle, rastersize="200x30", fgcolor="255 000 000", action=function() IsBarStop = true end, }	-- Signal Stop button pressed
				BarGauge	= iup.progressbar { rastersize="400x30", value=0, max=intMax, }	-- Progress bar maximum range
				LblText	= iup.label	{ title=" ", expand="YES", alignment="ACENTER", tip="Percentage and Time Elapsed", }
				DlgGauge	= iup.dialog	{ title=strTitle.." Progress", dialogframe="YES",	-- Remove Windows minimize/maximize menu
									iup.vbox{ alignment="ACENTER", gap="10", margin="8x8",
										LblText,
										BarGauge,
										btnStop,
									},
									move_cb	= function(self,x,y) IntDataX=x IntDataY=y end,
									close_cb	= btnStop.action,										-- Windows Close button = Stop button
								}
		DlgGauge:showxy(IntDataX,IntDataY)															-- Show the Progress Bar window
	end,

	SetText = function(strText)																		-- Show the Progress text message
		LblText.title = strText
	end,

	Step = function(intStep)																			-- Step the Progress Bar forward
		local intVal = tonumber(BarGauge.value)
		local intMax = tonumber(BarGauge.max)
		intVal = intVal + intStep
		if intVal > intMax then intVal = intMax end												-- Ensure value does not exceed maximum
		BarGauge.value = intVal
		local intDelta = os.difftime(os.time(),IntStart)
		if IntDelta < intDelta then																	-- Update clock of elapsed time
			IntDelta = intDelta
			local intHour = math.floor( intDelta / 3600 )
			local intMins = math.floor( intDelta / 60 - intHour * 60 )
			local intSecs = intDelta - intMins * 60 - intHour * 3600
			StrClock = string.format("%02d : %02d : %02d",intHour,intMins,intSecs)
		end
		LblText.title = string.format("%4d %%      %s ", math.floor( intVal / intMax * 100 ), StrClock) -- Display % and clock progress
		iup.LoopStep()
	end,

	Reset = function()																					-- Reset the Progress Bar
		BarGauge.value = 0
	end,

	Stop = function()																					-- Check if Stop button pressed
		return IsBarStop
	end,

	Close = function()																					-- Close the Progress Bar window
		DlgGauge:destroy()
	end,

} -- end ProgressBar

-- Split a string using separator --
function string:split(sep)
	local sep = sep or ":"
	local fields = {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end -- function string:split

-- Check if file exists --
function FlgFileExists(strFileName)
	if lfs.attributes(strFileName,"mode") == "file" then
		return true
	else
		return false
	end
end -- function FlgFileExists

-- Check if folder exists --
function FlgFolderExists(strFolderName)
	if lfs.attributes(strFolderName,"mode") == "directory" then
		return true
	else
		return false
	end
end -- function FlgFolderExists

-- Open File and return Handle --
function OpenFile(strFileName,strMode)
	local fileHandle, strError = io.open(strFileName,strMode)
	if fileHandle == nil then
		error("\n Unable to open file in \""..strMode.."\" mode. \n "..strFileName.." \n "..strError.." \n")
	end
	return fileHandle
end -- function OpenFile

-- Delete file if it exists --
function DeleteFile(strFileName)
	if FlgFileExists(strFileName) then
		local fileHandle, strError = os.remove(strFileName)
		if fileHandle == nil then
			local intRepeat = 1
			repeat
				fhSleep(300,100)
				if FlgFileExists(strFileName) then
					fileHandle, strError = os.remove(strFileName)
				end
				intRepeat = intRepeat + 1
			until fileHandle ~= nil or intRepeat > 10
			if intRepeat > 10 then error(string.gsub(strError,strFileName:match("(.+\\).+"),"Del#"..tostring(intRepeat)..":")) end
		end
	end
end -- function DeleteFile

-- Return the Folder, Filename, and Extension as 3 values --
function SplitFilename(strFilename)
	return string.match(strFilename, "(.-)([^\\]-)%.([^%.]+)$")
end -- function SplitFilename

-- Load Sticky Settings from File --
function LoadSettings(strFileName)

	local tblStickyData = {}

	-- Load Local Parameter for this PC --
	local function strLoadLocal(strParam,strDefault)
		return tblStickyData[StrComputerName.."-"..strParam] or strDefault
	end

	-- Load Global Parameter for all PC --
	local function strLoadGlobal(strParam,strDefault)
		return tblStickyData[strParam] or strDefault
	end

	if FlgFileExists(strFileName) then
		-- Load Settings File in table lines with key & val fields
		local tblField = {}
		for strLine in io.lines(strFileName) do
			tblField = strLine:split("=")
			tblStickyData[tblField[1]] = tblField[2]
		end
		StrFolder = strLoadLocal("Folder",StrFolder)
	end
end -- function LoadSettings

-- Save Sticky Settings to File --
function SaveSettings(strFileName)

	local tblStickyData = {}

	-- Save Local Parameter for this PC --
	local function doSaveLocal(strParam,param)
		tblStickyData[StrComputerName.."-"..strParam] = param
	end

	-- Save Global Parameter for all PC --
	local function doSaveGlobal(strParam,param)
		tblStickyData[strParam] = param
	end

	doSaveLocal("Folder",StrFolder)

	local fileHandle = OpenFile(strFileName,"w")
	for strKey,strVal in pairs(tblStickyData) do
		fileHandle:write(strKey.."="..strVal.."\n")
	end
	fileHandle:close()
end -- function SaveSettings

-- Main GUI Dialogue --
function IntDialogue(strFolder,...)
	local intButton = 0			-- Returned value if X Close button is used
	local tblText =
	{
		{	"This Plugin converts the current GEDCOM file to 'The Next Generation' (TNG) format",
			"(1)  Remember to set 'CENS' tag to 'Accept' in order for TNG to accept Census Events.\n"..
			"(2)  Create custom '_USED' tag in order for TNG to accept the Given Name Used field.\n"..
			"(3)  Create custom '_FLGS' tag so TNG imports 'Living' && 'Private' flags, but only one is recognised per Individual.\n"..
			"(4)  Remember each Family Historian Custom Attribute will need a matching TNG Custom Event tag.\n"..
			"(5)  To keep Media Link to Face Frames, use 'Convert File Links' plugin, and run this plugin on final GEDCOM file."
		},
		{	"Current TNG Output Folder",
			strFolder
		},
		{	"Default ISO-8859-1 Option",
			"This requires the default TNG language setting of 'ISO-8859-1' but some characters will change.\n"..
			"The accented letters   Š   Ž   š   ž   Ÿ   will lose their accents.\n"..
			"The symbols   € ‚ ƒ „ … † ‡  ˆ ‰ ‹ Œ  ‘ ’ “ ” • – —  ˜   ™  › œ   will\n"..
			"become     EUR ¸ f ¸¸ ... + ± ^ % < OE ' ' \" \" º  -  -  ~ TM > oe"
		},
		{	"UTF-8 with BOM Option",
			"This requires the alternative TNG language setting of 'UTF-8' that supports all characters.\n"..
			"This option will retain all accented letters and all symbols perfectly."
		},
--		{	"UTF-8 without BOM Option",
--			"Exactly as above but without a Byte Order Marker (BOM) inserted."
--		},
	}

	local strFont = string.gsub(iup.GetGlobal("DEFAULTFONT"),",",", Bold")
	local iupVbox = iup.vbox{ }
	for intText, tblText in ipairs(tblText) do
		local iupText = iup.vbox{ iup.label{ title=tblText[1], font=strFont, expand="YES", alignment="ACENTER" }, iup.label{ title=tblText[2], expand="YES" }, iup.label{ separator="HORIZONTAL" } }
		iup.Append(iupVbox,iupText)
	end
	local iupHbox = iup.hbox{ homogeneous="YES" }
	local btnName
	for intArgNum, strButton in ipairs(arg) do
		btnName = iup.button{ title=strButton, font=strFont, expand="YES", padding="4", action=function() intButton=intArgNum return iup.CLOSE end }
		iup.Append(iupHbox,btnName)
	end
	iup.Append(iupVbox,iupHbox)
	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local dialogue = iup.dialog{ title=StrPlugin..StrIssue, iupVbox, dialogframe="YES", background="252 252 252", startfocus=btnName, gap="8", margin="4x4"}
	dialogue:show()
	if (iup.MainLoopLevel()==0) then iup.MainLoop() end
	dialogue:destroy()
	return intButton
end -- function IntDialogue

-- Main body of Plugin script starts here --

	fhInitialise(5,0,0,"save_recommended")								-- Recommend current GEDCOM is saved if outstanding changes

	PresetGlobalConstants()												-- Preset global data constants

	StrGedcomFile = fhGetContextInfo("CI_GEDCOM_FILE")				-- Full folder path and filename of current Project GEDCOM file
	StrFolder, StrFilename, StrType = SplitFilename(StrGedcomFile)

	LoadSettings(StrStickyFile)											-- Load sticky data settings

	StrFolder = StrFolder:gsub("\\$","")

	repeat
		StrGedcomName = StrFolder.."\\"..StrFilename					-- Full folder path and filename minus ".ged" extension
		StrGedcomISO = StrGedcomName.." ISO.ged"						-- Full folder path and filename of output GEDCOM ISO-8859-1 file for TNG
		DeleteFile(StrGedcomISO)											-- Delete old ISO output file if it exists
		StrGedcomUTF = StrGedcomName.." UTF.ged"						-- Full folder path and filename of output GEDCOM UTF-8 + BOM file for TNG
		DeleteFile(StrGedcomUTF)											-- Delete old UTF output file if it exists

		IntButton = IntDialogue(StrFolder,"Set Output Folder","Default ISO-8859-1","UTF-8 with BOM","Cancel Plugin")	-- "UTF-8 without BOM",
		if IntButton <= 0
		or IntButton >= 4 then return end
		if IntButton == 1 then												-- Set Output Folder Dialogue
			local strFolder = StrFolder
			local strDirectory = strFolder
			if not FlgFolderExists(strFolder) then strDirectory = StrPublicPath end
			local dialogFolder = iup.filedlg{dialogtype="DIR", title="Please select the TNG Output Folder", DIRECTORY=strDirectory}
			dialogFolder:popup (iup.CENTER, iup.CENTER)
			if dialogFolder.status ~= "-1" then
				StrFolder = dialogFolder.value
				SaveSettings(StrStickyFile)								-- Save the StrFolder sticky data setting
			end
		end
		if IntButton == 2 then												-- Default ISO-8859-1 mode chosen
			StrMode	= "ISO"
			StrBOM		= ""
			StrRange	= "["..string.char(0x7F).."-Ÿ]"					-- Range of characters needing ISO translation
			TblTNG		= TblISO												-- Table of CP1252 character to ISO translations
			FileTNG	= OpenFile(StrGedcomISO,"w")						-- Open GEDCOM ISO output file for "w"riting
			StrFinal	= "TNG ISO-8859-1 formatted GEDCOM has been output to:\n\n"..StrGedcomISO
		end
		if IntButton == 3 then												-- UTF-8 with BOM mode chosen
			StrMode	= "UTF"
			StrBOM		= string.char(0xEF,0xBB,0xBF)					-- Byte Order Mark to prefix file = "ï»¿"
			StrRange	= "[€-ÿ]"												-- Range of characters needing UTF-8 multi-byte encoding
			TblTNG		= TblUTF												-- Table of CP1252 character to UTF-8 encodings
			FileTNG	= OpenFile(StrGedcomUTF,"w")						-- Open GEDCOM UTF output file for "w"riting
			StrFinal	= "TNG UTF-8 with BOM formatted GEDCOM has been output to:\n\n"..StrGedcomUTF	
		end
--[[
		if IntButton == 4 then												-- UTF-8 without BOM mode chosen
			StrMode	= "UTF"
			StrBOM		= ""
			StrRange	= "[€-ÿ]"												-- Range of characters needing UTF-8 multi-byte encoding
			TblTNG		= TblUTF												-- Table of CP1252 character to UTF-8 encodings
			FileTNG	= OpenFile(StrGedcomUTF,"w")						-- Open GEDCOM UTF output file for "w"riting
			StrFinal	= "TNG UTF-8 without BOM formatted GEDCOM has been output to:\n\n"..StrGedcomUTF
		end
]]
	until StrMode and StrRange

	IntSize = lfs.attributes(StrGedcomFile,"size")					-- Size of file in chars
	ProgressBar.Start('Exporting Gedcom',IntSize)					-- Start Progress Bar
	IntStep = 0																-- Size of Progress Step in chars
	IntLine = 0																-- Line count of file

	IntErase = -1															-- Erase tag lines subordinate to this level

	TblSave = {}																-- Saved custom Tag lines per level
	for intLevel = 1, 9 do
		TblSave[intLevel] = ""
	end
	
	for strLine in io.lines(StrGedcomFile) do							-- Read each line from the FH GEDCOM file
		for intSub, tblSub in ipairs(TblTag) do						-- Step through each TNG replacement Tag table entry
			local strOld = tblSub[1]
			local strNew = tblSub[2]
			if strLine:match(strOld) then								-- Until a replacement match is found
				local intOld = tonumber(string.sub(strLine,1,1))	-- Old Tag level number
				strLine = strLine:gsub(strOld,strNew)					-- Replace the Tag
				local intNew = tonumber(string.sub(strLine,1,1))	-- New Tag level number
				if strLine == "" then										-- If old Tag is being removed e.g. 1 _UID or 1 _LIST or 1 _FLGS
					IntErase = intOld										-- then ensure any subordinate Tags are erased
				elseif intOld > intNew then								-- If old Tag being promoted to higher level custom Tag e.g. 2 _USED > 1 _USED
					TblSave[intNew] = TblSave[intNew]..strLine.."\n"-- then save new line in new level custom Tag lines buffer
					strLine = ""
				end
				break															-- Only one replacement possible per line, so skip remainder by breaking for loop
			end
		end
		local intLevel = tonumber(string.sub(strLine,1,1)) or 99
		if intLevel <= IntErase then										-- If end of subordinate Tags reached then
			IntErase = -1													-- Signal end of subordinate Tag erasure
		end
		for intNew = intLevel, 9 do										-- Check all lower Tag levels
			if intNew == 0 then intNew = 1 end
			strLine = TblSave[intNew]..strLine							-- Output any saved level custom Tag lines buffer
			TblSave[intNew] = ""
		end
		if IntErase < 0 and strLine ~= "" then							-- Skip lines being erased and blank lines
			if strLine:match(StrRange) then								-- If line contains characters that need translating then
				local strTran = ""
				local strChar = ""
				for i=1, string.len(strLine) do							-- Step through each character in line
					strChar = string.sub(strLine,i,i)
					strChar = TblTNG[strChar] or strChar				-- Perform character translation
					strTran = strTran..strChar
				end
				strLine = strTran
			end
			if StrMode == "UTF" then
				strLine = StrBOM..strLine									-- Add UTF-8 Byte Order Mark (BOM) to front of file
				StrBOM = ""
				strLine = strLine:gsub("^1 CHAR .*","1 CHAR UTF-8")	-- Character encoding "1 CHAR ..." becomes "1 CHAR UTF-8"
			end
			FileTNG:write(strLine.."\n")									-- Write converted line to output GEDCOM TNG file
		end
		IntStep = IntStep + string.len(strLine) + 2					-- Add length of line to chars converted in this step ( add 2 for CR & LF )
		IntLine = IntLine + 1
		if IntLine % 20 == 0 then											-- Every 20th line to avoid slow exporting
			ProgressBar.Step(IntStep)										-- Update Progress Bar by chars in this step
			IntStep = 0
			iup.Flush()
		end
		if ProgressBar.Stop() then										-- Cancel exporting?
			break
		end
	end

	FileTNG:close()															-- Close output GEDCOM TNG file

	ProgressBar.Reset()
	ProgressBar.Close()
	if ProgressBar.Stop() then
		fhMessageBox("Export Gedcom to TNG Cancelled")
	else
		fhMessageBox(StrFinal)
	end
