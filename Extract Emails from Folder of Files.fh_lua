require "lfs"
folder = 'd:\\temp\\waitinglist'
function main()
    local emails = {}
    local filelist = attrdir (folder,false)
    for _,file in pairs(filelist) do
        local contents = StrLoadFromFile(file)
        for _,v in pairs(extractEmails(contents)) do
            table.insert(emails,v)
        end
    end
    for _,v in pairs(removedup(emails)) do
        print(v)
    end
end
-- Remove Duplicates in Table
function removedup(list)
    local worktable = {}
    local newtable = {}
    for _,v in pairs(list) do
        worktable[v] = true
    end
    for v,_ in pairs(worktable) do
        table.insert(newtable,v)
    end
    table.sort(newtable)
    return newtable
end
-- Open File and return Handle --
function OpenFile(strFileName,strMode)
    local fileHandle, strError = io.open(strFileName,strMode)
    if not fileHandle then
        error("\n Unable to open file in \""..strMode.."\" mode. \n "..strFileName.." \n "..tostring(strError).." \n")
    end
    return fileHandle
end -- function OpenFile

-- Load string from file --
function StrLoadFromFile(strFileName)
    local fileHandle = OpenFile(strFileName,"r")
    local strString = fileHandle:read("*all")
    assert(fileHandle:close())
    return strString
end -- function StrLoadFromFile

function extractEmails(emaillist)
    list = {}
    pattern = "[A-Za-z0-9%.%%%+%-]+@[A-Za-z0-9%.%%%+%-]+%.%w%w%w?%w?"
    for word in string.gmatch(emaillist, pattern) do
        table.insert(list,word)
    end
    return list
end
function attrdir (path,recurse)
    local filelist = {}
    for file in lfs.dir(path) do
        if file ~= "." and file ~= ".." then
            local f = path..'/'..file
            table.insert(filelist,f)
            local attr = lfs.attributes (f)
            assert (type(attr) == "table")
            if attr.mode == "directory" and recurse then
                attrdir (f)
            end
        end
    end
    return filelist
end


main()






