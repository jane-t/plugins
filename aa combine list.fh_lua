--[[
@Title: Merge CSV lines
@Author: Jane
@Version: 
@LastUpdated: 
@Description: 
]]


function main()
    local sFilename = [[D:\Work\Dropbox\FH Presentation\Admin\everyonelist.csv]]
    local lines,titles = table.loadcsv(sFilename,true)
    local newlist = {}
    for _,data in ipairs(lines) do
        
        if not(newlist[data.name]) then
				newlist[data.name] = data  
        else
             if data.course_intro then newlist[data.name].course_intro = '1' end
             if data.course_advanced then newlist[data.name].course_advanced = '1' end
             if data.course_plugins then newlist[data.name].course_plugins = '1' end
        end               
    end
    local i = 0
    for n,data in pairs(newlist) do
      i = i + 1
      local outline = string.format('%d,%s,%s,%s,%s,%s,%s,,',
                i,data.name, data.email,data.shortname,(data.course_intro or ''),(data.course_advanced or ''),(data.course_plugins or '')
                )

      print(outline)
    end
end



--[[table.loadcsv

@name          table.loadcsv
@description   Loads a CSV file into a table of tables, the first line should contain descriptions
@usage         provide valid filename, use ipairs loop to use resulting table
@param         filename      filename to load
@param         bHasHeader    true if the file contains a header line, false if not, defaults to false
                             If true  
@return        table of tables, if a header is used, indexed by the fieldnames from the header
@return        table containing the header field names (if used) 
]]
 
function table.loadcsv(filename,bHasHeader)
    bHasHeader = bHasHeader or false
    local bHeader = false
    local function fromCSV (s)
        s = s .. ',' -- ending comma
        local t = {} -- table to collect fields
        local fieldstart = 1
        repeat
        -- next field is quoted? (start with `"'?)
        if string.find(s, '^"', fieldstart) then
            local a, c
            local i = fieldstart
            repeat
            -- find closing quote
            a, i, c = string.find(s, '"("?)', i+1)
            until c ~= '"' -- quote not followed by quote?
            if not i then
                error('unmatched "')
            end
            local f = string.sub(s, fieldstart+1, i-1)
            table.insert(t, (string.gsub(f, '""', '"')))
            fieldstart = string.find(s, ',', i) + 1
        else -- unquoted; find next comma
            local nexti = string.find(s, ',', fieldstart)
            table.insert(t, string.sub(s, fieldstart, nexti-1))
            fieldstart = nexti + 1
        end
        until fieldstart > string.len(s)
        return t
    end
    local contents = {}
    if bHasHeader then
        local header = {}
    end
    for line in io.lines(filename) do
        local fields = fromCSV(line)
        local data = {}
 
        if bHasHeader then
            if bheader then
                -- Build Data Table with the Header Descriptions
                for i,field in ipairs(fields) do
                    if field ~= '' then
                        data[header[i]] = field
                    end
                end
                table.insert(contents,data)
            else
                -- Grab Column Names
                header = fields
                bheader = true
            end
        else
            table.insert(contents,fields)
        end
    end
    return contents,header
end



main()