--[[
@Title: Clean DokuWiki
@Author: Jane
@Version: 
@LastUpdated: 
@Description: Write a batch file to delete all languages other than English from the DokuWiki install
]]

function mainfunction()
    local basefolder = "D:\\temp\\dokuwiki-2013-05-10a"
    local langkeep = 'en$'
    local langflr = 'lang'
    local tblCmd = {}
    require 'lfs'
    for filename,attr in dirtree(basefolder) do
        if attr.error then
            print('filename:'..filename..' caused error '..attr.error)
        else
            if attr.mode == 'file' then
            else
                if not(filename:find(langflr..'$')) then
                    if filename:find(langflr) and not(filename:find(langkeep)) then
                        local strCmd = 'del '..filename..'\\*.txt'
                        table.insert(tblCmd,strCmd)
                        local strCmd = 'del '..filename..'\\*.html'
                        table.insert(tblCmd,strCmd)
                        local strCmd = 'del '..filename..'\\*.php'
                        table.insert(tblCmd,strCmd)


                        local strCmd = 'rd '..filename
                        table.insert(tblCmd,strCmd)
                    end
                end
            end
        end
    end
    strcmd = table.concat(tblCmd,"\n")
    SaveStringToFile(strcmd,basefolder..'\\del.bat')
    for _,v in ipairs(tblCmd) do
        print(v)
    end
    fhMessageBox('del.bat ('..#tblCmd..' lines) created in '..basefolder)
end

function dirtree(dir)
    assert(dir and dir ~= "", "directory parameter is missing or empty")
    if string.sub(dir, -1) == "/" then
        dir=string.sub(dir, 1, -2)
    end
    local function yieldtree(dir)
        for entry in lfs.dir(dir) do
            if entry ~= "." and entry ~= ".." then
                entry=dir.."\\"..entry
                local attr,err=lfs.attributes(entry)
                if attr == nil then attr = {mode='attrfail',error=err} end
                coroutine.yield(entry,attr)
                if attr.mode == "directory" then
                    yieldtree(entry)
                end
            end
        end
    end
    return coroutine.wrap(function() yieldtree(dir) end)
end
-- Open File and return Handle --

function OpenFile(strFileName,strMode)
    local fileHandle, strError = io.open(strFileName,strMode)
    if not fileHandle then
        error("\n Unable to open file in \""..strMode.."\" mode. \n "..strFileName.." \n "..tostring(strError).." \n")
    end
    return fileHandle
end -- function OpenFile

-- Save string to file --

function SaveStringToFile(strString,strFileName)
    local fileHandle = OpenFile(strFileName,"w")
    fileHandle:write(strString)
    assert(fileHandle:close())
end -- function SaveStringToFile
mainfunction()