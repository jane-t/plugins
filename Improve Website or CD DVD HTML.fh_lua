--[[
@Title:			Improve Website or CD DVD HTML
@Author:			Mike Tate
@Version:			1.2
@LastUpdated:	4 July 2012
@Description:	Adds alternate & married names to Index of Names page, and ensures all user URL are hyperlinks.
@V1.2:				Index of Names tooltip title="Married/Alternate Name", choice of Style for added names, Check Version in Store bug fix due to "-" in name!
@V1.1:				Better name sorting using setlocale() with non-alphabetic surnames first.
					Use <a id="letter"></a> XHTML instead of deprecated <a name="letter"></a> in _nameindex.html.
					Convert user URL into hyperlinks optionally opening in a new tab/window.
					Allow user <a href="url">link</a> format to specify Hyperlinks.
					Made all window positions and settings sticky.
@V1.0:				Initial version.
]]
	StrPlugin		= "Improve Website or CD DVD HTML"	-- Plugin title & version
	StrVersion	= " Version 1.2 "

	require "iuplua"										-- To access GUI window builder
	require "lfs"											-- To access LUA filing system
	require "iupluaole"										-- To access OLE subsystem
	require "luacom"										-- To access COM subsystem

	os.setlocale("C","collate")							-- Set standard ASCII collation order

-- Global Data Constants Definition --
function PresetGlobalConstants()

	-- GUI Global Constants

	StrRed				= "255 000 000"						-- Color attributes
	StrAmber			= "250 160 000"
	StrGreen			= "000 120 000"
	StrBlue			= "000 000 255"
	StrGray			= "120 120 120"
	StrBlack			= "000 000 000"
	StrWhite			= "255 255 255"
	StrGap 			= "2"									-- Gap & Margin attributes
	StrMinMargin		= "1x1"
	StrBigMargin		= "8x8"
	StrFontSetTitle	= "Set Interface Font"
	IntFontPlain		= 1										-- Font Face & Style values for IntFontSet
	IntFontBold		= 2
	IntArialPlain	= 3
	IntArialBold		= 4
	IntTahomaPlain	= 5
	IntTahomaBold	= 6
	StrFontFace		= string.gsub(iup.GetGlobal("DEFAULTFONT"),",.*","")
	IntIndexPrimary		= 1
	IntIndexAlternate	= 2
	IntIndexMarried		= 3
	IntIndexEveryone	= 4

	-- Filename Global Constants

	StrComputerName = os.getenv("COMPUTERNAME")

	StrStickyFile = fhGetPluginDataFileName()
	-- Allow plugins with variant filenames to use same plugin data files
	StrStickyFile = string.gsub(StrStickyFile,"\\"..StrPlugin..".+%.[D,d][A,a][T,t]$","\\"..StrPlugin..".dat")
	if StrStickyFile == "" then
		-- Use standalone GEDCOM path & filename..".fh_data\Plugin Data\" as the folder + the Plugin Filename..".dat"
		StrStickyFile = fhGetContextInfo("CI_GEDCOM_FILE")
		StrStickyFile = string.gsub(StrStickyFile, "%.[G,g][E,e][D,d]", ".fh_data")
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\Plugin Data"
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\"..StrPlugin..".dat"
	end

	-- Plugin data folder path name
	StrPluginPath = string.gsub(StrStickyFile,"\\"..StrPlugin.."%.[D,d][A,a][T,t]$","")

	-- Plugin data file root name
	local strPluginRoot = StrPluginPath.."\\"..StrPlugin

	-- Public data folder path name
	StrPublicPath = fhGetContextInfo("CI_PROJECT_PUBLIC_FOLDER")
	if StrPublicPath == "" then StrPublicPath = StrPluginPath end

end -- function PresetGlobalConstants

-- Split a string using separator --
function string:split(sep)
	local sep = sep or ":"
	local fields = {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end -- function string:split

-- Split a string into numbers using separators space or comma or x --
function string:SplitNumbers()
	local tblNum = {}
	self:gsub("([^%s,x]+)", function(c) tblNum[#tblNum+1] = c end)
	for i=1, #tblNum do
		tblNum[i] = tonumber(tblNum[i])
	end
	return tblNum
end -- function string:SplitNumbers

-- Check if file exists --
function FlgFileExists(strFileName)
	if lfs.attributes(strFileName,"mode") == "file" then
		return true
	else
		return false
	end
end -- function FlgFileExists

-- Check if folder exists --
function FlgFolderExists(strFolderName)
	if lfs.attributes(strFolderName,"mode") == "directory" then
		return true
	else
		return false
	end
end -- function FlgFolderExists

-- Open File and return Handle --
function OpenFile(strFileName,strMode)
	local fileHandle, strError = io.open(strFileName,strMode)
	if fileHandle == nil then
		error("\n Unable to open file in \""..strMode.."\" mode. \n "..strFileName.." \n "..strError.." \n")
	end
	return fileHandle
end -- function OpenFile

-- Save string to file --
function SaveStringToFile(strString,strFileName)
	local fileHandle = OpenFile(strFileName,"w")
	fileHandle:write(strString)
	assert(fileHandle:close())
end -- function SaveStringToFile

-- Load string from file --
function StrLoadFromFile(strFileName)
	local fileHandle = OpenFile(strFileName,"r")
	local strString = fileHandle:read("*all")
	assert(fileHandle:close())
	return strString
end -- function StrLoadFromFile

-- Return the Path, Filename, and extension as 3 values --
function SplitFilename(strFilename)
	return string.match(strFilename, "(.-)([^\\]-([^%.]+))$")
end -- function SplitFilename

-- Return a Directory Tree entry & attributes on each iteration --
function DirTree(strDir)
	assert(strDir and strDir ~= "", "directory parameter is missing or empty")
	if string.sub(strDir, -1) == "/" then
		strDir = string.sub(strDir, 1, -2)		-- Remove trailing "/"
	end
    
	local function doYieldTree(strDir)
		for strEntry in lfs.dir(strDir) do
			if strEntry ~= "." and strEntry ~= ".." then
				strEntry = strDir.."\\"..strEntry
				local tblAttr = lfs.attributes(strEntry)
				coroutine.yield(strEntry,tblAttr)
				if tblAttr.mode == "directory" then
					doYieldTree(strEntry)
				end
			end
		end
	end -- local function doYieldTree

	return coroutine.wrap(function() doYieldTree(strDir) end)
end -- function DirTree

-- Delete file if it exists --
function DeleteFile(strFileName)
	if FlgFileExists(strFileName) then
		local fileHandle, strError = os.remove(strFileName)
		if fileHandle == nil then
			local intRepeat = 1
			repeat
				if intRepeat > 1 and ShowStatusMessage then ShowStatusMessage(StrRed,string.gsub(strError,strFileName:match("(.+\\).+"),"Del#"..tostring(intRepeat)..":")) end
				fhSleep(300,100)
				if FlgFileExists(strFileName) then
					fileHandle, strError = os.remove(strFileName)
				end
				intRepeat = intRepeat + 1
			until fileHandle ~= nil or intRepeat > 10
			if intRepeat > 10 and not ShowStatusMessage then error(string.gsub(strError,strFileName:match("(.+\\).+"),"Del#"..tostring(intRepeat)..":")) end
		end
	end
end -- function DeleteFile

function DoExecute(strExecutable, strParameter)
	local isOK, intErrorCode, strErrorText = fhShellExecute(strExecutable, strParameter)
	if not isOK then
		fhMessageBox(strErrorText.." ("..intErrorCode..")")
	end
end -- function DoExecute

-- Inhibit Regular Expression magic characters ^$()%.[]*+-?)
function StrPlainText(strText)
	-- Prefix every non-alphanumeric character (%W) with a % escape character, where %% is the % escape, and %1 is original character
	return strText:gsub("(%W)","%%%1")
end -- function StrPlainText

-- Obtain Version in Plugin Store by Id or Name --
function StrVersionInStore(strPlugin)
	local strType = "name="
	if tonumber(strPlugin) then strType = "id=" end
	if strPlugin then
		local http = luacom.CreateObject("winhttp.winhttprequest.5.1")
		local strRequest ="http://www.family-historian.co.uk/lnk/checkpluginversion.php?"..strType..strPlugin
 		http:Open("GET",strRequest,false)
		http:Send()
		local strReturn = http.Responsebody
		local strVersion = ""
		if strReturn ~= nil then
			strVersion = strReturn:match("(%d.*),%d*")
		end
		return strVersion or "0"
	else
		return "0"
	end
end -- function StrVersionInStore

-- Check if New Version Available --
function CheckVersionInStore(strOldVer)
	local strPlugin = fhGetContextInfo("CI_PLUGIN_NAME")
	local strNewVer = StrVersionInStore(strPlugin)
	if strNewVer > strOldVer:match("[^%d]*([%d%.]*)") then
		iup.Alarm(strPlugin..strOldVer,"Later Version "..strNewVer.." of this Plugin is available from the Family Historian 'Plugin Store'.","OK")
	end
end -- function CheckVersionInStore

-- Flag if GUI Window is Normal rather than Minimised or Maximised --
function IsNormalWindow(dialogGUI)
	-- tblScrn[1] = origin x, tblScrn[2] = origin y, tblScrn[3] = width, tblScrn[4] = height
	local tblPosn = dialogGUI.screenposition:SplitNumbers()
	local intPosX = tblPosn[1]
	local intPosY = tblPosn[2]
	if intPosX < 0 and intPosY < 0 then						-- If origin is negative (-8, -8 = Maximised, -3200, -3200 = Minimised)
		return false												-- then is Maximised or Minimised
	end
	return true
end -- function IsNormalWindow

-- GUI Font Face & Style Dialogue --
function GUI_FontDialogue(intFontSet)

	-- Note: Pixel sizes -21 = -20 & -17 = -16 & -14 = -13 and pixel sizes -22, -18 & -13 have no point size equivalent.
	local tblFontSet = {}			-- Lookup table for StrFontHead and StrFontBody font sets
	tblFontSet[IntFontPlain]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..",      -16", }
	tblFontSet[IntFontBold]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..", Bold -15", }
	tblFontSet[IntArialPlain]		=	{ Head="Arial,         Bold -16",	Body="Arial,              -16", }
	tblFontSet[IntArialBold]		=	{ Head="Arial,         Bold -16",	Body="Arial,         Bold -15", }
	tblFontSet[IntTahomaPlain]	=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,             -16", }
	tblFontSet[IntTahomaBold]		=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,        Bold -14", }

	-- Assign font set global variables
	local function doAssignFontSet(intFontSet)
		IntFontSet = intFontSet
		StrFontHead = tblFontSet[intFontSet]["Head"] -- Font for all GUI dialog header text
		StrFontBody = tblFontSet[intFontSet]["Body"] -- Font for all GUI dialog body text
	end -- local function doAssignFontSet

	-- If parameter exists, simply set it as current font set
	if intFontSet then doAssignFontSet(intFontSet) return end

	local strAnswer = "Change"

	local strFontPlainTitle	= StrFontFace.." Plain"
	local strFontBoldTitle		= StrFontFace.." Bold"
	local strArialPlainTitle	= "Arial Plain"
	local strArialBoldTitle	= "Arial Bold"
	local strTahomaPlainTitle	= "Tahoma Plain"
	local strTahomaBoldTitle	= "Tahoma Bold"

	-- Create each GUI label and button with title and tooltip
	local	lblHeadName		= iup.label	{ title=" Name :"				, tip="Names of the available Fonts"				, }
	local	lblHeadPlain		= iup.label	{ title=" Plain :"				, tip="Plain versions of the Fonts"					, }
	local	lblHeadBold		= iup.label	{ title=" Bold :"				, tip="Bold versions of the Fonts"					, }
	local	lblFontName		= iup.label	{ title="Font "..StrFontFace	, tip="Default Windows fontface"					, }
	local	btnFontPlain		= iup.button	{ title=strFontPlainTitle		, tip="Choose "..strFontPlainTitle.." style"		, }
	local	btnFontBold		= iup.button	{ title=strFontBoldTitle		, tip="Choose "..strFontBoldTitle.." style"		, }
	local	lblArialName		= iup.label	{ title="Font Arial"			, tip="Arial alternative fontface"					, }
	local	btnArialPlain	= iup.button	{ title=strArialPlainTitle	, tip="Choose "..strArialPlainTitle.." style"	, }
	local	btnArialBold		= iup.button	{ title=strArialBoldTitle		, tip="Choose "..strArialBoldTitle.." style"		, }
	local	lblTahomaName	= iup.label	{ title="Font Tahoma"			, tip="Tahoma alternative fontface"					, }
	local	btnTahomaPlain	= iup.button	{ title=strTahomaPlainTitle	, tip="Choose "..strTahomaPlainTitle.." style"	, }
	local	btnTahomaBold	= iup.button	{ title=strTahomaBoldTitle	, tip="Choose "..strTahomaBoldTitle.." style"	, }
	local	lblChoose			= iup.label	{ title="Choose your interface font style or"										, }
	local	btnClose			= iup.button	{ title="Close"					, tip="Close this Font Style window"				, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogFont		= iup.dialog { title=(StrPlugin or "").." Font Style", dialogframe="YES", background=StrWhite, startfocus=btnClose,
										iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
											iup.frame { font=StrFontHead, fgcolor=StrBlack, active="YES", title="Font Style",
												iup.vbox { margin=StrMinMargin,
													iup.hbox { homogeneous="YES", lblHeadName,	lblHeadPlain,	lblHeadBold,		},
													iup.hbox { homogeneous="YES", lblFontName,	btnFontPlain,	btnFontBold,		},
													iup.hbox { homogeneous="YES", lblArialName,	btnArialPlain,	btnArialBold,	},
													iup.hbox { homogeneous="YES", lblTahomaName,	btnTahomaPlain,	btnTahomaBold,	},
													iup.hbox { lblChoose, btnClose, },
												},
											},
										},
										move_cb	= function(self,x,y) IntDataX=x IntDataY=y end,
										close_cb	= function() strAnswer="Ignore" return iup.CLOSE end,
									}

	-- Assign font styles for GUI labels and buttons
	local strFontPlain		= tblFontSet	[IntFontPlain]	["Body"]
	local strFontBold		= tblFontSet	[IntFontBold]	["Body"]
	local strArialPlain		= tblFontSet	[IntArialPlain]	["Body"]
	local strArialBold		= tblFontSet	[IntArialBold]	["Body"]
	local strTahomaPlain	= tblFontSet	[IntTahomaPlain]["Body"]
	local strTahomaBold		= tblFontSet	[IntTahomaBold]	["Body"]

	-- Set other GUI attributes for labels and buttons
	for iupName, tblAttr in pairs( {
		--	Control		=	1~fgcolor	, 2~font			, 3~FontSet		, 4~action function()
		[lblHeadName]	= { StrBlack	, StrFontBody	, false			, false	},
		[lblHeadPlain]	= { StrBlack	, strFontPlain	, false			, false	},
		[lblHeadBold]	= { StrBlack	, strFontBold	, false			, false	},
		[lblFontName]	= { StrBlack	, strFontPlain	, false			, false	},
		[btnFontPlain]	= { StrGreen	, strFontPlain	, IntFontPlain	, false	},
		[btnFontBold]	= { StrGreen	, strFontBold	, IntFontBold	, false	},
		[lblArialName]	= { StrBlack	, strArialPlain	, false			, false	},
		[btnArialPlain]	= { StrGreen	, strArialPlain	, IntArialPlain	, false	},
		[btnArialBold]	= { StrGreen	, strArialBold	, IntArialBold	, false	},
		[lblTahomaName]	= { StrBlack	, strTahomaPlain, false			, false	},
		[btnTahomaPlain]= { StrGreen	, strTahomaPlain, IntTahomaPlain, false	},
		[btnTahomaBold]	= { StrGreen	, strTahomaBold	, IntTahomaBold	, false	},
		[lblChoose]		= { StrBlack	, StrFontBody	, false			, false	},
		[btnClose]		= { StrRed	, StrFontBody	, false			, dialogFont.close_cb },
		} ) do
		iupName.expand	= "YES"
		iupName.fgcolor	= tblAttr[1]
		iupName.font		= tblAttr[2]
		if tblAttr[3] then
			if tblAttr[3] == IntFontSet then iupName.active = "NO" end	-- Disable button for currently selected font
			iupName.action = function() doAssignFontSet(tblAttr[3]) return iup.CLOSE end
		end
		if tblAttr[4] then iupName.action = tblAttr[4] end
	end

	if iup.MainLoopLevel() == 0 then	-- called from outside Main GUI, so must use showxy() instead of popup()
		dialogFont:showxy(IntDataX,IntDataY)
	else
		dialogFont:popup(IntDataX,IntDataY)
	end

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	return strAnswer
end -- function GUI_FontDialogue

ProgressBar = {

	Start = function(strTitle,intMax)																-- Create & start Progress Bar window
		if not DlgGauge then
			IsBarStop = false
			IntStart = os.time()
			IntDelta = 0
			StrClock = "00:00:00"
			local	btnStop	= iup.button	{ title="Stop "..strTitle, font=StrFontBody, rastersize="200x30", fgcolor=StrRed, action=function() IsBarStop = true end, }	-- Signal Stop button pressed	return iup.CLOSE -- Often caused main GUI to close !!!
					BarGauge	= iup.progressbar { rastersize="400x30", value=0, max=intMax, }	-- Progress bar maximum range
					LblText	= iup.label	{ title=" ", expand="YES", alignment="ACENTER", tip="Percentage and Time Elapsed", }
					DlgGauge	= iup.dialog	{ title=strTitle.." Progress", dialogframe="YES", background=StrWhite,	-- Remove Windows minimize/maximize menu
										iup.vbox{ alignment="ACENTER", gap="10", margin=StrBigMargin or "8x8",
											LblText,
											BarGauge,
											btnStop,
										},
										move_cb	= function(self,x,y) IntDataX=x IntDataY=y end,
										close_cb	= btnStop.action,									-- Windows Close button = Stop button
									}
			DlgGauge:showxy(IntDataX,IntDataY)														-- Show the Progress Bar window
		end
	end,

	SetText = function(strText)																		-- Show the Progress text message
		if DlgGauge then LblText.title = strText end
	end,

	Step = function(intStep)																			-- Step the Progress Bar forward
		if DlgGauge then
			local intVal = tonumber(BarGauge.value)
			local intMax = tonumber(BarGauge.max)
			intVal = intVal + intStep
			if intVal > intMax then intVal = intMax end											-- Ensure value does not exceed maximum
			BarGauge.value = intVal
			local intDelta = os.difftime(os.time(),IntStart)
			if IntDelta < intDelta then																-- Update clock of elapsed time
				IntDelta = intDelta
				local intHour = math.floor( intDelta / 3600 )
				local intMins = math.floor( intDelta / 60 - intHour * 60 )
				local intSecs = intDelta - intMins * 60 - intHour * 3600
				StrClock = string.format("%02d : %02d : %02d",intHour,intMins,intSecs)
			end
			LblText.title = string.format("%4d %%      %s ", math.floor( intVal / intMax * 100 ), StrClock) -- Display % and clock progress
			DlgGauge.bringfront = "YES"
			iup.LoopStep()
		end
	end,

	Reset = function()																					-- Reset the Progress Bar
		if DlgGauge then BarGauge.value = 0 end
	end,

	Stop = function()																					-- Check if Stop button pressed
		return IsBarStop
	end,

	Close = function()																					-- Close the Progress Bar window
		IsBarStop = false
		if DlgGauge then DlgGauge:destroy() DlgGauge = nil end
	end,

} -- end ProgressBar

-- Reset Sticky Settings to Default Values --
function ResetDefaultSettings()
	IntMainX		= iup.CENTER			-- GUI Main window position X & Y co-ordinate and rastersize
	IntMainY		= iup.CENTER
	IntHelpX		= iup.CENTER			-- GUI Help window position X & Y co-ordinate and rastersize
	IntHelpY		= iup.CENTER
	StrHelpS		= "1030x730"
	IntDataX		= iup.CENTER			-- ProgressBar window position X & Y co-ordinate
	IntDataY		= iup.CENTER
	StrFolder		= StrPublicPath		-- Folder for Website/CD-DVD HTML pages
	IntIndex		= 1						-- Index of Names for Primary Names only
	IntStyle		= 1						-- Index of Names added names in italics
	IntHyper		= 1						-- Hyperlinks open in same Page
end -- function ResetDefaultSettings

-- Load Sticky Settings from File --
function LoadSettings(strFileName)

	local tblStickyData = {}

	-- Load Local Parameter for this PC --
	local function strLoadLocal(strParam,strDefault)
		return tblStickyData[StrComputerName.."-"..strParam] or strDefault
	end

	-- Load Global Parameter for all PC --
	local function strLoadGlobal(strParam,strDefault)
		return tblStickyData[strParam] or strDefault
	end

	-- Ensure Window Position is on Screen --
	local function intintCheckPosition(x,y)
		local tblScrn = iup.GetGlobal("VIRTUALSCREEN"):SplitNumbers()
		-- tblScrn[1] = origin x, tblScrn[2] = origin y, tblScrn[3] = width, tblScrn[4] = height
		if tonumber(x) == nil then
			x = iup.CENTER
		elseif tonumber(x) > tblScrn[3] then
			x = iup.CENTER
		end
		if tonumber(y) == nil then
			y = iup.CENTER
		elseif tonumber(y) > tblScrn[4] then
			y = iup.CENTER
		end
		return tonumber(x),tonumber(y)
	end -- local function intintCheckPosition

	if FlgFileExists(strFileName) then
		-- Load Settings File in table lines with key & val fields
		local tblField = {}
		for strLine in io.lines(strFileName) do
			tblField = strLine:split("=")
			tblStickyData[tblField[1]] = tblField[2]
		end
		IntMainX = tonumber(strLoadLocal("MainX",IntMainX))
		IntMainY = tonumber(strLoadLocal("MainY",IntMainY))
		IntHelpX = tonumber(strLoadLocal("HelpX",IntHelpX))
		IntHelpY = tonumber(strLoadLocal("HelpY",IntHelpY))
		StrHelpS = strLoadLocal			("HelpS",StrHelpS)
		IntDataX = tonumber(strLoadLocal("DataX",IntDataX))
		IntDataY = tonumber(strLoadLocal("DataY",IntDataY))
		StrFolder	= strLoadLocal			("Folder",StrFolder)
		IntIndex	= tonumber(strLoadGlobal("Index",IntIndex))
		IntStyle	= tonumber(strLoadGlobal("Style",IntStyle))
		IntHyper	= tonumber(strLoadGlobal("Hyper",IntHyper))
		IntFontSet= tonumber(strLoadGlobal("FontSet",IntFontSet))
	end
	IntMainX,IntMainY = intintCheckPosition(IntMainX,IntMainY)
	IntHelpX,IntHelpY = intintCheckPosition(IntHelpX,IntHelpY)
	IntDataX,IntDataY = intintCheckPosition(IntDataX,IntDataY)
	GUI_FontDialogue(IntFontSet)								-- Assign font set
	SaveSettings(strFileName)									-- Save sticky data settings
end -- function LoadSettings

-- Save Sticky Settings to File --
function SaveSettings(strFileName)

	local tblStickyData = {}

	-- Save Local Parameter for this PC --
	local function doSaveLocal(strParam,param)
		tblStickyData[StrComputerName.."-"..strParam] = param
	end

	-- Save Global Parameter for all PC --
	local function doSaveGlobal(strParam,param)
		tblStickyData[strParam] = param
	end

	doSaveLocal("MainX",IntMainX)
	doSaveLocal("MainY",IntMainY)
	doSaveLocal("HelpX",IntHelpX)
	doSaveLocal("HelpY",IntHelpY)
	doSaveLocal("HelpS",StrHelpS)
	doSaveLocal("DataX",IntDataX)
	doSaveLocal("DataY",IntDataY)
	doSaveLocal("Folder",StrFolder)
	doSaveGlobal("Index",IntIndex)
	doSaveGlobal("Style",IntStyle)
	doSaveGlobal("Hyper",IntHyper)
	doSaveGlobal("FontSet",IntFontSet)

	local fileHandle = OpenFile(strFileName,"w")
	for strKey,strVal in pairs(tblStickyData) do
		fileHandle:write(strKey.."="..strVal.."\n")
	end
	fileHandle:close()
end -- function SaveSettings

-- GUI Help & Advice Dialogue --
function GUI_HelpDialogue()

	local function doActivateMainHelpButton()
		if BtnHelp then BtnHelp.active = "YES" end
	end -- local function doActivateMainHelpButton

	-- create the WebBrowser based on its ProgID and connect it to LuaCOM
	local	oleControl = iup.olecontrol{ "Shell.Explorer.1", designmode="NO", }
			oleControl:CreateLuaCOM()

	-- Create each GUI button with title and tooltip
	local	btnIntro	= iup.button	{ title="Introduction"		, tip="Introduction for Help and Advice"	, }
	local	btnIndex	= iup.button	{ title="Index of Names"	, tip="Index of Names Help and Advice"		, }
	local	btnHyper	= iup.button	{ title="URL Hyperlinks"	, tip="URL Hyperlinks Help and Advice"		, }
	local	btnClose	= iup.button	{ title="Close Window"		, tip="Close this Help and Advice window"	, }

	-- The following controls are global to allow Main GUI to alter font and restore default position
	HboxHelp		=	iup.hbox { font=StrFontBody, margin=StrMinMargin, homogeneous="YES", btnIntro, btnIndex, btnHyper, btnClose, }
	DialogHelp	=	iup.dialog { title=StrPlugin.." Help & Advice", background=StrWhite, startfocus=btnClose, rastersize=StrHelpS,
							iup.vbox { alignment="ACENTER", margin=StrBigMargin, expandchildren="YES",
								oleControl,
								HboxHelp,
							},
							move_cb	= function(self,x,y) if IsNormalWindow(self) then IntHelpX=x IntHelpY=y end end,
							resize_cb	= function(self) if IsNormalWindow(self) then StrHelpS=self.rastersize end end,
							close_cb	= function() doActivateMainHelpButton() end,
						}

	local strFHUG = "http://www.fhug.org.uk/wiki/doku.php?id=plugins:help:improve_html:"

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~Navigate URL, 3~action function()
		[btnIntro]	= { StrGreen	, "improve_html", false },
		[btnIndex]	= { StrGreen	, "name_index"	, false },
		[btnHyper]	= { StrGreen	, "hyperlinks"	, false },
		[btnClose]	= { StrRed	, false			, function() DialogHelp:destroy() doActivateMainHelpButton() end }
		} ) do
		iupName.expand	= "HORIZONTAL"
		iupName.size		= "x10"
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.action = function() oleControl.com:Navigate(strFHUG..tblAttr[2]) end end
		if tblAttr[3] then iupName.action = tblAttr[3] end
	end

	DialogHelp:showxy(IntHelpX,IntHelpY)		-- Show Help GUI window
	DialogHelp.rastersize=nil						-- Allow window to be resized	nil = iup.NULL

	oleControl.com:Navigate(strFHUG.."improve_html")

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_HelpDialogue

-- Add alternate & married names to _nameindex.html Web/CD/DVD page --

function IntImproveIndex(strFilename,intIndex,intStyle)

	-- Obtain Individual Lastname & Forenames --

	local function strGetNames(ptrIndiName)
		local strLastname = fhGetItemText(ptrIndiName,"~:SURNAME")	-- Get the Surname & convert to uppercase
		local strForename = fhGetItemText(ptrIndiName,"~:GIVEN_ALL")	-- Get the Forenames & any suffix
		if strLastname == "" then
			strLastname = "?"
		else
			strLastname = string.upper(strLastname)
		end
		if strForename == "" then
			strForename = "?"
		end
		return strLastname, strForename
	end -- local function strGetNames

	-- Lookup Hyperlink to Family or Individual Web Page --

	local function strLookupHyperlink(ptrIndi,tblExisting,intFamilyId)
		local strLastname, strForename = strGetNames(fhGetItemPtr(ptrIndi,"~.NAME"))
		local strFullname = strLastname..strForename
		local strLifedate = "("..fhCallBuiltInFunction("LifeDates2",ptrIndi)..")"	
		local strPagelink = ""
		local intFamRecId = 0
		if intFamilyId ~= 0 then												-- Family search needed
			local ptrFams = fhNewItemPtr()
			ptrFams:MoveTo(ptrIndi,"~.FAMS")
			while ptrFams:IsNotNull() do										-- Loop through Families
				intFamRecId = fhGetRecordId(fhGetValueAsLink(ptrFams))
				strPagelink = tostring(intFamRecId)
				strPagelink = "\"fam"..strPagelink..".html\""			-- Get the Family Pagelink
				if intFamilyId < 0 then
					if tblExisting[strPagelink..strFullname..strLifedate] then
						return strPagelink, strLifedate						-- Existing Family entry with full Lifedates
					end
					if tblExisting[strPagelink..strFullname.."( - )"] then
						return strPagelink, "( - )"							-- Existing Family entry without Lifedates due to Living Flag
					end
				elseif intFamilyId == intFamRecId then
					return strPagelink, nil									-- Husband entry only needs Family Pagelink (could check web page file exists)
				end
				ptrFams:MoveNext("SAME_TAG")
			end
		end
		strPagelink = tostring(fhGetRecordId(ptrIndi))					-- Get the Individual Pagelink
		strPagelink = "\"ind"..strPagelink..".html\""
		if tblExisting[strPagelink..strFullname..strLifedate] then
			return strPagelink, strLifedate									-- Existing Individual entry with full Lifedates
		end
		if tblExisting[strPagelink..strFullname.."( - )"] then
			return strPagelink, "( - )"										-- Existing Individual entry without Lifedates due to Living Flag
		end
		return nil, strLifedate												-- No entry found
	end -- local function strLookupHyperlink

	-- Conditionally Update Name List --

	local function doUpdateNameList(tblExisting,tblNameList,strPagelink,strLastname,strForename,strFullname,strLifedate,strTitleTxt)
		local strList = strPagelink..strLastname..strForename..strLifedate
		if not tblExisting[strList] then									-- Name exists and is a new Name
			table.insert(tblNameList, { Pagelink=strPagelink, Lastname=strLastname, Forename=strForename, Fullname=strFullname, Lifedate=strLifedate, TitleTxt=strTitleTxt } )
			tblExisting[strList] = true
		end
	end -- local function doUpdateNameList

	-- Comparison for table sort that returns true when 1st is less than 2nd --

	local function isLessThan(tbl1st,tbl2nd)
		local str1stPref = ""			-- Adjust sort so non-alpabetic initial chars come first but ordered according to any subsequent letters
		local str2ndPref = ""
		if not tbl1st["Lastname"]:match("^%u") then str1stPref = "!"..(tbl1st["Lastname"]:match("(%u+)") or "!") end
		if not tbl2nd["Lastname"]:match("^%u") then str2ndPref = "!"..(tbl2nd["Lastname"]:match("(%u+)") or "!") end
		local str1stName = str1stPref..tbl1st["Lastname"]..tbl1st["Forename"]..tbl1st["Lifedate"]..tbl1st["Pagelink"]
		local str2ndName = str2ndPref..tbl2nd["Lastname"]..tbl2nd["Forename"]..tbl2nd["Lifedate"]..tbl2nd["Pagelink"]
		return str1stName < str2ndName
	end -- local function isLessThan

	--	Read _nameindex.html file of text into tblNameIndex, down to <div class="FhIndexList">

	local tblStyleCSS = { "{ font-style:italic; }", "{ text-decoration:underline; }", "{ font-style:italic; text-decoration:underline; }" }
	local intAlphabet = 0														-- Alphabet Anchor Hyperlinks line number
	local tblNameIndex = {}													-- Table of _nameindex.html text lines
	local fileNameIndex = io.input(strFilename)
	for strLine in io.lines() do												-- Read _nameindex.html line by line
		-- Exclude XHTML CSS married & alternate name style
		if not strLine:match("^<style type=\"text/css\"> .*married .*alternate .* </style>") then
			if intIndex ~= IntIndexPrimary
			and strLine:match("</head>") then								-- Found end of Header so insert XHTML CSS married & alternate name style
				table.insert(tblNameIndex,"<style type=\"text/css\"> /*<![CDATA[*/ span.married "..tblStyleCSS[intStyle].." span.alternate "..tblStyleCSS[intStyle].." /*]]>*/ </style>")
			end
			table.insert(tblNameIndex,strLine)
			if strLine:match("^<p>.*</p>$") then							-- Found Alphabet Anchor Hyperlinks line
				intAlphabet = #tblNameIndex
			end
			if strLine:match("<div class=\"FhIndexList\">") then		-- Pause at <div class="FhIndexList"> line
				break
			end
		end
	end

	-- Read _nameindex.html web page link & full name & life dates into a tblNameList and tblExisting dictionary

	local strPagelink = ""
	local strLastname = ""
	local strForename = ""
	local strFullname = ""
	local strLifedate = ""
	local strTitleTxt = ""
	local tblNameList = {}
	local tblExisting = {}
	local intFamilyId = 0
	for strLine in io.lines() do												-- Read _nameindex.html Pagelink & Fullname & Lifedate lines 
		strPagelink, strFullname, strLifedate = strLine:match("^<li><a href=(%p%w-%.html%p)>(.+ )(%(.+%))</a></li>")
		if strPagelink and strFullname and strLifedate then				-- List the entry details
			if not ( strFullname:match(" title=\"%u%l+ Name\">")		-- Exclude alternate/married names with tooltip title="Alternate/Married Name"
					or strFullname:match("</?i]>")							-- or with legacy "<i>" italics "</i>"
					or strFullname:match("</?span.->") ) then				-- or with "<span class=...>" name "</span>"
				strLastname = strFullname:match("([^%l]+), ") or "?"
				strForename = strFullname:match(StrPlainText(strLastname)..", (.+) ") or "?"
				doUpdateNameList(tblExisting,tblNameList,strPagelink,strLastname,strForename,strLastname..", "..strForename.." ",strLifedate,"")
				if strPagelink:match("fam") then intFamilyId = -1 end
			end
		end
	end
	io.close(fileNameIndex)
	local intPrimaryNames = #tblNameList									-- Remember number of Primary Names

	if intIndex ~= IntIndexPrimary then										-- Add Alternate Names &/or Married Womens Surnames

		-- Search all GEDCOM Names to add each married/alternate Name to tables with correct web page link

		local ptrName = fhNewItemPtr()
		local ptrFams = fhNewItemPtr()
		local ptrFamr = fhNewItemPtr()
		local ptrSpou = fhNewItemPtr()
		local strStat = ""
		local ptrIndi = fhNewItemPtr()
		ptrIndi:MoveToFirstRecord("INDI")
		while ptrIndi:IsNotNull() do											-- Loop through every Individual Record
			strPagelink, strLifedate = strLookupHyperlink(ptrIndi,tblExisting,intFamilyId)
			if strPagelink then
				ptrName = fhGetItemPtr(ptrIndi,"~.NAME")

				if intIndex == IntIndexMarried
				or intIndex == IntIndexEveryone then						-- Add Married Womens Surnames

					-- For Females use her Forename with the Husband's Lastname
					if fhGetItemText(ptrIndi,"~.SEX") == "Female" then
						strLastname, strForename = strGetNames(ptrName)	-- Get her Lastname & Forename
						ptrFams:MoveTo(ptrIndi,"~.FAMS")
						while ptrFams:IsNotNull() do
		                ptrFamr = fhGetValueAsLink(ptrFams)
							ptrSpou = fhGetItemPtr(ptrFamr,"~.HUSB>")		-- Check husband is Male
							if fhGetItemText(ptrSpou,"~.SEX") == "Male" then
			                strStat = fhGetItemText(ptrFamr,"~._STAT")
			                if strStat ~= "Never Married" and strStat ~= "Unmarried Couple" then
									if intFamilyId < 0 then					-- Use the Husband's family Pagelink
										strPagelink = strLookupHyperlink(ptrSpou,tblExisting,fhGetRecordId(ptrFamr))
									end
									if strPagelink then							-- Get the Husband's Surname
										strLastname = strGetNames(fhGetItemPtr(ptrSpou,"~.NAME"))
										if strLastname ~= "?" then			-- Add the Married Name in <i> italics </i> (&/or <b> bold </b> &/or <u> underline </u> also possible)
											doUpdateNameList(tblExisting,tblNameList,strPagelink,strLastname,strForename,"<span class=\"married\">"..strLastname.."</span>, "..strForename.." ",strLifedate," title=\"Married Name\"")
										end
									end
								end
							end
							ptrFams:MoveNext("SAME_TAG")
						end
					end

				end -- Add Married Womens Surnames

				if intIndex == IntIndexAlternate
				or intIndex == IntIndexEveryone then						-- Add Alternate Names

					-- For everyone check each Alternate Name entry
					ptrName:MoveNext("SAME_TAG")
					while ptrName:IsNotNull() do
						strLastname, strForename = strGetNames(ptrName)	-- Get Alternate Surname & Forename
						if strLastname..strForename ~= "??" then			-- Add the Alternate Name in <i> italics </i> (&/or <b> bold </b> &/or <u> underline </u> also possible)
							doUpdateNameList(tblExisting,tblNameList,strPagelink,strLastname,strForename,"<span class=\"alternate\">"..strLastname..", "..strForename.."</span> ",strLifedate," title=\"Alternate Name\"")
						end
						ptrName:MoveNext("SAME_TAG")
					end

				end -- Add Alternate Names

			else
--				print(fhGetItemText(ptrIndi,"~.NAME:SURNAME_FIRST")..strLifedate,"Omit")	-- Diagnostic
			end
			ptrIndi:MoveNext()
		end

	end -- intIndex ~= IntIndexPrimary

	table.sort(tblNameList,isLessThan) 										-- Sort the NameList alphabetically by Name and Lifedates and Pagelink

	local strHeadName = nil
	local strAlphabet = "<p>A&nbsp;B&nbsp;C&nbsp;D&nbsp;E&nbsp;F&nbsp;G&nbsp;H&nbsp;I&nbsp;J&nbsp;K&nbsp;L&nbsp;M&nbsp;N&nbsp;O&nbsp;P&nbsp;Q&nbsp;R&nbsp;S&nbsp;T&nbsp;U&nbsp;V&nbsp;W&nbsp;X&nbsp;Y&nbsp;Z&nbsp;</p>"
	local strNextInit = ""
	local strPrevInit = ""
	for i, tblItem in ipairs(tblNameList) do								-- Add each NameList item to _nameindex.html text lines
		strPagelink = tblItem["Pagelink"]
		strFullname = tblItem["Fullname"]
		strLifedate = tblItem["Lifedate"]
		strTitleTxt = tblItem["TitleTxt"]
		strLastname = tblItem["Lastname"]
		if strHeadName ~= strLastname then
			if strHeadName then table.insert(tblNameIndex,"</ul>") end
			strHeadName = strLastname											-- Each new Lastname needs a Header and an unnumbered list <ul> structure
			strNextInit = strHeadName:sub(1,1)
			if strPrevInit ~= strNextInit									-- Each new Initial Letter needs an Alphabet Hyperlink <a href="#I">I</a> and Anchor <a name="I"></a>
			and strNextInit:match("%u") then
				strAlphabet = strAlphabet:gsub(strNextInit.."&nbsp;","<a href=\"#"..strNextInit.."\">"..strNextInit.."</a>&nbsp;")
				strPrevInit = "<a id=\""..strNextInit.."\"></a>"
			else
				strPrevInit = ""
			end
			table.insert(tblNameIndex,"<p>"..strPrevInit..strHeadName:gsub("^?$","(no surname)").."</p>")
			table.insert(tblNameIndex,"<ul>")
			strPrevInit = strNextInit
		end
		table.insert(tblNameIndex,"<li><a href="..strPagelink..strTitleTxt..">"..strFullname..strLifedate.."</a></li>")		-- Insert Page link, full Name & Life dates
	end
	tblNameIndex[intAlphabet] = strAlphabet:gsub("&nbsp;</p>$","</p>")		-- Remove trailing "&nbsp;" from Alphabet Anchor Hyperlinks
	table.insert(tblNameIndex,"</ul>\n</div>\n</div>\n</body>\n</html>")	-- Insert terminating tag lines

	local strNameIndex = table.concat(tblNameIndex,"\n")

	SaveStringToFile(strNameIndex,strFilename)							-- Save _nameindex.html file

	return #tblNameList - intPrimaryNames									-- Number of names added is size of list minus Primary Names

end -- function IntImproveIndex

-- Convert all URL in each featured .html Web/CD/DVD page

function IntImproveURL(strFolder,intHyper)

	-- Convert any URL into Hyperlinks --

	local function strHyper(strText,strTarget)
		if strText:match("://")
		or strText:match("mailto:")
		or strText:match("www%.") then
			-- Recognise user <a href="url">link</a> format and convert to valid XHTML
			strText = strText:gsub("&lt;a href=(.-)&gt;(.-)&lt;/a&gt;","<a class=\"fhextlink\" href=%1>%2</a>")
			-- Split text line into text prefix, anchor tag, and text suffix
			local strPrefix, strAnchor, strSuffix = strText:match("(.-)(<a class=.-</a>)(.*)")
			if strAnchor then													-- Existing URL hyperlink anchor tag found
				if not strAnchor:match("href=\"mailto") then				-- Alter target Page Tab/Window mode
					strAnchor = strAnchor:gsub("\">","\""..strTarget..">")
					strAnchor = strAnchor:gsub(" target=\".-\" ",strTarget)
				end
				strText = strHyper(strPrefix,strTarget)..strAnchor..strHyper(strSuffix,strTarget)	-- Recursively call strHyper for prefix and suffix
			else
				local strTarget = strTarget
				strText = strText:gsub("(&[lg]t;)","<<%1>>")				-- Protect symbols < &lt; and > &gt;
				-- Repeat for each URL protocol scheme and "www." without a scheme
				for i, strPattern in ipairs( { "(.)(http://", "(.)(https://", "(.)(ftp://", "([^/])(www%.", "(.)(mailto:" } ) do
					if strPattern:match("mailto") then strTarget = "" end
					strText = strText:gsub(strPattern.."[%w#&/:;=@_%%%+%-%.%?]+[^%s%p])","%1<a class=\"fhextlink\" href=\"%2\""..strTarget..">%2</a>")
					-- [%w@:/=&;#_%?%.%+%-%%] allows URL to contain alphanumeric characters %w and # & / : ; = @ _ % + - . ?
					-- [^%s%p] prevents last character from being tabs/spaces %s or punctuation %p including " , . / : ; <
					-- For details see http://en.wikipedia.org/wiki/Uniform_resource_locator and http://en.wikipedia.org/wiki/URI_scheme
				end
				strText = strText:gsub(" href=\"www%."," href=\"http://www%.")	-- Add the "http://" scheme to href="www."
				strText = strText:gsub("<<(&[lg]t;)>>","%1")				-- Unprotect symbols < &lt; and > &gt;
			end
		end
		return strText
	end -- local function strHyper

	local tblTarget	= { "", " target=\"_blank\" " }
	local strTarget	= tblTarget[intHyper]

	-- Search each .html file and convert any URL --

	local intLine = 0
	local intFile = 0
	for strFile in lfs.dir(strFolder) do
		if strFile:match("^ind%d+%.html$")
		or strFile:match("^fam%d+%.html$") then							-- Count "ind99.html" & "fam99.html" files
			intFile = intFile + 1
		end
	end
	if intFile > 100 then
		ProgressBar.Start("Converting URL",intFile)
	end
	for strFile in lfs.dir(strFolder) do
		if strFile:match("^ind%d+%.html$")
		or strFile:match("^fam%d+%.html$") then							-- "ind99.html" or "fam99.html"
			strFile = strFolder.."\\"..strFile
			local tblFile = {}
			local strLink = ""
			local flgLink = false
			local flgBody = false
			for strLine in io.lines(strFile) do								-- Read each .html file line by line
				if strLine == "<body>" then flgBody = true end
				if flgBody then
					strLink = strHyper(strLine,strTarget)
					if strLine ~= strLink then								-- Found and converted hyperlink(s) in <body>
						strLine = strLink
						intLine = intLine + 1									-- Count lines altered
						flgLink = true
					end
				end
				table.insert(tblFile,strLine)
			end
			if flgLink then														-- Only save changed .html files
				SaveStringToFile(table.concat(tblFile,"\n"),strFile)
			end
			ProgressBar.Step(1)
		end
		if ProgressBar.Stop() then break end
	end
	ProgressBar.Close()
	return intLine
end -- function IntImproveURL

-- Graphical User Interface --

function GUI_MainDialogue()

	-- Create GUI controls
	local	btnFolder	= iup.button	{ expand="YES", padding="20", fgcolor=StrGreen,	title="Browse to the Project '\\Public\\FH Website' or '\\Public\\FH CD-DVD\\data' or equivalent HTML folder." }
	local	txtFolder	= iup.text	{ expand="YES", padding="02", fgcolor=StrBlack,	value=" ", readonly="YES", alignment="ACENTER" }
	local	txtStatus	= iup.text	{ expand="YES", padding="20", fgcolor=StrBlack,	value=" ", readonly="YES", alignment="ACENTER" }
	local	vbxFolder	= iup.vbox	{ font=StrFontBody, alignment="ACENTER", btnFolder, txtFolder, txtStatus }
	local	frmFolder	= iup.frame	{ font=StrFontHead, fgcolor=StrBlack, vbxFolder, title="  HTML Folder  " }

	local	btnIndex	= iup.button	{ expand="YES", padding="20", fgcolor=StrGreen,	title="Adjust the Alternate Names and Married Women Surnames in the 'Index of Names' page using italic font." }
--	local	lblIndex	= iup.label	{ expand="NO" , padding="20", fgcolor=StrBlack,	title="Names to include in 'Index of Names' page : ", alignment="ARIGHT" }
--	local	lstIndex	= iup.list	{ expand="NO" , padding="20", fgcolor=StrGreen,	value=IntIndex, dropdown="YES", "   Default Primary Names only.", "   Add Alternate Names only.", "   Add Married Surnames only.", "   Add Alternate & Married Names." }
--	local	hbxIndex	= iup.hbox	{ alignment="ACENTER", gap="10", margin="10x0", lblIndex, lstIndex }
	local	lblIndex	= iup.label	{ expand="NO" , padding="20", fgcolor=StrBlack,	title="Names to include : ", alignment="ARIGHT" }
	local	lstIndex	= iup.list	{ expand="NO" , padding="20", fgcolor=StrGreen,	value=IntIndex, dropdown="YES", "   Default Primary Names only.", "   Add Alternate Names only.", "   Add Married Surnames only.", "   Add Alternate & Married Names." }
	local	lblStyle	= iup.label	{ expand="NO" , padding="20", fgcolor=StrBlack,	title="Style : ", alignment="ARIGHT" }
	local	lstStyle	= iup.list	{ expand="NO" , padding="20", fgcolor=StrGreen,	value=IntStyle, dropdown="YES", "   Italics only.", "   Underline only.", "   Italics & Underline." }
	local	hbxStyle	= iup.hbox	{ alignment="ACENTER", gap="10", margin="10x0", lblIndex, lstIndex, lblStyle, lstStyle }
	local	txtIndex	= iup.text	{ expand="YES", padding="20", fgcolor=StrBlack,	value=" ", readonly="YES", alignment="ACENTER" }
	local	vbxIndex	= iup.vbox	{ font=StrFontBody, alignment="ACENTER", btnIndex, hbxIndex, hbxStyle, txtIndex }
	local	frmIndex	= iup.frame	{ font=StrFontHead, fgcolor=StrBlack, vbxIndex,	title="  Index of Names  " }

	local	btnHyper	= iup.button	{ expand="YES", padding="20", fgcolor=StrGreen,	title="Ensure every Uniform Resource Locator (URL) www. http: https: ftp: && mailto: is an active Hyperlink." }
	local	lblHyper	= iup.label	{ expand="NO" , padding="20", fgcolor=StrBlack,	title="Method to open URL Hyperlink target pages : ", alignment="ARIGHT" }
	local	lstHyper	= iup.list	{ expand="NO" , padding="20", fgcolor=StrGreen,	value=IntHyper, dropdown="YES", "   Open in the same Page frame.", "   Open in a new Tab or Window." }
	local	hbxHyper	= iup.hbox	{ alignment="ACENTER", gap="10", margin="10x0", lblHyper, lstHyper }
	local	txtHyper	= iup.text	{ expand="YES", padding="20", fgcolor=StrBlack,	value=" ", readonly="YES", alignment="ACENTER" }
	local	vbxHyper	= iup.vbox	{ font=StrFontBody, alignment="ACENTER", btnHyper, hbxHyper, txtHyper }
	local	frmHyper	= iup.frame	{ font=StrFontHead, fgcolor=StrBlack, vbxHyper,	title="  URL Hyperlinks  " }

	local	btnReset	= iup.button	{ expand="YES", padding="10", fgcolor=StrGreen,	title="Restore Defaults" }
	local	btnFont	= iup.button	{ expand="YES", padding="10", fgcolor=StrGreen,	title="Set Interface Font" }
			BtnHelp	= iup.button	{ expand="YES", padding="10", fgcolor=StrGreen,	title="  Help && Advice" }
	local	btnClose	= iup.button	{ expand="YES", padding="10", fgcolor=StrRed,	title="Close Plugin" }
	local	boxOption	= iup.hbox	{ alignment="ACENTER", gap="10", margin="10x0", btnReset, btnFont, BtnHelp, btnClose }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogMain =	iup.dialog { title=StrPlugin..StrVersion, dialogframe="YES", background=StrWhite, startfocus=btnClose, font=StrFontBody,
								iup.vbox { alignment="ACENTER", gap="10", margin="10x10", frmFolder, frmIndex, frmHyper, boxOption },
								move_cb	=function(self,x,y) if IsNormalWindow(self) then IntMainX=x IntMainY=y end end,
							}

	local function setStyleList(strMode)
		if IntIndex == 1 then
			lstStyle.active = "NO"
		else
			lstStyle.active = strMode
		end
	end -- local function setStyleList

	local function setActiveGUI(strMode)
		dialogMain.active = strMode
		btnIndex.active = strMode
		lstIndex.active = strMode
		lstStyle.active = strMode
		btnHyper.active = strMode
		lstHyper.active = strMode
		setStyleList(strMode)
	end -- local function setActiveGUI

	local function isFolderOK()												-- Check if folder contains Website or CD-DVD HTML files
		local isOK = FlgFileExists(StrFolder.."\\_nameindex.html") and FlgFileExists(StrFolder.."\\fhstyle.css")
		if isOK then
			setActiveGUI("YES")
			txtStatus.value = "The HTML folder is valid, so please use any of the options below."
			txtStatus.fgcolor = StrGreen
			txtFolder.fgcolor = StrBlack
		else
			setActiveGUI("NO")
			txtStatus.value = "Folder does NOT contain FH Website or FH CD-DVD HTML files, so use Browse button."
			txtStatus.fgcolor = StrAmber
			txtFolder.fgcolor = StrAmber
		end
		txtFolder.value = StrFolder
		dialogMain.active = "YES"
		return isOK
	end -- local function isFolderOK

	function btnFolder:action()												-- Action for Folder button
		repeat
			local strDirectory = StrFolder
			if not FlgFolderExists(StrFolder) then strDirectory = StrPublicPath end
			local dialogFolder = iup.filedlg { dialogtype="DIR", title="Please select 'FH Website' or 'FH CD-DVD\\data' or equivalent HTML folder", directory=strDirectory }
			dialogFolder:popup(iup.CENTER, iup.CENTER)
			local strStatus = dialogFolder.status
			if strStatus == "0" then
				StrFolder = dialogFolder.value
				SaveSettings(StrStickyFile)									-- Save sticky data settings
				txtIndex.value = " "
				txtHyper.value = " "
			end
		until isFolderOK() or strStatus == "-1"
	end -- function btnFolder:action

	function btnIndex:action()												-- Action for Index button
		if isFolderOK() then
			setActiveGUI("NO")
			local intNames = IntImproveIndex(StrFolder.."\\_nameindex.html",tonumber(lstIndex.value),tonumber(lstStyle.value))
			txtIndex.value = intNames.." Alternate Names &/or Married Women Surnames added to the 'Index of Names' page."
			setActiveGUI("YES")
		end
	end -- function btnIndex:action

	function lstIndex:action(strText,intItem,intState)					-- Action for Index dropdown
		if intState == 1 then
			IntIndex = intItem
			SaveSettings(StrStickyFile)										-- Save sticky data settings
			setStyleList("YES")
		end
	end -- function lstIndex:action

	function lstStyle:action(strText,intItem,intState)					-- Action for Style dropdown
		if intState == 1 then
			IntStyle = intItem
			SaveSettings(StrStickyFile)										-- Save sticky data settings
		end
	end -- function lstStyle:action

	function btnHyper:action()												-- Action for Hyper button
		if isFolderOK() then
			setActiveGUI("NO")
			local intLines = IntImproveURL(StrFolder,tonumber(lstHyper.value))
			txtHyper.value = intLines.." lines of www. http: https: ftp: & mailto: URL Hyperlinks altered in 'Individual' or 'Family' pages."
			setActiveGUI("YES")
			dialogMain.bringfront = "YES"
		end
	end -- function btnHyper:action

	function lstHyper:action(strText,intItem,intState)					-- Action for Hyper dropdown
		if intState == 1 then
			IntHyper = intItem
			SaveSettings(StrStickyFile)										-- Save sticky data settings
		end
	end -- function lstHyper:action

	function btnReset:action()												-- Action for Restore Defaults button
		ResetDefaultSettings()
		if	BtnHelp.active == "NO" then										-- If Help button inactive, then Help is active, so redisplay its dialogue
			DialogHelp.rastersize = StrHelpS
			DialogHelp:showxy(IntHelpX,IntHelpY)
		end
		txtFolder.value	= StrFolder											-- Reset controls & redisplay Main dialogue
		lstIndex.value	= IntIndex
		txtIndex.value	= " "
		lstHyper.value	= IntHyper
		txtHyper.value	= " "
		isFolderOK()																-- Adjust buttons according to current folder
		dialogMain:showxy(IntMainX,IntMainY)
		SaveSettings(StrStickyFile)											-- Save sticky data settings
	end -- function btnReset:action

	function btnFont:action()													-- Action for Set Interface Font button
		local strAnswer = GUI_FontDialogue()
		if strAnswer == "Change" then
			frmFolder.font	= StrFontHead
			frmIndex.font	= StrFontHead
			frmHyper.font	= StrFontHead
			dialogMain.font	= StrFontBody
			vbxFolder.font	= StrFontBody
			vbxIndex.font	= StrFontBody
			vbxHyper.font	= StrFontBody
			if	BtnHelp.active == "NO" then									-- If Help button inactive, then Help is active, so update its font
				HboxHelp.font = StrFontBody
			end
			SaveSettings(StrStickyFile)										-- Save sticky data settings
		end
	end -- function btnFont:action

	function BtnHelp:action()													-- Action for Help & Advice button
		BtnHelp.active = "NO"
		GUI_HelpDialogue()
	end -- function BtnHelp:action

	function btnClose:action()												-- Action for Close Plugin button
		return iup.CLOSE
	end -- function btnClose:action

	isFolderOK()																	-- Adjust buttons according to current folder 

	dialogMain:showxy(IntMainX,IntMainY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_MainDialogue

-- Main code starts here --

--	RequireLibraryModule("tatewise-library-module","1.0")

	CheckVersionInStore(StrVersion)

	PresetGlobalConstants()			-- Preset global data constants

	ResetDefaultSettings()				-- Preset default sticky settings

	IntFontSet = IntFontPlain			-- Font Face & Style default

	LoadSettings(StrStickyFile)		-- Load sticky data settings

	GUI_MainDialogue()

	SaveSettings(StrStickyFile)		-- Save sticky data settings
