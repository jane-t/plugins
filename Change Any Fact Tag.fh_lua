--[[
@Title:			Change Any Fact Tag V2.2
@Author:			Mike Tate
@LastUpdated:	16 January 2012
@Version:			2.2
@Description:	Changes or deletes any Individual Fact or Family Fact or Record Tag.
@V2.2:				Added the Interface Font option, Result Set of changes, Knowledge Base Help, V5.0.0.3/4 fixes, and GUI & code revisions. 
@V2.1:				Added the View Log and Purge Log buttons to user interface.
@V2.0:				Tested with many UDF Facts & Tags, and revised user interface with Filter option.
@V1.1:				Copes with most UDF Fact anomalies and adds many minor user interface features.
					Any unconvertible data and error reports are both logged and saved in SOURce Notes.
@V1.0 Beta:		Supports the Standard Fact Set, any Custom Fact Sets, undefined Custom Facts, and UDF Facts.
]]

	require "iuplua"								-- To access GUI window builder
	require "lfs"									-- To access LUA filing system
	require "iupluaole"								-- To access OLE subsystem
	require "luacom"								-- To access COM subsystem

-- Global Data Constants Definition --
function PresetGlobalConstants()

	-- GUI Global Constants

	StrPlugin			= "Change Any Fact Tag"	-- Plugin title & version
	StrIssue			= " V2.2"
	StrRed				= "255 000 000"				-- Color attributes
	StrGreen			= "000 120 000"
	StrBlue			= "000 000 255"
	StrBlack			= "000 000 000"
	StrGap 			= "4"							-- Gap & Margin attributes
	StrMinMargin		= "1x1"
	StrBigMargin		= "8x8"
	IntMaxNameLen	= 22							-- Length at which Button label Tag Names are truncated
	LogFileHandle	= nil
	StrLogNeedTitle = "Log Edits to File"		-- Radio button titles
--	StrRegExprTitle = "Reg. Expr. Filters"
	StrPatternTitle = "Pattern Filters"
	StrConfirmTitle = "Confirm all Edits"
	StrWarningTitle = "Show all Warnings"
	IntChosenTab		= 0								-- GUI Tab currently displayed
	StrOldData		= ""							-- Description of Source Tag e.g. Birth, Occupation, etc
	StrNewData		= ""							-- Description of Target Tag

	-- Statistics for Tags processed

	IntSkippedData	=	0							-- Count of current skipped Tags
	IntDeletedData	=	0							-- Count of current deleted Tags
	IntChangedData	=	0							-- Count of current changed Tags
	IntHandledData	=	0							-- Sum of the above data counts
	IntWarningData	=	0							-- Count of current warning Messages
	IntSkippedTotal	=	0							-- Count of total skipped Tags
	IntDeletedTotal	=	0							-- Count of total deleted Tags
	IntChangedTotal	=	0							-- Count of total changed Tags
	IntHandledTotal	=	0							-- Sum of the above total counts
	IntWarningTotal	=	0							-- Count of total warnings

	-- Global constants

	FlgToLogFile 	=	true						-- Write counts to LogFile flag
	StrDeleteTag		= "Delete"					-- New Tag value to signal delete Old Tag
	StrSkipTag		= "Skip"						-- New Tag value to signal skip Old Tag
	StrModeOld		= "Old"						-- Parameter value to select only Old Tag
	StrModeNew		= "New"						-- Parameter value to select only New Tag
	StrModeAll		= "All"						-- Parameter value to select both Old & New Tag
	IntHelpCheck		=	1							-- Parameter value to select Warning GUI Check Tags compatible message
	IntHelpNoted		=	2							-- Parameter value to select Warning GUI Value in Source Note message
	IntHelpReport	=	3							-- Parameter value to select Warning GUI Report to FHUG Forums message
	IntFilterValue	=	1							-- Filter index for Tag selection Value Filter
	IntFilterDate	=	2							-- Filter index for Tag selection Date Filter
	IntFilterPlace	=	3							-- Filter index for Tag selection Place Filter
	IntFontPlain		=	1							-- Font Face & Style values for IntFontSet
	IntFontBold		=	2
	IntArialPlain	=	3
	IntArialBold		=	4
	IntTahomaPlain	=	5
	IntTahomaBold	=	6
	StrFontFace		= string.gsub(iup.GetGlobal("DEFAULTFONT"),",.*","")
	StrHelpWinSize	= "1030x720"
	StrFontSetTitle	= "Set Interface Font"

	-- Predefined Tag Set Name constants for lookup tables

	StrStandard		= "Standard"					-- Standard Fact Set name, file & folder
	StrCustomFacts	= "<Custom Facts>"			-- Dummy Undefined Custom Facts Set
	StrDefinedTags	= "<Defined Tags>"			-- Dummy Gedcom 5.5 Defined Tags Set
	StrUDFTagsSet	= "<UDF Tags>"				-- Dummy Uncategorised Data Field (UDF) Tags Set

	TblRecordTag		= {"INDI","FAM","NOTE","SOUR","REPO","OBJE","SUBM","SUBN","HEAD"}
	TblRecordName	= {"Individual","Family","Note","Source","Repository","Multimedia","Submitter","Submission","Header"}

	-- Tag code & name table variables

	TblOldTagIndex	= {}							-- TblOldTagIndex[strRecTag][strTagSet][intItem] = strOldTag for Source Name dropdown lists
	TblNewTagIndex	= {}							-- TblNewTagIndex[strRecTag][strTagSet][intItem] = strNewTag for Target Name dropdown lists
	TblSetNameIndex	= {}							-- TblSetNameIndex[strRecTag][intItem] = strSetName for Source/Target Set dropdown lists
	TblDictionary	= {}							-- TblDictionary[strRecTag][strTag] = strName and TblDictionary[strRecTag][strName] = strTag both way translations

	for intRecTag,strRecTag in ipairs(TblRecordTag) do
		TblOldTagIndex[strRecTag] = {}
		TblNewTagIndex[strRecTag] = {}
		for intItem, strSetName in ipairs({StrCustomFacts,StrDefinedTags,StrUDFTagsSet}) do
			TblOldTagIndex[strRecTag][strSetName]	= {}
			TblNewTagIndex[strRecTag][strSetName]	= {}
		end
		TblSetNameIndex[strRecTag] = {}
		TblDictionary[strRecTag] = {}
		-- Special RecordName v RecordTag both way translations
		TblDictionary[TblRecordName[intRecTag]] = strRecTag
		TblDictionary[strRecTag]["%"] = TblRecordName[intRecTag]
	end

	-- Compose Date & Time Suffix for Log files --
	local function strDateTime()
		local tblDate = {}
		tblDate = os.date("*t")
		return " - "..string.format("%04d",tblDate["year"]).."-"..string.format("%02d",tblDate["month"]).."-"..string.format("%02d",tblDate["day"]).." "..string.format("%02d",tblDate["hour"])..string.format("%02d",tblDate["min"])..string.format("%02d",tblDate["sec"])
	end -- local function strDateTime

	-- Filename Global Constants

	StrComputerName = os.getenv("COMPUTERNAME")

	StrStickyFile = fhGetPluginDataFileName()
	-- Allow plugins with variant filenames to use same plugin data files
	StrStickyFile = string.gsub(StrStickyFile,"\\"..StrPlugin..".+%.[D,d][A,a][T,t]$","\\"..StrPlugin..".dat")
	if StrStickyFile == "" then
		-- Use standalone GEDCOM path & filename..".fh_data\Plugin Data\" as the folder + the Plugin Filename..".dat"
		StrStickyFile = fhGetContextInfo("CI_GEDCOM_FILE")
		StrStickyFile = string.gsub(StrStickyFile, "%.[G,g][E,e][D,d]", ".fh_data")
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\Plugin Data"
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\"..StrPlugin..".dat"
	end

	-- Plugin data folder path name
	StrPluginPath = string.gsub(StrStickyFile,"\\"..StrPlugin.."%.[D,d][A,a][T,t]$","")
	StrLogFile = StrPluginPath.."\\"..StrPlugin..strDateTime()..".log"

end -- function PresetGlobalConstants

-- Split a string using separator --
function string:split(sep)
	local sep = sep or ":"
	local fields = {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end -- function string:split

-- Check if file exists --
function FlgFileExists(strFileName)
	local fileHandle = io.open(strFileName,"r")
	if fileHandle ~= nil then
		io.close(fileHandle)
		return true
	else
		return false
	end
end -- function FlgFileExists

-- Open File and return Handle --
function OpenFile(strFileName,strMode)
	local fileHandle, strError = io.open(strFileName,strMode)
	if fileHandle == nil then
		error("\n Unable to open file: "..strFileName.." \n "..strError.." \n")
	end
	return fileHandle
end -- function OpenFile

-- Returns a Directory Tree --
function dirtree(dir)
    assert(dir and dir ~= "", "directory parameter is missing or empty")
    if string.sub(dir, -1) == "/" then
        dir=string.sub(dir, 1, -2)
    end
    
    local function doYieldTree(dir)
    for entry in lfs.dir(dir) do
        if entry ~= "." and entry ~= ".." then
            entry=dir.."\\"..entry
            local attr=lfs.attributes(entry)
            coroutine.yield(entry,attr)
            if attr.mode == "directory" then
                doYieldTree(entry)
            end
        end
    end
end

return coroutine.wrap(function() doYieldTree(dir) end)
end

-- Reset Sticky Settings to Default Values --
function ResetDefaultSettings()
	IntMainX		= iup.CENTER			-- GUI Main window position X & Y co-ordinate
	IntMainY		= iup.CENTER
	IntViewX		= iup.CENTER			-- GUI View Logs window position X & Y co-ordinate
	IntViewY		= iup.CENTER
	IntHelpX		= iup.CENTER			-- GUI Help window position X & Y co-ordinate
	IntHelpY		= iup.CENTER
	IntDataX		= iup.CENTER			-- GUI Font/Data/Warn window position X & Y co-ordinate
	IntDataY		= iup.CENTER
	StrLogNeed	= "ON"					-- Radio button "ON"/"OFF" states
	StrPattern	= "ON"
	StrConfirm	= "ON"
	StrWarning	= "ON"
end -- function ResetDefaultSettings

-- Load Sticky Settings from File --
function LoadSettings(strFileName)

	local tblStickyData = {}

	-- Load Local Parameter for this PC --
	local function strLoadLocal(strParam,strDefault)
		return tblStickyData[StrComputerName.."-"..strParam] or strDefault
	end

	-- Load Global Parameter for all PC --
	local function strLoadGlobal(strParam,strDefault)
		return tblStickyData[strParam] or strDefault
	end

	-- Ensure Window Position is on Screen --
	local function intintCheckPosition(x,y)
		local strScreen = iup.GetGlobal("VIRTUALSCREEN")
		local tblField = strScreen:split(" ")
		-- tblField[1] = origin x, tblField[2] = origin y, tblField[3] = width, tblField[4] = height
		if tonumber(x) == nil then
			x = iup.CENTER
		elseif tonumber(x) > tonumber(tblField[3]) then
			x = iup.CENTER
		end
		if tonumber(y) == nil then
			y = iup.CENTER
		elseif tonumber(y) > tonumber(tblField[4]) then
			y = iup.CENTER
		end
		return tonumber(x),tonumber(y)
	end -- local function intintCheckPosition

	if FlgFileExists(strFileName) then
		-- Load Settings File in table lines with key & val fields
		local tblField = {}
		for strLine in io.lines(strFileName) do
			tblField = strLine:split("=")
			tblStickyData[tblField[1]] = tblField[2]
		end
		IntMainX = tonumber(strLoadLocal("MainX",IntMainX))
		IntMainY = tonumber(strLoadLocal("MainY",IntMainY))
		IntViewX = tonumber(strLoadLocal("ViewX",IntViewX))
		IntViewY = tonumber(strLoadLocal("ViewY",IntViewY))
		IntHelpX = tonumber(strLoadLocal("HelpX",IntHelpX))
		IntHelpY = tonumber(strLoadLocal("HelpY",IntHelpY))
		IntDataX = tonumber(strLoadLocal("DataX",IntDataX))
		IntDataY = tonumber(strLoadLocal("DataY",IntDataY))
		StrLogNeed = strLoadGlobal("LogNeed",StrLogNeed)
		StrPattern = strLoadGlobal("RegExpr",StrPattern)	-- Old filter option
		StrPattern = strLoadGlobal("Pattern",StrPattern)
		StrConfirm = strLoadGlobal("Confirm",StrConfirm)
		StrWarning = strLoadGlobal("Warning",StrWarning)
		IntFontSet = tonumber(strLoadGlobal("FontSet",IntFontSet))
	end
	IntMainX,IntMainY = intintCheckPosition(IntMainX,IntMainY)
	IntDataX,IntDataY = intintCheckPosition(IntDataX,IntDataY)
	IntHelpX,IntHelpY = intintCheckPosition(IntHelpX,IntHelpY)
	IntViewX,IntViewY = intintCheckPosition(IntViewX,IntViewY)
	GUI_FontDialogue(IntFontSet) -- Assign font set
end -- function LoadSettings

-- Save Sticky Settings to File --
function SaveSettings(strFileName)

	local tblStickyData = {}

	-- Save Local Parameter for this PC --
	local function doSaveLocal(strParam,param)
		tblStickyData[StrComputerName.."-"..strParam] = param
	end

	-- Save Global Parameter for all PC --
	local function doSaveGlobal(strParam,param)
		tblStickyData[strParam] = param
	end

	doSaveLocal("MainX",IntMainX)
	doSaveLocal("MainY",IntMainY)
	doSaveLocal("ViewX",IntViewX)
	doSaveLocal("ViewY",IntViewY)
	doSaveLocal("HelpX",IntHelpX)
	doSaveLocal("HelpY",IntHelpY)
	doSaveLocal("DataX",IntDataX)
	doSaveLocal("DataY",IntDataY)
	doSaveGlobal("LogNeed",StrLogNeed)
	doSaveGlobal("Pattern",StrPattern)
	doSaveGlobal("Confirm",StrConfirm)
	doSaveGlobal("Warning",StrWarning)
	doSaveGlobal("FontSet",IntFontSet)

	local fileHandle = OpenFile(strFileName,"w")
	for strKey,strVal in pairs(tblStickyData) do
		fileHandle:write(strKey.."="..strVal.."\n")
	end
	fileHandle:close()
end -- function SaveSettings

-- Determine if a Table has Data --
function FlgTableHasData(tblTable)
	if next(tblTable) == nil then
		return false
	else
		return true
	end
end -- function FlgTableHasData

-- Insert a Tag in Old &/or New Tag Index of Tags defined by Tag Set
function DoInsertTagIndex(strRecTag,strSet,strTag,strMode)
	-- strMode = StrModeOld to only update Old Tag Index
	-- strMode = StrModeNew to only update New Tag Index
	-- strMode = StrModeAll to update both Old & New Index
	local strTildeTag = "~"..strTag.."~"
	if strMode == StrModeOld or strMode == StrModeAll then
		if string.find("~"..table.concat(TblOldTagIndex[strRecTag][strSet],"~").."~",strTildeTag,1,true) == nil then
			table.insert(TblOldTagIndex[strRecTag][strSet],strTag)		-- Add Tag to Old Tag list
		end
	end
	if strMode == StrModeNew or strMode == StrModeAll then
		if string.find("~"..table.concat(TblNewTagIndex[strRecTag][strSet],"~").."~",strTildeTag,1,true) == nil then
			table.insert(TblNewTagIndex[strRecTag][strSet],strTag)		-- Add Tag to New Tag list
		end
	end
end -- function DoInsertTagIndex

-- Remove a Tag from Old Tag Index of Tags defined by Tag Set
function DoRemoveTagIndex(strRecTag,strOldSet,strOldTag)
	for intTag,strTag in ipairs(TblOldTagIndex[strRecTag][strOldSet]) do
		if strTag == strOldTag then
			table.remove(TblOldTagIndex[strRecTag][strOldSet],intTag)
			break
		end
	end
end -- function DoRemoveTagIndex

-- Load Standard & Custom & UDF Facts & Tags --
function LoadFactsAndTags()

	-- Load a Facts File into Facts Tables
	local function doLoadFactsTable(strFactsFile,strFactsFolder)
		local strFileName, strStart, strOldTag, strRecTag
		local tblField = {}

		-- Parse a Fact Item from a Fact File 
		local function strstrParseFactItem(strItem)
			local strTag, strEnd
			local tblField = {}
			tblField = strItem:split("-")
			if tblField[1] == "EVEN" or tblField[1] == "_ATTR" then
				-- Custom Facts have format such as EVEN-TAG-IE or _ATTR-TAG-FA
				strTag = tblField[1].."-"..tblField[2]
				strEnd = tblField[3]
			else
				-- Standard Facts have format such as TAG-IE or TAG-FA
				strTag = tblField[1]
				strEnd = tblField[2]
			end
			strEnd = string.sub(strEnd,1,1)
			if strEnd == "I" then			-- "IA" Indiv Attr or "IE" Indiv Event
				return strTag,"INDI"
			elseif strEnd == "F" then		-- "FA" Family Attr or "FA" Family Event
				return strTag,"FAM"
			else
				error("\n\n Unrecognised fact item "..strItem.." \n in "..strFactsFile.." \n\n")
			end
		end -- local function strstrParseFactItem

		-- Extract the Filename
		strFileName = string.gsub(strFactsFile,strFactsFolder.."\\","")
		strFileName = string.gsub(strFileName,".fhf","")

		TblOldTagIndex["INDI"][strFileName] = {}
		TblNewTagIndex["INDI"][strFileName] = {}
		TblOldTagIndex["FAM"][strFileName] = {}
		TblNewTagIndex["FAM"][strFileName] = {}

		for strLine in io.lines(strFactsFile) do
			strStart = string.sub(strLine,1,4)
			if strStart == "Item" then			-- Found a Fact Tag item such as Item=EVEN-TAG-IE or Item=TAG-FA
				tblField = strLine:split("=")
				strLine = tblField[2]
				strOldTag,strRecTag = strstrParseFactItem(strLine)
				DoInsertTagIndex(strRecTag,strFileName,strOldTag,StrModeNew)
			elseif strStart == "[FCT" then		-- Found start of Fact definition such as [FCT-TAG-IE]
				strLine = string.sub(strLine,6)
				strLine = string.sub(strLine,1,-2)
				strOldTag,strRecTag = strstrParseFactItem(strLine)
			elseif strStart == "Name" then		-- Found Fact Name to save against Tag
				tblField = strLine:split("=")
				if tblField[2] ~= nil then
					TblDictionary[strRecTag][strOldTag] = tblField[2]
				end
			elseif strStart == "Labe" then		-- Found Fact Label preferred to Fact Name
				tblField = strLine:split("=")
				if tblField[2] ~= nil then
					if string.len(TblDictionary[strRecTag][strOldTag]) > IntMaxNameLen or string.len(tblField[2]) <= IntMaxNameLen then
						TblDictionary[strRecTag][strOldTag] = tblField[2]
					end
				end
			elseif strStart == "Abbr" then		-- Found Fact Abbr to replace long Fact Name
				tblField = strLine:split("=")
				if tblField[2] ~= nil then
					if string.len(TblDictionary[strRecTag][strOldTag]) > IntMaxNameLen and string.len(tblField[2]) <= IntMaxNameLen then
						TblDictionary[strRecTag][strOldTag] = tblField[2]
					end
				end
			end
		end
		for intItem, strRecTag in ipairs({"INDI","FAM"}) do
			table.insert(TblSetNameIndex[strRecTag], strFileName)
			for intOldTag,strOldTag in ipairs(TblNewTagIndex[strRecTag][strFileName]) do
				local strName = TblDictionary[strRecTag][strOldTag]
				TblDictionary[strRecTag][strName] = strOldTag
			end
		end

	end -- local function doLoadFactsTable

	-- Load Gedcom Defined Tags to Dummy Tag Set
	local function doLoadDefinedTags(strRecTag,tblRecTag)
		for strOldTag,strOldName in pairs(tblRecTag) do
			DoInsertTagIndex(strRecTag,StrDefinedTags,strOldTag,StrModeNew)
			TblDictionary[strRecTag][strOldTag] = strOldName
			TblDictionary[strRecTag][strOldName] = strOldTag
		end
	end -- local function doLoadDefinedTags

	-- Load Undefined Tags to Dummy Tag Sets
	local function doLoadUndefinedTags()
		local strSuffix = ""
		local flgTagFound = false
		local strOldTag = ""
		local ptrOldTag = fhNewItemPtr()
		local ptrRecord = fhNewItemPtr()
		for intRecTag,strRecTag in ipairs(TblRecordTag) do
			ptrRecord:MoveToFirstRecord(strRecTag)
			while not ptrRecord:IsNull() do					-- Search each Record
				ptrOldTag:MoveToFirstChildItem(ptrRecord)
				while not ptrOldTag:IsNull() do				-- Search each Tag
					strOldTag = fhGetTag(ptrOldTag)
					if fhIsEvent(ptrOldTag) or fhIsAttribute(ptrOldTag) then					-- Found an Event/Attribute Fact
						for intSet,strSet in ipairs(TblSetNameIndex[strRecTag]) do			-- Search existing Fact Sets and Fact Tags
							flgTagFound = false
							if string.find(table.concat(TblNewTagIndex[strRecTag][strSet],"~"),strOldTag,1,true) ~= nil then
								DoInsertTagIndex(strRecTag,strSet,strOldTag,StrModeOld)		-- Add current Fact Tag to Old Tag index for Fact Set
								flgTagFound = true
								break																		-- Escape if Fact Tag is found
							end
						end
						if not flgTagFound then
							DoInsertTagIndex(strRecTag,StrCustomFacts,strOldTag,StrModeAll)	-- Add undefined Fact Tag to dummy UCF Fact Set
							TblDictionary[strRecTag][strOldTag] = strOldTag
						end
					elseif fhIsUDF(ptrOldTag) then													-- Found UDF Tag
						strSuffix = " UDF Tag"
						if strRecTag == "INDI" or strRecTag == "FAM" then
							local strOldVal = fhGetValueAsText(ptrOldTag)
							local ptrLink,strTag = PtrStrTranslateLink(strOldVal)				-- If value is a link such as @S99@ then not valid as a Fact
							if ptrLink == nil then
								strSuffix = " UDF Attribute"
								if strOldVal == "" and TblNewTagIndex[strRecTag][StrUDFTagsSet][strOldTag] ~= strOldTag..strSuffix then
									strSuffix = " UDF Event"											-- If its value is null, and not already an Attribute, then it is an Event
								end
							end
						end
						DoInsertTagIndex(strRecTag,StrUDFTagsSet,strOldTag,StrModeAll)		-- Add uncategorised Data Tag to dummy UDF Tag Set
						TblDictionary[strRecTag][strOldTag] = strOldTag..strSuffix
						TblDictionary[strRecTag][strOldTag..strSuffix] = strOldTag
					else
						DoInsertTagIndex(strRecTag,StrDefinedTags,strOldTag,StrModeOld)			-- Add current defined Data Tag to Old Tag index
						if TblDictionary[strRecTag][strOldTag] == nil then
							TblDictionary[strRecTag][strOldTag] = strOldTag.." not Defined !"	-- Fallback in case Tag is not in <Defined Tags> Set
							TblDictionary[strRecTag][strOldTag.." not Defined !"] = strOldTag
						end
					end
					ptrOldTag:MoveNext("ANY")
				end
				ptrRecord:MoveNext("SAME_TAG")			--	Move to next Record
			end
			for intItem,strSetName in ipairs({StrCustomFacts,StrDefinedTags,StrUDFTagsSet}) do
				if FlgTableHasData(TblOldTagIndex[strRecTag][strSetName]) then
					table.insert(TblSetNameIndex[strRecTag], strSetName)
				end
			end
		end
	end -- local function doLoadUndefinedTags()

	-- Define Folder for Family Historian Custom Facts
	strAppDataFolder = fhGetContextInfo("CI_APP_DATA_FOLDER").."\\Fact Types"

	-- Load the Standard Fact Set
	strFactsFolder = strAppDataFolder.."\\"..StrStandard
	doLoadFactsTable(strFactsFolder.."\\"..StrStandard..".fhf",strFactsFolder)

	-- Load every Custom Fact Set
	strFactsFolder = strAppDataFolder.."\\Custom"
	for strFactsFile, tblAttr in dirtree(strFactsFolder) do
		doLoadFactsTable(strFactsFile,strFactsFolder)
	end

	-- Load every GEDCOM 5.5 1996 Defined Tag Set
	doLoadDefinedTags("INDI",{RIN="Automated Record Id",ALIA="Alias",ANCI="Ancestor Interest",ASSO="Associated Person",REFN="Custom Id",DESI="Descendant Interest",_FLGS="Flags",CHAN="Last Change Notes",AFN="LDS Ancestral File No.",BAPL="LDS Baptism",SLGC="LDS Child Sealing",CONL="LDS Confirmation",ENDL="LDS Endowment",OBJE="Multimedia Object",OBJE2="Multimedia Object (local)",NAME="Name",NOTE="Note Record",NOTE2="Note",RFN="Permanent Record No.",FAMC="Parents Family",FAMS="Spouse Family",RESN="Restriction Notice",SEX="Sex",SOUR="Source (citation)",SOUR2="Source Note",SUBM="Submitter",})
	doLoadDefinedTags("FAM", {RIN="Automated Record Id",CHIL="Child",NCHI="Child Count",REFN="Custom Id",HUSB="Husband",CHAN="Last Change Notes",SLGS="LDS Spouse Sealing",OBJE="Multimedia Object",OBJE2="Multimedia Object (local)",_STAT="Marriage Status",NOTE="Note Record",NOTE2="Note",SOUR="Source (citation)",SOUR2="Source Note",SUBM="Submitter",WIFE="Wife",})
	doLoadDefinedTags("NOTE",{RIN="Automated Record Id",TEXT="Text",REFN="Custom Id",CHAN="Last Change Notes",SOUR="Source (citation)",SOUR2="Source Note",})
	doLoadDefinedTags("SOUR",{RIN="Automated Record Id",AUTH="Author",REFN="Custom Id",DATA="Data",CHAN="Last Change Notes",NOTE="Note Record",NOTE2="Note",PUBL="Publication Info",OBJE="Multimedia Object",OBJE2="Multimedia Object (local)",REPO="Repository",ABBR="Short Title",TEXT="Text From Source",TITL="Title",_TYPE="Type",})
	doLoadDefinedTags("REPO",{RIN="Automated Record Id",ADDR="Address",REFN="Custom Id",_EMAIL="Email",CHAN="Last Change Notes",NAME="Name",NOTE="Note Record",NOTE2="Note",PHON="Phone Number",_WEB="Web Site",})
	doLoadDefinedTags("SUBM",{RIN="Automated Record Id",ADDR="Address",_EMAIL="Email",NAME="Name",LANG="Language",CHAN="Last Change Notes",OBJE="Multimedia Object",OBJE2="Multimedia Object (local)",PHON="Phone Number",RFN="Permanent Record No.",_WEB="Web Site",})
	doLoadDefinedTags("SUBN",{RIN="Automated Record Id",ANCE="Ancestor Generations",DESC="Descendant Generations",FAMF="Family File Name",CHAN="Last Change Notes",ORDI="Ordinance Process",SUBM="Submitter",TEMP="Temple Code",})
	doLoadDefinedTags("OBJE",{RIN="Automated Record Id",BLOB="Bulk Object",REFN="Custom Id",_DATE="Date",_FILE="File",FORM="Format",_KEYS="Keywords",CHAN="Last Change Notes",_NOTE="Note",NOTE="Note Record",NOTE2="Link/Note",TITL="Title",})		-- OBJE="Multimedia Link" associated only with BLOB continuation
	doLoadDefinedTags("HEAD",{CHAR="Character Set",COPR="Copyright",DATE="Transmission Date",DEST="Receiving System",FILE="Filename",GEDC="GEDCOM",LANG="Language",NOTE2="File Description",PLAC="Place Format",SOUR2="System Id",SUBM="Submitter",SUBN="Submission",_UID="User Id",})

	-- Load any undefined Custom Fact or Uncategorised Data Field (UDF) into dummy Tag Sets
	doLoadUndefinedTags()

end -- function LoadFactsAndTags

-- Write Line to Log File --
function WriteLogFile(strLine)
	if StrLogNeed == "ON" then										-- Log file enabled
		LogFileHandle = OpenFile(StrLogFile,"a")
		if LblLogFile.title ~= StrLogFile then						-- Log file has just been created
			LblLogFile.title = StrLogFile							-- Report log file name in Main GUI
			LogFileHandle:write("Folder\t"..StrPluginPath.."\n")	-- Insert folder & name details into log file 
			LogFileHandle:write("Logfile\t"..string.gsub(StrLogFile, "^"..StrPluginPath.."\\", "").."\n\n")
		end
		LogFileHandle:write(strLine)									-- Write data line to log file
		LogFileHandle:close()
	end
end -- function WriteLogFile

-- Update Count Status --
function UpdateCountStatus(flgLogWrite)
	local strCounts = "Counts\t"	-- Counts log report
	local strTotals = "Totals\t"	-- Totals log report
	local strFormat = ""				-- Formatted data

	local function strCountFormat(intCount,strFormat)
		if strFormat == "Warnings." and intCount == 1 then strFormat = "Warning.  " end
		strFormat = string.format("%4d ",intCount)..strFormat
		return strFormat
	end -- local function strCountFormat

	if flgLogWrite and IntHandledData == 0 then
		-- Report no Tag Data found
		strFormat = "No '"..StrOldData.."' Data Found."
		LblCoSkipped.visible = "NO"
		LblCoDeleted.visible = "NO"
		LblCoChanged.visible = "NO"
		LblCoWarning.visible = "NO"
		LblCoStatus.title = strFormat
		LblCoStatus.visible = "YES"
		iup.RefreshChildren(HboxCounts)
		strCounts = strCounts..strFormat.."\n"
	else
		-- Otherwise report Data Counts
		LblCoStatus.visible = "NO"
		strFormat = strCountFormat(IntSkippedData,"Skipped.")		LblCoSkipped.title = strFormat		strCounts = strCounts..strFormat.."\t"
		strFormat = strCountFormat(IntDeletedData,"Deleted.")		LblCoDeleted.title = strFormat		strCounts = strCounts..strFormat.."\t"
		strFormat = strCountFormat(IntChangedData,"Changed.")		LblCoChanged.title = strFormat		strCounts = strCounts..strFormat.."\t"
		strFormat = strCountFormat(IntWarningData,"Warnings.")		LblCoWarning.title = strFormat		strCounts = strCounts..strFormat.."\n"
		LblCoSkipped.visible = "YES"
		LblCoDeleted.visible = "YES"
		LblCoChanged.visible = "YES"
		LblCoWarning.visible = "YES"
	end
	-- Report Total Counts
	strFormat = strCountFormat(IntSkippedTotal,"Skipped.")			LblToSkipped.title = strFormat		strTotals = strTotals..strFormat.."\t"
	strFormat = strCountFormat(IntDeletedTotal,"Deleted.")			LblToDeleted.title = strFormat		strTotals = strTotals..strFormat.."\t"
	strFormat = strCountFormat(IntChangedTotal,"Changed.")			LblToChanged.title = strFormat		strTotals = strTotals..strFormat.."\t"
	strFormat = strCountFormat(IntWarningTotal,"Warnings.")		LblToWarning.title = strFormat		strTotals = strTotals..strFormat.."\n"

	if flgLogWrite then
		WriteLogFile(strCounts)
	--	WriteLogFile(strTotals)
		WriteLogFile("\n")
	end

end -- function UpdateCountStatus

-- Get Display of Record Name --
function StrDisplayName(ptrName)
	return fhGetDisplayText(ptrName).." ["..fhGetRecordId(ptrName).."]"
end -- function StrDisplayName

-- Get Display of Record Data --
function StrDisplayData(ptrData,strData)
	return fhGetTag(ptrData)..": "..fhGetDisplayText(ptrData)
end -- function StrDisplayData

-- Global tables for Query Result Set Columns
TblPtrName = {}
TblOldItem = {}
TblOldData = {}
TblPerform = {}
TblNewItem = {}
TblPtrData = {}

-- Write Tag Change to Log File and Increment Counts --
function WriteDataChange(ptrName,ptrOld,ptrNew,strNew)
	local strLine
	strLine = "Name\t'"..TblDictionary[fhGetTag(ptrName)]["%"]..": "..StrDisplayName(ptrName).."'\n"
	strLine = strLine.."Data\t'"..StrDisplayData(ptrOld,StrOldData)

	-- Create Query Result Set Columns
	local intHandledTotal = IntHandledTotal + 1
	TblPtrName[intHandledTotal] = ptrName:Clone()
	TblOldItem[intHandledTotal] = StrOldData
	TblOldData[intHandledTotal] = StrDisplayData(ptrOld,StrOldData)
	TblPerform[intHandledTotal] = "unknown"
	TblNewItem[intHandledTotal] = ""
	TblPtrData[intHandledTotal] = ""

	if strNew == StrDeleteTag then
		IntDeletedData = IntDeletedData + 1
		IntDeletedTotal = IntDeletedTotal + 1
		strLine = strLine.."'  deleted.\n"
		TblPerform[intHandledTotal] = "deleted"
	elseif strNew == StrSkipTag then
		IntSkippedData = IntSkippedData + 1
		IntSkippedTotal = IntSkippedTotal + 1
		strLine = strLine.."'  skipped.\n"
		TblPerform[intHandledTotal] = "skipped"
		TblPtrData[intHandledTotal] = ptrOld:Clone()
	else
		IntChangedData = IntChangedData + 1
		IntChangedTotal = IntChangedTotal + 1
		strLine = strLine.."'  became  '"..StrDisplayData(ptrNew,StrNewData).."'\n"
		TblPerform[intHandledTotal] = "changed"
		TblNewItem[intHandledTotal] = StrNewData
		TblPtrData[intHandledTotal] = ptrNew:Clone()
	end
	IntHandledTotal = IntSkippedTotal + IntDeletedTotal + IntChangedTotal
	WriteLogFile(strLine)
end -- function WriteDataChange

-- Translate NOTE/OBJE/SOUR link @@N99@@ or @O99@ or @@S99@@ into a Pointer and Tag --
function PtrStrTranslateLink(strLink)
	local ptrLink = fhNewItemPtr()									-- return Null pointer if no link found
	local strTag  = nil
	if string.sub(strLink,1,1) == "@" and string.sub(strLink,-1) == "@" then
		strLink = string.gsub(strLink,"@","")						-- Starts & ends with @ so looks like a link that needs every @ removed
		local tblTag = { N="NOTE", O="OBJE", S="SOUR" }
		strTag = tblTag[string.sub(strLink,1,1)]					-- Check and convert initial letter N or O or S to Tag
		if strTag ~= nil then
			strLink = string.sub(strLink,2)							-- Remove initial letter to leave number ID
			ptrLink = fhNewItemPtr()
			ptrLink:MoveToRecordById(strTag,tonumber(strLink))	-- Obtain link to record using number ID
		end
	end
	return ptrLink,strTag
end -- function PtrStrTranslateLink

-- Edit the Data Details for Source Tag and Target Tag --
function DoEditDataDetails(ptrRecord,ptrOld,strNew)

	local ptrNew = fhNewItemPtr() 
	local tblLog = {}	-- Log of warnings for SOURce Notes
	local intLog = 0	-- Log count for warnings
	local tblTag = {}	-- Tag data ref hierarchy
	local intTag = 1	-- Tag level for hierarchy
	tblTag[intTag] = fhGetTag(ptrRecord)	-- "INDI","FAM","NOTE","SOUR",etc

	-- Compose Current Data Reference --
	local function strDataReference(strTag)
		local strDataRef = "%"
		for intItem, strName in ipairs(tblTag) do
			strDataRef = strDataRef..strName.."."
		end
		strDataRef = strDataRef..strTag.."%"
		return strDataRef
	end -- local function strDataReference

	-- Log and Report Warning Message --
	local function doReportWarning(strTag,strVal,strWarn,intHelp)
		-- Compose new Data Reference & Value & Warning message
		strWarn = strDataReference(strTag).." "..strVal.." ~ "..strWarn
		intLog = intLog + 1
		tblLog[intLog] = strWarn
		IntWarningData = IntWarningData + 1
		IntWarningTotal = IntWarningTotal + 1
		UpdateCountStatus()
		if StrWarning == "ON" then
			GUI_WarnDialogue(StrDisplayName(ptrRecord),StrDisplayData(ptrOld,StrOldData),strWarn,intHelp)
		end
	end -- local function doReportWarning

	-- Copy All Children Items --
	local function doCopyChildrenItems(ptrOld,ptrNew)

		-- Copy All Child Branch Items --
		local function doCopyChildBranch(ptrOrigin,ptrTarget)
			local strTag = fhGetTag(ptrOrigin)
			local strVal = fhGetValueAsText(ptrOrigin)
		--	local lnkVal = fhGetValueAsLink(ptrOrigin)				-- Diagnostic
		--	local iValue = fhGetValueAsInteger(ptrOrigin)			-- Diagnostic
		--	local dtDate = fhGetValueAsDate(ptrOrigin)				-- Diagnostic
		--	local strTxt = fhGetItemText(ptrOrigin,strTag)			-- Diagnostic
		--	local strType = fhGetValueType(ptrOrigin)					-- Diagnostic
		--	local strClas = fhGetDataClass(ptrOrigin)					-- Diagnostic
			local ptrNew = fhNewItemPtr()

			local function doConvertUDF_Link()
				local ptrLink,strLink = PtrStrTranslateLink(strVal)		-- Convert UDF SOUR/OBJE/NOTE Link to Pointer & Tag
				if ptrLink:IsNotNull() then
					ptrNew = fhCreateItem(strLink,ptrTarget)
					if ptrNew:IsNull() then
						doReportWarning(strLink,strVal,"Invalid Tag",IntHelpCheck)
					else
						if not fhSetValueAsLink(ptrNew,ptrLink) then		-- Set Link Pointer as new Tag value
							doReportWarning(strLink,strVal,"Link Pointer value not accepted",IntHelpCheck)
						end
						doCopyChildrenItems(ptrOrigin,ptrNew)
					end
					return nil
				end
				strTag = strTag.."2"											-- Convert UDF SOUR/OBJE/NOTE to text Tag  
				return strTag
			end -- local function doConvertUDF_Link

			local function doConvertUDF_Date()
				ptrNew = fhCreateItem(strTag,ptrTarget)
				if ptrNew:IsNull() then
					doReportWarning(strTag,strVal,"Invalid Tag",IntHelpCheck)
				else
					local dtDate = fhNewDate(1999)							-- Convert Date string to Date Object
					if not dtDate:SetValueAsText(strVal,false) then
						doReportWarning(strTag,strVal,"Unrecognised 'Date' value, treated as 'Date Phrase'",IntHelpNoted)
						if not dtDate:SetValueAsText(strVal,true) then
							doReportWarning(strTag,strVal,"Unrecognised 'Date Phrase' value",IntHelpNoted)
						else
							if not fhSetValueAsDate(ptrNew,dtDate) then	-- Set Date Object as new Tag value
								doReportWarning(strTag,strVal,"Date Object value not accepted",IntHelpCheck)
							end
						end
					else
						if not fhSetValueAsDate(ptrNew,dtDate) then		-- Set Date Object as new Tag value
							doReportWarning(strTag,strVal,"Date Object value not accepted",IntHelpCheck)
						end
					end
					doCopyChildrenItems(ptrOrigin,ptrNew)
				end
				return nil
			end -- local function doConvertUDF_Date

			local function doConvertUDF_Even()
				ptrNew = fhCreateItem(strTag,ptrTarget)
				if ptrNew:IsNull() then
					doReportWarning(strTag,strVal,"Invalid Tag",IntHelpCheck)
				else
					local tblEvent = {}											-- EVENt can be EVEN, ADOP, BIRT, BAPM, CAST, etc, etc
					local strEvent = nil
					tblEvent[1] = { EVEN="Event", CAST="Social Rank", CHRA="Adult Christening", }	-- Exceptions not translated below
					tblEvent[2] = TblDictionary["INDI"]						-- All the Individual Fact tag translations
					tblEvent[3] = TblDictionary["FAM"]						-- All the Family Fact tag translations
					for i=1,3 do
						strEvent = tblEvent[i][strVal]
						if strEvent ~= nil then
							break
						end
					end
					if strEvent == nil then
						doReportWarning(strTag,strVal,"Unrecognised 'Event Type' value",IntHelpReport)
					else
						if not fhSetValueAsText(ptrNew,strEvent) then
							doReportWarning(strTag,strEvent,"Event Type text not accepted",IntHelpCheck)
						end
					end
					doCopyChildrenItems(ptrOrigin,ptrNew)
				end
				return nil
			end -- local function doConvertUDF_Even

			local function doConvertUDF_Quay()
				ptrNew = fhCreateItem(strTag,ptrTarget)
				if ptrNew:IsNull() then
					doReportWarning(strTag,strVal,"Invalid Tag",IntHelpCheck)
				else																-- QUAY Certainty can be "0" , "1" , "2" , "3"
					local tblCertainty = {"Unreliable","Questionable","Secondary evidence","Primary evidence"}
					local strCertainty = tblCertainty[tonumber(strVal)+1]
					if strCertainty == nil then
						doReportWarning(strTag,strVal,"Unrecognised 'Certainty' value",IntHelpReport)
					else
						if not fhSetValueAsText(ptrNew,strCertainty) then
							doReportWarning(strTag,strCertainty,"Certainty text not accepted",IntHelpCheck)
						end
					end
					doCopyChildrenItems(ptrOrigin,ptrNew)
				end
				return nil
			end -- local function doConvertUDF_Quay

			local function doConvertUDF_Conc_Cont()						-- CONC & CONT are always invalid
				if intTag == 2 and ( fhIsEvent(ptrTarget) or fhGetTag(ptrTarget) == "RESI" ) then
					strTag = "SOUR2"											--	If at target level 2 of Event or RESI then
					return strTag												-- Create SOUR2 Note as if Attribute value
				end
				local strValue = "\n"											-- CONTinuation on a new line
				if strTag == "CONC" then
					strValue = ""												-- CONCatenation on same line
				end
				local strValue = fhGetValueAsText(ptrTarget)..strValue..strVal
				if not fhSetValueAsText(ptrTarget,strValue) then		-- Append to existing Target value
					doReportWarning(strTag,strValue,"Value text not accepted",IntHelpCheck)
				end
				if fhGetValueAsText(ptrTarget) ~= strValue then			-- "\n" does not work for Attribute value ( nor ADDR tag !!!! )
					strValue = fhGetValueAsText(ptrTarget).."~"..strVal
					if not fhSetValueAsText(ptrTarget,strValue) then
						doReportWarning(strTag,strValue,"Value text not accepted",IntHelpCheck)
					end
				end
				return nil
			end -- local function doConvertUDF_Conc_Cont

			if fhIsUDF(ptrOrigin) then
				if strTag == "SOUR" or strTag == "OBJE" or strTag == "NOTE" then
					-- Convert UDF SOUR/OBJE/NOTE link or text
					if doConvertUDF_Link() == nil then
						return
					end
				elseif strTag == "DATE" or strTag == "_DATE" then
					-- Convert UDF DATE/_DATE string to DATE object
					if doConvertUDF_Date() == nil then
						return
					end
				elseif strTag == "EVEN" then
					-- Convert UDF EVEN string
					if doConvertUDF_Even() == nil then
						return
					end
				elseif strTag == "QUAY" then
					-- Convert UDF QUAY string
					if doConvertUDF_Quay() == nil then
						return
					end
				elseif strTag == "CONC" or strTag == "CONT" then									
					-- Convert UDF CONC or CONT tag
					if doConvertUDF_Conc_Cont() == nil then
						return
					end
				end
			end

			if strTag == "FILE" or strTag == "FORM" then					-- Target Child Tag FILE or FORM may have been auto-created by local OBJEct
				local ptrChild = fhNewItemPtr()
				ptrChild:MoveToFirstChildItem(ptrTarget)
				while ptrChild:IsNotNull() do
					if strTag == fhGetTag(ptrChild) then					-- Copy the FILE value or FORM value
						if not fhSetValue_Copy(ptrChild,ptrOrigin) then
							doReportWarning(strTag,fhGetValueAsText(ptrOrigin),"Value text not accepted",IntHelpCheck)
						end
						doCopyChildrenItems(ptrOrigin,ptrChild)
						return
					end
					ptrChild:MoveNext()
				end
			end

			-- No existing Child Tag so create new Child Tag
			if strTag == "TYPE" then											-- Transfer any TYPE Descriptor to a SOURce Note
				ptrNew = fhCreateItem("SOUR2",ptrTarget)					-- Because it cannot transfer to Custom Facts
				if ptrNew:IsNull() then
					doReportWarning("SOUR2",strVal,"Invalid Tag",IntHelpCheck)
				else
					if not fhSetValueAsText(ptrNew,"TYPE Descriptor: "..strVal) then
						doReportWarning("SOUR2","TYPE Descriptor: "..strVal,"Value text not accepted",IntHelpCheck)
					end
				end
			else
				ptrNew = fhCreateItem(strTag,ptrTarget)
				if ptrNew:IsNull() then
					doReportWarning(strTag,strVal,"Invalid Tag",IntHelpCheck)
				else
					-- DATA & OBJE2 tags within UDF have null string text value that causes fhSetValue_Copy to fail 
					if not ( fhGetValueType(ptrOrigin) == "text" and strVal == "" ) then
						local strValue = fhGetValueAsText(ptrOrigin)
						if not fhSetValue_Copy(ptrNew,ptrOrigin) then	-- Otherwise just copy the Tag and Value
							doReportWarning(strTag,fhGetValueAsText(ptrOrigin),"Value not accepted",IntHelpCheck)
						end
					end
				end
			end
			doCopyChildrenItems(ptrOrigin,ptrNew)

		end -- local function doCopyChildBranch

		intTag = intTag + 1														-- Compile table of New Tag Data Reference hierarchy
		tblTag[intTag] = fhGetTag(ptrNew)

		local ptrOrigin = fhNewItemPtr()
		ptrOrigin = ptrOld:Clone()
		ptrOrigin:MoveToFirstChildItem(ptrOrigin)
		while ptrOrigin:IsNotNull() do
			doCopyChildBranch(ptrOrigin,ptrNew)								-- Copy any Child Branch data
			ptrOrigin:MoveNext()
		end

		tblTag[intTag] = nil
		intTag = intTag - 1

	end -- local function doCopyChildrenItems

	-- Delete Item and Report if Fails --
	local function doDeleteItem(ptrTag,strVal,strFunc)
		local strTag = fhGetTag(ptrTag)
		if not fhDeleteItem(ptrTag) then
			doReportWarning(strTag,strVal,"fhDeleteItem failed in "..strFunc,IntHelpReport)
		end
	end -- local function doDeleteItem

	-- Copy the Tag Value --
	local function flgCopyTagValue()
		local strTag = fhGetTag(ptrOld)
		local strVal = fhGetValueAsText(ptrOld)
		local ptrLnk = fhGetValueAsLink(ptrOld)
		local intVal = fhGetValueAsInteger(ptrOld)
		local dtDate = fhGetValueAsDate(ptrOld)
		local strOldText = fhGetItemText(ptrOld,strTag)
		local strOldType = fhGetValueType(ptrOld)							-- Type strings "", "text", "link", "integer", "date"
		local strOldClas = fhGetDataClass(ptrOld)
		local strNewType = fhGetValueType(ptrNew)
		local strNewClas = fhGetDataClass(ptrNew)
		-- Omit all Event/RESIdence Facts where strVal == strOldType == ""
		if strOldType ~= "" then

			if strOldType == "text" then										-- Attribute Fact or UDF Tag
				if strVal == "" then
					return true
				end
				local strLnk														-- Try to convert old Tag text Value into a Link Pointer
				ptrLnk,strLnk = PtrStrTranslateLink(strVal)
				if ptrLnk:IsNotNull() then
					strOldType = "link"
					strTag = strLnk
				else
					intVal = tonumber(strVal)									-- Try to convert old Tag text Value into an Integer
					if intVal ~= nil
					and strNewType == "integer" then
						strOldType = "integer"
					elseif dtDate:SetValueAsText(strVal)					-- Try to convert old Tag text Value into a Date Object
					and strNewType == "date" then
						strOldType = "date"
					end
				end
			end

			if strOldType == "link" and ( fhIsAttribute(ptrNew) or fhIsEvent(ptrNew) ) then
				local ptrNew = fhCreateItem(strTag,ptrNew)				-- Create a Fact child SOUR/OBJE/NOTE Record link
				if ptrNew:IsNull() then
					doReportWarning(strTag,strVal,"Invalid Tag ~ Tag Skipped",IntHelpCheck)
					return false
				else
					if not fhSetValueAsLink(ptrNew,ptrLnk) then			-- Set the Link Pointer as its Value
						doReportWarning(strTag,strVal,"Invalid Link ~ Tag Skipped",IntHelpCheck)
						doDeleteItem(ptrNew,strVal,"flgCopyTagValue")
						return false
					end
				end
			elseif 	strNewType == "text" then								-- Set new Tag value to old Tag value converted to Text
				if not fhSetValueAsText(ptrNew,strOldText) then
					doReportWarning(strTag,strOldText,"Invalid Text for "..strNew.." ~ Tag Skipped",IntHelpCheck)
					return false
				end
			elseif 	strNewType == "" then									-- New Tag is an Event, or RESIdence, so create SOURce Note for Value
				local ptrVal = fhNewItemPtr()
				ptrVal = fhCreateItem("SOUR2",ptrNew)
				if ptrVal:IsNull() then
					doReportWarning(strTag,strOldText,"Invalid Tag ~ Tag Skipped",IntHelpCheck)
					return false
				else																-- Set new SOURce Note value to old Tag name and value converted to Text
					if not fhSetValueAsText(ptrVal,StrOldData.."="..strOldText) then
						doReportWarning(strTag,strOldText,"Invalid Text ~ Tag Skipped",IntHelpCheck)
						doDeleteItem(ptrVal,strOldText,"flgCopyTagValue")
						return false
					end
				end
			elseif 	strNewType == strOldType then
				if		strNewType == "link" then								-- Set the Link Pointer as current Tag value
					if not fhSetValueAsLink(ptrNew,ptrLnk) then
						doReportWarning(strTag,strOldText,"Invalid Link for "..strNew.." ~ Tag Skipped",IntHelpCheck)
						return false
					end
				elseif strNewType == "integer" then							-- Set the Integer Value as current Tag value
					if not fhSetValueAsInteger(ptrNew,intVal) then
						doReportWarning(strTag,strOldText,"Invalid Integer for "..strNew.." ~ Tag Skipped",IntHelpCheck)
						return false
					end
				elseif strNewType == "date" then							-- Set the Date Object as current Tag value
					if not fhSetValueAsDate(ptrNew,dtDate) then
						doReportWarning(strTag,strOldText,"Invalid Date for "..strNew.." ~ Tag Skipped",IntHelpCheck)
						return false
					end
				else
					doReportWarning(strTag,strOldText,"Invalid Tag Type: "..strNewType.." ~ Tag Skipped",IntHelpReport)
					return false
				end
			else
				if not fhSetValue_Copy(ptrNew,ptrOld) then				-- Expected to fail
					doReportWarning(strTag,strVal,"Invalid value for "..strNew.." ~ Tag Skipped",IntHelpCheck)
					return false
				end
			end
		end
		return true
	end -- local function flgCopyTagValue

	if strNew == StrDeleteTag then												-- Delete the old Tag from Record
		WriteDataChange(ptrRecord,ptrOld,strNew,StrDeleteTag)
		doDeleteItem(ptrOld,StrDeleteTag,"DoEditDataDetails")
		return
	end

	ptrNew = fhCreateItem(strNew,ptrRecord)									-- Ensure the New Tag has been created
	if ptrNew:IsNull() then
		doReportWarning(strNew,TblDictionary[fhGetTag(ptrRecord)][strNew],"Cannot be created ~ Tag Skipped",IntHelpCheck)
	else
		if not fhMoveItemBefore(ptrNew,ptrOld) then							-- Ensure the Tag order is maintained
			doReportWarning(strNew,TblDictionary[fhGetTag(ptrRecord)][strNew],"Cannot be moved ~ Tag Skipped",IntHelpCheck)
			doDeleteItem(ptrNew,"MoveItemBefore","DoEditDataDetails")
		else
			if not flgCopyTagValue() then										-- Transfer old Tag value to new Tag value, or new SOURce Note
				doDeleteItem(ptrNew,"CopyTagValue","DoEditDataDetails")
			else
				doCopyChildrenItems(ptrOld,ptrNew)								-- Copy the Child Tag structure

				WriteDataChange(ptrRecord,ptrOld,ptrNew,"")					-- Log the Change to file

				doDeleteItem(ptrOld,"CopyTagValue","DoEditDataDetails")	-- Delete the Old Tag from Record

				for intItem, strLog in ipairs(tblLog) do
					WriteLogFile("Warning\t"..strLog.."\n")					-- Log each Warning Message to file
					local ptrVal = fhNewItemPtr()
					ptrVal = fhCreateItem("SOUR2",ptrNew)						-- Copy each Warning into Tag SOURce Note
					if ptrVal:IsNull() then
						ptrVal = fhCreateItem("SOUR2",ptrRecord)				-- or into whole Record SOURce Note
						if ptrVal:IsNull() then
							ptrVal = fhCreateItem("NOTE2",ptrRecord)			-- or into whole Record local NOTE
							if ptrVal:IsNull() then
								doReportWarning("SOUR2/NOTE2","strLog","Warning cannot be created",IntHelpReport)
								return
							end
						end
					end
					if not fhSetValueAsText(ptrVal,strLog) then				-- Save the Warning in Source/Local Note
						doReportWarning("SOUR2/NOTE2",strLog,"Warning cannot be saved",IntHelpReport)
					end
				end

				return

			end
		end
	end

	WriteDataChange(ptrRecord,ptrOld,ptrNew,StrSkipTag)						-- Log the Skip to file

	for intItem, strLog in ipairs(tblLog) do
		WriteLogFile("Warning\t"..strLog.."\n")								-- Log each Warning Message to file
	end

end -- function DoEditDataDetails

-- Check if Filters Match the Selected Tag --
function FlgFiltersMatch(ptrTag,tblFilter)
	local flgFilter -- Determines whether Plain=true or Pattern=false filter matching
	if StrPattern == "OFF" then flgFilter = true else flgFilter = false end

	-- Check if Filter Value matches Record Value and fail if no match
	if string.find(fhGetItemText(ptrTag,fhGetTag(ptrTag)),tblFilter[IntFilterValue],1,flgFilter) == nil then return false end

	local strMatchDate  = tblFilter[IntFilterDate]
	local flgMatchDate  -- Determines if Filter Date matches a DATE field
	local strMatchPlace = tblFilter[IntFilterPlace]
	local flgMatchPlace -- Determines if Filter Place matches a PLAC field
	-- An empty Filter always matches, else if no field exists then it never matches
	if strMatchDate  == "" then flgMatchDate  = true else flgMatchDate  = false end
	if strMatchPlace == "" then flgMatchPlace = true else flgMatchPlace = false end

	if not ( flgMatchDate and flgMatchPlace ) then
		-- Search the Child Tags for other Filters
		local ptrChild = fhNewItemPtr()
		ptrChild:MoveToFirstChildItem(ptrTag)
		while ptrChild:IsNotNull() do
			if fhGetTag(ptrChild) == "DATE" and not flgMatchDate then
				-- Check if Filter Date matches DATE value and fail if no match
				if string.find(fhGetItemText(ptrChild,"DATE"),strMatchDate,1,flgFilter) == nil then return false end
				flgMatchDate = true
			end
			if fhGetTag(ptrChild) == "PLAC" and not flgMatchPlace then
				-- Check if Filter Place matches PLACe value and fail if no match
				if string.find(fhGetValueAsText(ptrChild),strMatchPlace,1,flgFilter) == nil then return false end
				flgMatchPlace = true
			end
			ptrChild:MoveNext()
		end
		if not ( flgMatchDate and flgMatchPlace ) then
			-- DATE or PLAC not matched at Child level so check Grandchild level
			ptrChild:MoveToFirstChildItem(ptrTag)
			while ptrChild:IsNotNull() do
				local ptrGrandChild = fhNewItemPtr()
				ptrGrandChild:MoveToFirstChildItem(ptrChild)
				while ptrGrandChild:IsNotNull() do
					if fhGetTag(ptrGrandChild) == "DATE" and not flgMatchDate then
						-- Check if Filter Date matches DATE value and fail if no match
						if string.find(fhGetItemText(ptrGrandChild,"DATE"),strMatchDate,1,flgFilter) == nil then return false end
						flgMatchDate = true
					end
					if fhGetTag(ptrGrandChild) == "PLAC" and not flgMatchPlace then
						-- Check if Filter Place matches PLACe value and fail if no match
						if string.find(fhGetValueAsText(ptrGrandChild),strMatchPlace,1,flgFilter) == nil then return false end
						flgMatchPlace = true
					end
					ptrGrandChild:MoveNext()
				end
				ptrChild:MoveNext()
			end
		end
	end
	return flgMatchDate and flgMatchPlace
end -- function FlgFiltersMatch

-- Change Selected Tag --
function DoChangeData(strRecTag,strOldSet,strNewSet,strOldTag,strNewTag,tblFilter)
	-- strRecTag	= "INDI","FAM","SOUR",etc record type of Tag to change/delete
	-- strOldSet	= Source Tag Set of Source Tag to change from or delete
	-- strNewSet	= Target Tag Set of Target Tag to change into
	-- strOldTag	= Source Tag Name to change from, or to delete 
	-- strNewTag	= Target Tag Name to change into, or StrDeleteTag to delete Source
	-- tblFilter	= List of Filter Value, Date, Place text strings

	-- Translate Tag --
	local function strTranslateTag(strTag)
		local strData
		if strTag == StrDeleteTag then return strTag end
		strData = TblDictionary[strRecTag][strTag]
		strData = string.gsub(strData,"_ATTR%-","")
		strData = string.gsub(strData,"EVEN%-","")
		return strData
	end -- local function strTranslateTag

	if IntHandledData > 0 then
		return									-- Inhibit re-entry while still handling Tags
	end

	local flgConvert = true				-- Enable the Tag change/delete operations
	local flgConfirm = true				-- Enable the GUI Data confirmation dialogue
	if StrConfirm == "OFF" then
		flgConfirm = false
	end

	StrOldData = strTranslateTag(strOldTag)
	StrNewData = strTranslateTag(strNewTag)

	local ptrOldTag = fhNewItemPtr()	-- Pointer to source Tag
	local ptrGotTag = fhNewItemPtr()	-- Pointer to current Tag
	local ptrNewTag = fhNewItemPtr()	-- Pointer to target Tag
	local ptrRecord = fhNewItemPtr()	-- Pointer to current Record

	ptrRecord:MoveToFirstRecord(strRecTag)

	local intTagCount = 0					-- Count of current scanned Tags
	IntSkippedData = 0						-- Count of current skipped Tags
	IntDeletedData = 0						-- Count of current deleted Tags
	IntChangedData = 0						-- Count of current changed Tags
	IntWarningData = 0						-- Count of current warning Messages

	while ptrRecord:IsNotNull() do

		ptrOldTag:MoveTo(ptrRecord,"~."..strOldTag)

		while ptrOldTag:IsNotNull() do

			--	Get next Tag before got Tag is altered
			ptrGotTag = ptrOldTag:Clone()
			ptrOldTag:MoveNext("SAME_TAG")

			if FlgFiltersMatch(ptrGotTag,tblFilter) then
				if flgConfirm then
					UpdateCountStatus()
					flgConvert,flgConfirm = GUI_DataDialogue(ptrRecord,ptrGotTag,strNewTag)
					if flgConfirm == nil then
						return -- to abort changes
					end
				else
					if IntHandledData % 17 == 0 then
						UpdateCountStatus()		-- Show tumbling digits progressing every 17th Tag 
					end
				end
				if flgConvert then
					-- Change/Delete the old Tag in the Record
					DoEditDataDetails(ptrRecord,ptrGotTag,strNewTag)
				else
					-- Skip the old Tag in the Record
					WriteDataChange(ptrRecord,ptrGotTag,ptrNewTag,StrSkipTag)
				end
			end -- if FlgFiltersMatch
			IntHandledData = IntSkippedData + IntDeletedData + IntChangedData
			intTagCount = intTagCount + 1
		end -- while not ptrOldTag:IsNull()

		--	Move to next Individual or Family record
		ptrRecord:MoveNext("SAME_TAG")

	end -- while not ptrRecord:IsNull()

	if tblFilter[IntFilterValue]..tblFilter[IntFilterDate]..tblFilter[IntFilterPlace] ~= "" then
		WriteLogFile("Filters\tValue="..tblFilter[IntFilterValue].."    Date="..tblFilter[IntFilterDate].."    Place="..tblFilter[IntFilterPlace].."\n")
	end
	UpdateCountStatus(FlgToLogFile)

	if IntChangedData > 0 then
		-- Insert the New Tag into the Old Tag index and update dropdown lists
		DoInsertTagIndex(strRecTag,strNewSet,strNewTag,StrModeOld)
		StrPopulateDropdownLists()
	end
	if IntHandledData == intTagCount and IntSkippedData == 0 then
		-- Remove the Old Tag from the Old Tag index and update dropdown lists
		DoRemoveTagIndex(strRecTag,strOldSet,strOldTag)
		StrPopulateDropdownLists()
	end

	IntHandledData = 0			-- Signal that all Tags have been handled
end -- function DoChangeData

-- Populate the Record Type dropdown list --
function StrPopulateRecordDropList()
	-- Preserve currently selected Record Type
	local strOldRec = iup.GetAttribute(LstRecords,tostring(LstRecords.value))
	local intOldRec = 0
	LstRecords.removeitem = nil
	for intRecTag,strRecTag in ipairs(TblRecordTag) do
	  if strRecTag ~= "INDI" and strRecTag ~= "FAM" then
		for intItem,strSet in ipairs(TblSetNameIndex[strRecTag]) do
			if FlgTableHasData(TblOldTagIndex[strRecTag][strSet]) then
				local strNewRec = TblRecordName[intRecTag]
				LstRecords.appenditem = strNewRec	-- Add the Record Type because it has associated Set names with associated Tags
				intOldRec = intOldRec + 1
				if strNewRec == strOldRec then
					LstRecords.value = intOldRec		-- Select this Record Type if it was selected before
				end											-- Works because TblRecordTag determines order in LstRecords which is not sorted
				break
			end
		end
	  end
	end
	if LstRecords.value == "0" then LstRecords.value = 1 end
	return TblDictionary[iup.GetAttribute(LstRecords,tostring(LstRecords.value))]
end -- function StrPopulateRecordDropList

-- Populate any pair of Tag Set dropdown lists --
function StrStrPopulateSetDropList(strRecTag,lstOldDrop,lstNewDrop)
	-- Preserve currently selected Set Names
	local strOldSet = iup.GetAttribute(lstOldDrop,tostring(lstOldDrop.value))
	local strNewSet = iup.GetAttribute(lstNewDrop,tostring(lstNewDrop.value))
	local intOldSet = 0
	local intNewSet = 0
	lstOldDrop.removeitem = nil
	lstNewDrop.removeitem = nil
	for intItem,strSet in ipairs(TblSetNameIndex[strRecTag]) do
		if FlgTableHasData(TblOldTagIndex[strRecTag][strSet]) then
			lstOldDrop.appenditem = strSet			-- Add the Set because it has associated Tags
			intOldSet = intOldSet + 1
			if strSet == strOldSet then
				lstOldDrop.value = intOldSet			-- Select this Set if it was selected before
			end												-- Works because TblSetNameIndex determines order in lstOldDrop which is not sorted
		end
		if	FlgTableHasData(TblNewTagIndex[strRecTag][strSet]) and strSet ~= StrUDFTagsSet then
			lstNewDrop.appenditem = strSet			-- Add the Set because it has associated Tags, unless it is the UDF Tags Set 
			intNewSet = intNewSet + 1
			if strSet == strNewSet then
				lstNewDrop.value = intNewSet			-- Select this Set if it was selected before
			end												-- Works because TblSetNameIndex determines order in lstNewDrop which is not sorted
		end
	end
	if lstOldDrop.value == "0" then lstOldDrop.value = 1 end
	if lstNewDrop.value == "0" then lstNewDrop.value = 1 end
	return iup.GetAttribute(lstOldDrop,tostring(lstOldDrop.value)),iup.GetAttribute(lstNewDrop,tostring(lstNewDrop.value))
end -- function StrStrPopulateSetDropList

-- Populate any Tag Name dropdown list --
function DoPopulateNameDropList(strRecTag,tblTagIndex,lstDrop)
	-- Preserve currently selected Tag Name
	local strOldTag = iup.GetAttribute(lstDrop,tostring(lstDrop.value))
	local intOldTag = 0
	lstDrop.removeitem = nil
	for intTag,strTag in ipairs(tblTagIndex) do
		local strNewTag = TblDictionary[strRecTag][strTag]
		lstDrop.appenditem = strNewTag
		intOldTag = intOldTag + 1
	end
	for intOldTag = 1, intOldTag do
		if strOldTag == iup.GetAttribute(lstDrop,tostring(intOldTag)) then
			lstDrop.value = intOldTag					-- Select this Tag Name if it was selected before
			break											-- Need this technique because tblTagIndex is not same order as lstDrop sorted order
		end
	end
	-- Leave no Tag Name selected if nothing has matched
end -- function DoPopulateNameDropList

-- Populate the Dropdown lists on current Tab --
function StrPopulateDropdownLists()
	local strRecTag, strOldSet, strNewSet
	if IntChosenTab == 0 then							-- Individual Records Tab
		strRecTag = "INDI"
		-- Add each Fact Set name to Individual dropdown list
		strOldSet, strNewSet = StrStrPopulateSetDropList(strRecTag,LstIndOldSet,LstIndNewSet)
		-- Add each Fact Name to Individual dropdown lists
		DoPopulateNameDropList(strRecTag,TblOldTagIndex[strRecTag][strOldSet],LstIndOldTag)
		DoPopulateNameDropList(strRecTag,TblNewTagIndex[strRecTag][strNewSet],LstIndNewTag)
	elseif IntChosenTab == 1 then					-- Family Records Tab
		strRecTag = "FAM"
		-- Add each Fact Set name to Family dropdown list
		strOldSet, strNewSet = StrStrPopulateSetDropList(strRecTag,LstFamOldSet,LstFamNewSet)
		-- Add each Fact Name to Family dropdown lists
		DoPopulateNameDropList(strRecTag,TblOldTagIndex[strRecTag][strOldSet],LstFamOldTag)
		DoPopulateNameDropList(strRecTag,TblNewTagIndex[strRecTag][strNewSet],LstFamNewTag)
	elseif IntChosenTab == 2 then					-- Other Records Tab
		strRecTag = StrPopulateRecordDropList()
		-- Add each Tag Set name to Record dropdown lists
		strOldSet, strNewSet = StrStrPopulateSetDropList(strRecTag,LstRecOldSet,LstRecNewSet)
		-- Add each Tag Name to Record dropdown lists
		DoPopulateNameDropList(strRecTag,TblOldTagIndex[strRecTag][strOldSet],LstRecOldTag)
		DoPopulateNameDropList(strRecTag,TblNewTagIndex[strRecTag][strNewSet],LstRecNewTag)
	end
	return strRecTag
end -- function StrPopulateDropdownLists

--[[
-- Set the GUI Font Face & Style --
function AssignFontSet(intFontSet)
	IntFontSet = intFontSet
	-- Note: Pixel sizes -21 = -20 & -17 = -16 & -14 = -13 and pixel sizes -22, -18 & -13 have no point size equivalent.
	local tblFontSet = { }
	tblFontSet[IntFontPlain]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..",      -16", }
	tblFontSet[IntFontBold]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..", Bold -15", }
	tblFontSet[IntArialPlain]		=	{ Head="Arial,         Bold -16",	Body="Arial,              -16", }
	tblFontSet[IntArialBold]		=	{ Head="Arial,         Bold -16",	Body="Arial,         Bold -15", }
	tblFontSet[IntTahomaPlain]	=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,             -16", }
	tblFontSet[IntTahomaBold]		=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,        Bold -14", }
	StrFontHead = tblFontSet[IntFontSet]["Head"] -- Font for all GUI dialog header text
	StrFontBody = tblFontSet[IntFontSet]["Body"] -- Font for all GUI dialog body text
end -- function AssignFontSet

-- GUI Font Face & Style Dialogue --
function GUI_FontDialogue()

	local strFontPlain			= StrFontFace..",      -16"
	local strFontBold			= StrFontFace..", Bold -15"
	local strArialPlain			= "Arial,              -16"
	local strArialBold			= "Arial,         Bold -15"
	local strTahomaPlain		= "Tahoma,             -16"
	local strTahomaBold			= "Tahoma,        Bold -14"
	local strFontPlainTitle	= StrFontFace.." Plain"
	local strFontBoldTitle		= StrFontFace.." Bold"
	local strArialPlainTitle	= "Arial Plain"
	local strArialBoldTitle	= "Arial Bold"
	local strTahomaPlainTitle	= "Tahoma Plain"
	local strTahomaBoldTitle	= "Tahoma Bold"
	local strAnswer				= "Change"

	-- Create the labels and buttons
	local	lblHeadName		= iup.label{ expand="YES", fgcolor=StrBlue,	font=StrFontBody,	title=" Name :"				, tip="Names of the available Fonts", }
	local	lblHeadPlain		= iup.label{ expand="YES", fgcolor=StrBlue,	font=strFontPlain,	title=" Plain :"			, tip="Plain versions of the Fonts", }
	local	lblHeadBold		= iup.label{ expand="YES", fgcolor=StrBlue,	font=strFontBold,	title=" Bold :"				, tip="Bold versions of the Fonts", }
	local	lblFontName		= iup.label{ expand="YES", fgcolor=StrBlue,	font=strFontPlain,	title="Font "..StrFontFace, tip="Default Windows fontface", }
	local	btnFontPlain		= iup.button{expand="YES", fgcolor=StrGreen,	font=strFontPlain,	title=strFontPlainTitle	, tip="Choose "..strFontPlainTitle.." style"		, action=function() AssignFontSet(IntFontPlain)		return iup.CLOSE end, }
	local	btnFontBold		= iup.button{expand="YES", fgcolor=StrGreen,	font=strFontBold,	title=strFontBoldTitle		, tip="Choose "..strFontBoldTitle.." style"		, action=function() AssignFontSet(IntFontBold)		return iup.CLOSE end, }
	local	lblArialName		= iup.label{ expand="YES", fgcolor=StrBlue,	font=strArialPlain,	title="Font Arial"			, tip="Arial alternative fontface", }
	local	btnArialPlain	= iup.button{expand="YES", fgcolor=StrGreen,	font=strArialPlain,	title=strArialPlainTitle	, tip="Choose "..strArialPlainTitle.." style"	, action=function() AssignFontSet(IntArialPlain)	return iup.CLOSE end, }
	local	btnArialBold		= iup.button{expand="YES", fgcolor=StrGreen,	font=strArialBold,	title=strArialBoldTitle	, tip="Choose "..strArialBoldTitle.." style"		, action=function() AssignFontSet(IntArialBold)		return iup.CLOSE end, }
	local	lblTahomaName	= iup.label{ expand="YES", fgcolor=StrBlue,	font=strTahomaPlain,title="Font Tahoma"		, tip="Tahoma alternative fontface", }
	local	btnTahomaPlain	= iup.button{expand="YES", fgcolor=StrGreen,	font=strTahomaPlain,title=strTahomaPlainTitle, tip="Choose "..strTahomaPlainTitle.." style"	, action=function() AssignFontSet(IntTahomaPlain)	return iup.CLOSE end, }
	local	btnTahomaBold	= iup.button{expand="YES", fgcolor=StrGreen,	font=strTahomaBold,	title=strTahomaBoldTitle	, tip="Choose "..strTahomaBoldTitle.." style"	, action=function() AssignFontSet(IntTahomaBold)	return iup.CLOSE end, }
	local	lblChoose			= iup.label{ expand="YES", fgcolor=StrBlue,	font=StrFontBody,	title="Choose your interface font style or", }
	local	btnClose			= iup.button{expand="YES", fgcolor=StrRed,	font=StrFontBody,	title="Close"				, tip="Close this Font Style window"				, action=function() strAnswer="Ignore"					return iup.CLOSE end, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogFont = iup.dialog{ title=StrPlugin.." Font Style", dialogframe="YES", startfocus=btnClose,
								iup.vbox{ alignment="ACENTER", gap="12", margin=StrBigMargin,
									iup.frame{ font=StrFontHead, fgcolor=StrBlack, active="YES", title="Font Style",
										iup.vbox{ margin=StrMinMargin,
											iup.hbox{ homogeneous="YES", lblHeadName,		lblHeadPlain,	lblHeadBold,		},
											iup.hbox{ homogeneous="YES", lblFontName,		btnFontPlain,	btnFontBold,		},
											iup.hbox{ homogeneous="YES", lblArialName,	btnArialPlain,	btnArialBold,	},
											iup.hbox{ homogeneous="YES", lblTahomaName,	btnTahomaPlain,	btnTahomaBold,	},
											iup.hbox{ lblChoose, btnClose, },
										},
									},
								},
								close_cb=function() strAnswer="Ignore" return iup.CLOSE end,
								move_cb =function(self,x,y) IntDataX=x IntDataY=y end,
							}

	-- Disable button for currently selected font
	for intFontSet, btnFontSet in pairs( { [IntFontPlain]=btnFontPlain, [IntFontBold]=btnFontBold, [IntArialPlain]=btnArialPlain, [IntArialBold]=btnArialBold, [IntTahomaPlain]=btnTahomaPlain, [IntTahomaBold]=btnTahomaBold } ) do
		if IntFontSet == intFontSet then btnFontSet.active = "NO" end
	end

	dialogFont:popup(IntDataX,IntDataY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	return strAnswer
end -- function GUI_FontDialogue
]]

-- GUI Font Face & Style Dialogue --
function GUI_FontDialogue(intFontSet)

	-- Note: Pixel sizes -21 = -20 & -17 = -16 & -14 = -13 and pixel sizes -22, -18 & -13 have no point size equivalent.
	local tblFontSet = {}			-- Lookup table for StrFontHead and StrFontBody font sets
	tblFontSet[IntFontPlain]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..",      -16", }
	tblFontSet[IntFontBold]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..", Bold -15", }
	tblFontSet[IntArialPlain]		=	{ Head="Arial,         Bold -16",	Body="Arial,              -16", }
	tblFontSet[IntArialBold]		=	{ Head="Arial,         Bold -16",	Body="Arial,         Bold -15", }
	tblFontSet[IntTahomaPlain]	=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,             -16", }
	tblFontSet[IntTahomaBold]		=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,        Bold -14", }

	-- Assign font set global variables
	local function doAssignFontSet(intFontSet)
		IntFontSet = intFontSet
		StrFontHead = tblFontSet[intFontSet]["Head"] -- Font for all GUI dialog header text
		StrFontBody = tblFontSet[intFontSet]["Body"] -- Font for all GUI dialog body text
	end -- local function doAssignFontSet

	-- If parameter exists, simply set it as current font set
	if intFontSet then doAssignFontSet(intFontSet) return end

	local strAnswer = "Change"

	local strFontPlainTitle	= StrFontFace.." Plain"
	local strFontBoldTitle		= StrFontFace.." Bold"
	local strArialPlainTitle	= "Arial Plain"
	local strArialBoldTitle	= "Arial Bold"
	local strTahomaPlainTitle	= "Tahoma Plain"
	local strTahomaBoldTitle	= "Tahoma Bold"

	-- Create each GUI label and button with title and tooltip
	local	lblHeadName		= iup.label	{ title=" Name :"				, tip="Names of the available Fonts"				, }
	local	lblHeadPlain		= iup.label	{ title=" Plain :"				, tip="Plain versions of the Fonts"					, }
	local	lblHeadBold		= iup.label	{ title=" Bold :"				, tip="Bold versions of the Fonts"					, }
	local	lblFontName		= iup.label	{ title="Font "..StrFontFace	, tip="Default Windows fontface"					, }
	local	btnFontPlain		= iup.button	{ title=strFontPlainTitle		, tip="Choose "..strFontPlainTitle.." style"		, }
	local	btnFontBold		= iup.button	{ title=strFontBoldTitle		, tip="Choose "..strFontBoldTitle.." style"		, }
	local	lblArialName		= iup.label	{ title="Font Arial"			, tip="Arial alternative fontface"					, }
	local	btnArialPlain	= iup.button	{ title=strArialPlainTitle	, tip="Choose "..strArialPlainTitle.." style"	, }
	local	btnArialBold		= iup.button	{ title=strArialBoldTitle		, tip="Choose "..strArialBoldTitle.." style"		, }
	local	lblTahomaName	= iup.label	{ title="Font Tahoma"			, tip="Tahoma alternative fontface"					, }
	local	btnTahomaPlain	= iup.button	{ title=strTahomaPlainTitle	, tip="Choose "..strTahomaPlainTitle.." style"	, }
	local	btnTahomaBold	= iup.button	{ title=strTahomaBoldTitle	, tip="Choose "..strTahomaBoldTitle.." style"	, }
	local	lblChoose			= iup.label	{ title="Choose your interface font style or"										, }
	local	btnClose			= iup.button	{ title="Close"					, tip="Close this Font Style window"				, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogFont		= iup.dialog { title=StrPlugin.." Font Style", dialogframe="YES", startfocus=btnClose,
										iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
											iup.frame { font=StrFontHead, fgcolor=StrBlack, active="YES", title="Font Style",
												iup.vbox { margin=StrMinMargin,
													iup.hbox { homogeneous="YES", lblHeadName,	lblHeadPlain,	lblHeadBold,		},
													iup.hbox { homogeneous="YES", lblFontName,	btnFontPlain,	btnFontBold,		},
													iup.hbox { homogeneous="YES", lblArialName,	btnArialPlain,	btnArialBold,	},
													iup.hbox { homogeneous="YES", lblTahomaName,	btnTahomaPlain,	btnTahomaBold,	},
													iup.hbox { lblChoose, btnClose, },
												},
											},
										},
										move_cb =function(self,x,y) IntDataX=x IntDataY=y end,
										close_cb=function() strAnswer="Ignore" return iup.CLOSE end,
									}

	-- Assign font styles for GUI labels and buttons
	local strFontPlain		= tblFontSet	[IntFontPlain]	["Body"]
	local strFontBold		= tblFontSet	[IntFontBold]	["Body"]
	local strArialPlain		= tblFontSet	[IntArialPlain]	["Body"]
	local strArialBold		= tblFontSet	[IntArialBold]	["Body"]
	local strTahomaPlain	= tblFontSet	[IntTahomaPlain]["Body"]
	local strTahomaBold		= tblFontSet	[IntTahomaBold]	["Body"]

	-- Set other GUI attributes for labels and buttons
	for iupName, tblAttr in pairs( {
		--	Control		=	1~fgcolor	, 2~font			, 3~FontSet		, 4~action function()
		[lblHeadName]	= { StrBlue	, StrFontBody	, false			, false	},
		[lblHeadPlain]	= { StrBlue	, strFontPlain	, false			, false	},
		[lblHeadBold]	= { StrBlue	, strFontBold	, false			, false	},
		[lblFontName]	= { StrBlue	, strFontPlain	, false			, false	},
		[btnFontPlain]	= { StrGreen	, strFontPlain	, IntFontPlain	, false	},
		[btnFontBold]	= { StrGreen	, strFontBold	, IntFontBold	, false	},
		[lblArialName]	= { StrBlue	, strArialPlain	, false			, false	},
		[btnArialPlain]	= { StrGreen	, strArialPlain	, IntArialPlain	, false	},
		[btnArialBold]	= { StrGreen	, strArialBold	, IntArialBold	, false	},
		[lblTahomaName]	= { StrBlue	, strTahomaPlain, false			, false	},
		[btnTahomaPlain]= { StrGreen	, strTahomaPlain, IntTahomaPlain, false	},
		[btnTahomaBold]	= { StrGreen	, strTahomaBold	, IntTahomaBold	, false	},
		[lblChoose]		= { StrBlue	, StrFontBody	, false			, false	},
		[btnClose]		= { StrRed	, StrFontBody	, false			, dialogFont.close_cb },
		} ) do
		iupName.expand	= "YES"
		iupName.fgcolor	= tblAttr[1]
		iupName.font		= tblAttr[2]
		if tblAttr[3] then
			if tblAttr[3] == IntFontSet then iupName.active = "NO" end	-- Disable button for currently selected font
			iupName.action = function() doAssignFontSet(tblAttr[3]) return iup.CLOSE end
		end
		if tblAttr[4] then iupName.action = tblAttr[4] end
	end

	dialogFont:popup(IntDataX,IntDataY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	return strAnswer
end -- function GUI_FontDialogue

-- GUI Help & Advice Dialogue --
function GUI_HelpDialogue()

	local function doActivateMainHelpButton()
		if BtnMainHelp then BtnMainHelp.active = "YES" end
	end -- local function doActivateMainHelpButton

	-- create the WebBrowser based on its ProgID and connect it to LuaCOM
	local	oleControl = iup.olecontrol{ "Shell.Explorer.1", designmode="NO", }
			oleControl:CreateLuaCOM()

	-- Create each GUI button with title and tooltip
	local	btnIntro	= iup.button	{ title="Introduction"		, tip="Introduction Page for Help and Advice"	, }
	local	btnIndiv	= iup.button	{ title="Indiv Records"	, tip="Individual Records Tab Help and Advice"	, }
	local	btnFamily	= iup.button	{ title="Family Records"	, tip="Family Records Tab Help and Advice"		, }
	local	btnOther	= iup.button	{ title="Other Records"	, tip="Other Records Tab Help and Advice"			, }
	local	btnStatus	= iup.button	{ title="Status/Settings"	, tip="Status and Settings Help and Advice"		, }
	local	btnLogs	= iup.button	{ title="Log Files"			, tip="View and Delete Log Files Help and Advice", }
	local	btnResult	= iup.button	{ title="Result Set"		, tip="Output Result Set Help and Advice"			, }
	local	btnClose	= iup.button	{ title="Close Window"		, tip="Close this Help and Advice window"			, }

	-- The following controls are global to allow Main GUI to alter font and restore default position
	HboxHelp		=	iup.hbox { font=StrFontBody, margin=StrMinMargin, homogeneous="YES", btnIntro, btnIndiv, btnFamily, btnOther, btnStatus, btnLogs, btnResult, btnClose, }
	DialogHelp	=	iup.dialog { title=StrPlugin.." Help & Advice", startfocus=btnClose, rastersize=StrHelpWinSize,
							iup.vbox { alignment="ACENTER", margin=StrBigMargin, expandchildren="YES",
								oleControl,
								HboxHelp,
							},
							move_cb =function(self,x,y) IntHelpX=x IntHelpY=y end,
							close_cb=function() doActivateMainHelpButton() end,
						}

	local strFHUG = "http://www.fhug.org.uk/wiki/doku.php?id=plugins:help:change_any_fact_tag:"

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~Navigate URL						, 3~action function()
		[btnIntro]	= { StrBlue	, "change_any_fact_tag"				, false },
		[btnIndiv]	= { StrBlue	, "individual_records_tab"			, false },
		[btnFamily]	= { StrBlue	, "family_records_tab"					, false },
		[btnOther]	= { StrBlue	, "other_records_tab"					, false },
		[btnStatus]	= { StrBlue	, "status_and_settings_information"	, false },
		[btnLogs]		= { StrBlue	, "view_delete_log_files"				, false },
		[btnResult]	= { StrBlue	, "output_result_set"					, false },
		[btnClose]	= { StrRed	, false									, function() DialogHelp:destroy() doActivateMainHelpButton() end }
		} ) do
		iupName.expand	= "HORIZONTAL"
		iupName.size		= "x10"
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.action = function() oleControl.com:Navigate(strFHUG..tblAttr[2]) end end
		if tblAttr[3] then iupName.action = tblAttr[3] end
	end

	DialogHelp:showxy(IntHelpX,IntHelpY)		-- Show Help GUI window
	DialogHelp.rastersize=iup.NULL				-- Allow window to be resized

	oleControl.com:Navigate(strFHUG.."change_any_fact_tag")

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_HelpDialogue

-- GUI View Log File Dialogue --
function GUI_ViewDialogue(tblLogFile)

	-- Create each GUI text and button with title and tooltip, etc
	local	txtView	= iup.text	{ readonly="YES"	,	multiline="YES"		, tip="Selected log file details", autohide="YES", visiblecolumns="50", visiblelines="20", }
	local	btnOldest	= iup.button	{ title="Oldest Log File"						, tip="Select oldest log file"	, }
	local	btnPrior	= iup.button	{ title="Prior Log File"						, tip="Select prior log file"	, }
	local	btnDelete	= iup.button	{ title="Delete Log File"						, tip="Delete selected log file", }
	local	btnNext	= iup.button	{ title="Next Log File"						, tip="Select next log file"		, }
	local	btnLatest	= iup.button	{ title="Latest Log File"						, tip="Select latest log file"	, }
	local	btnClose	= iup.button	{ title="Close View && Delete Log Files"	, tip="Close this View and Delete Log Files window", }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogView = iup.dialog { title=StrPlugin.." View & Delete Log Files", dialogframe="YES", startfocus=btnClose,
								iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
									iup.frame { font=StrFontHead, title="View & Delete Log Files",
										iup.vbox { font=StrFontBody,
											txtView,
											iup.hbox { btnOldest, btnPrior, btnDelete, btnNext, btnLatest, margin=StrMinMargin, homogeneous="YES", },
											btnClose,
										},
									},
								},
								move_cb =function(self,x,y) IntViewX=x IntViewY=y end,
								close_cb=function() return iup.CLOSE end,
							}

	local intLogFile = tblLogFile[0]							-- Number of log files

	local function doDeleteLogFile()							-- Action for Delete Log File button
		local fileHandle, strError = os.remove(tblLogFile[intLogFile])
		if fileHandle == nil then
			iup.Message(StrPlugin, "Old log file not deleted!\n"..strError)
		else
			if tblLogFile[intLogFile] == StrLogFile then
				LblLogFile.title = "Log File not created."	-- Current log file deleted so update Main GUI
				LogFileHandle = nil
			end
			table.remove(tblLogFile,intLogFile)					-- Remove log file name from table
			tblLogFile[0] = tblLogFile[0] - 1					-- Decrement number of log file names
		end
	end -- local function doDeleteLogFile

	local function doViewLogFile(strLogFile)					-- Display Log File contents in multiline text box
		local strValue = ""
		for strLine in io.lines(strLogFile) do
			strValue = strValue..strLine.."\n"
		end
		txtView.value = strValue
	end -- local function doViewLogFile

	local function doUpdateDisplay()							-- Update buttons and multiline text box
		if tblLogFile[0] <= 0 then
			tblLogFile[0] = 0										-- No log files exist, so all buttons inactive
			intLogFile = 0
			btnOldest.active = "NO"
			btnPrior.active	 = "NO"
			btnDelete.active = "NO"
			btnNext.active	 = "NO"
			btnLatest.active = "NO"
			txtView.value = "No Log Files"
		elseif tblLogFile[0] == 1 then							-- One log file exists, so only Delete button active
			intLogFile = 1
			btnOldest.active = "NO"
			btnPrior.active	 = "NO"
			btnDelete.active = "YES"
			btnNext.active	 = "NO"
			btnLatest.active = "NO"
			doViewLogFile(tblLogFile[intLogFile])
		else
			btnOldest.active = "YES"
			btnPrior.active	 = "YES"
			btnDelete.active = "YES"
			btnNext.active	 = "YES"
			btnLatest.active = "YES"
			if intLogFile == 1 then								-- Oldest log file selected, so cannot go backward
				btnOldest.active = "NO"
				btnPrior.active	 = "NO"
			elseif intLogFile >= tblLogFile[0] then			-- Latest log file selected, so cannot go forward
				intLogFile = tblLogFile[0]
				btnNext.active	 = "NO"
				btnLatest.active = "NO"
			end
			doViewLogFile(tblLogFile[intLogFile])
		end
	end -- local function doUpdateDisplay

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~action function()
		[txtView]		= {	 StrBlack	, false					},
		[btnOldest]	= { StrBlue	, function() intLogFile=1					doUpdateDisplay() end },
		[btnPrior]	= { StrBlue	, function() intLogFile=intLogFile-1	doUpdateDisplay() end },
		[btnDelete]	= { StrBlue	, function() doDeleteLogFile()			doUpdateDisplay() end },
		[btnNext]		= { StrBlue	, function() intLogFile=intLogFile+1	doUpdateDisplay() end },
		[btnLatest]	= { StrBlue	, function() intLogFile=tblLogFile[0]	doUpdateDisplay() end },
		[btnClose]	= { StrRed	, dialogView.close_cb	},
		} ) do
		iupName.expand	= "YES"
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.action = tblAttr[2] end
	end

	doUpdateDisplay()

	dialogView:popup(IntViewX,IntViewY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_ViewDialogue

-- GUI Warnings Dialogue --
function GUI_WarnDialogue(strName,strData,strWarn,intHelp)

	local	tblHelp		= {"Check that the Source and Target are compatible","Data value is logged in a Source Note","Please report via FHUG Forum > Plugins Discussion"}

	-- Create each GUI label and button with title and tooltip, etc
	local	lblNameHead	= iup.label	{ title="Name: "			, tip="Record name"			, }
	local	lblNameText	= iup.label	{ title=strName				, tip="Record name"			, }
	local	lblDataHead	= iup.label	{ title="Data: "			, tip="Record data"			, }
	local	lblDataText	= iup.label	{ title=strData				, tip="Record data"			, }
	local	lblWarnHead	= iup.label	{ title="Warning: "			, tip="Warning message"	, }
	local	lblWarnText	= iup.label	{ title=strWarn				, tip="Warning message"	, }
	local	lblHelpText	= iup.label	{ title=tblHelp[intHelp]	, tip="Advice message"		, }
	local	btnClose		= iup.button	{ title="Close Warning"	, tip="Close this Warning window", action=function() return iup.CLOSE end, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogWarn	= iup.dialog { title=StrPlugin.." Warning", dialogframe="YES", startfocus=btnClose,
									iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
										iup.frame { font=StrFontHead, title="Warning",
											iup.vbox { font=StrFontBody,
												iup.hbox { lblNameHead, lblNameText, margin=StrMinMargin, },
												iup.hbox { lblDataHead, lblDataText, margin=StrMinMargin, },
												iup.hbox { lblWarnHead, lblWarnText, margin=StrMinMargin, },
												lblHelpText,
												btnClose,
											},
										},
									},
									move_cb =function(self,x,y) IntDataX=x IntDataY=y end,
									close_cb=function() return iup.CLOSE end,
								}

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~alignment
		[lblNameHead]= { StrBlack	, "ARIGHT"	},
		[lblNameText]= { StrBlack	, false		},
		[lblDataHead]= { StrBlack	, "ARIGHT"	},
		[lblDataText]= { StrBlack	, false		},
		[lblWarnHead]= { StrRed	, "ARIGHT"	},
		[lblWarnText]= { StrRed	, false		},
		[lblHelpText]= { StrBlue	, "ACENTER"	},
		[btnClose]	= { StrRed	, false		},
		} ) do
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.alignment = tblAttr[2] end
		if iupName.alignment == "ARIGHT" then
			iupName.rastersize = "80"
		else
			iupName.expand = "YES"
		end
	end

	dialogWarn:popup(IntDataX,IntDataY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_WarnDialogue

-- GUI Data Dialogue --
function GUI_DataDialogue(ptrRecord,ptrOldData,strNewTag)

	local bEdit = false			-- true means Edit Tags & false means Skip Tags
	local bConf = true			-- true means confirm next Tag Edit & false means do the rest & nil means abort
	local strEditText	= ""	-- Text statement of options 
	local strEditWarn	= ""	-- Warning message makes text red
	local strEditData	= ""	-- Delete/Change this Tag button label
	local strEditRest	= ""	-- Delete/Change the Rest button label
	local strOldType	= ""	-- Source Tag type is "Event" or "Attribute" or "Tag"
	local strNewType	= ""	-- Target Tag type is "Event" or "Attribute" or "Tag"
	local ptrNewData	= fhNewItemPtr()

	-- Determine if Fact Event or Fact Attribute or Data Tag --
	local function strDataType(ptrData)
		local strType
		if	fhIsAttribute(ptrData) then
			strType = "Attribute"
		elseif fhIsEvent(ptrData) then
			strType = "Event"
		elseif fhIsUDF(ptrData) then
			if			string.sub(StrOldData,-5) == "Event"		then	strType = "Event"
			elseif		string.sub(StrOldData,-9) == "Attribute"	then	strType = "Attribute"
			else																	strType = "Tag"  
			end
		else
			strType = "Tag"
		end
		return strType
	end -- local function strDataType

	if IntHandledData == 0 then
		strEditText = "\nClick the Close [X] top right to abort."
	end
	strOldType = strDataType(ptrOldData)
	if strNewTag == StrDeleteTag then
		strEditText = "Delete this "..strOldType.." ?"..strEditText
		strEditData = "Delete this "..strOldType
		strEditRest = "Delete all the Rest"
	else
		ptrNewData = fhCreateItem(strNewTag,ptrRecord)
		strNewType = strDataType(ptrNewData)
		fhDeleteItem(ptrNewData)
		if strOldType == "Attribute" and fhGetTag(ptrOldData) ~= "RESI" and ( strNewType == "Event" or strNewTag == "RESI" ) then
			strEditWarn = "\nAny Attribute value will migrate to a SOURce Note !"
		end
		strEditText = "Change this "..strOldType.." to "..strNewTag..": "..StrNewData.." "..strNewType.." ?"..strEditWarn..strEditText
		strEditData = "Change to "..StrNewData.." "..strNewType
		strEditRest = "Change all the Rest"
	end

	-- Create each GUI label and button with title and tooltip
	local	lblNameHead	= iup.label	{ title="Name: "									, tip="Fact/Tag name"				, }
	local	lblNameText	= iup.label	{ title=StrDisplayName(ptrRecord)				, tip="Fact/Tag name"				, }
	local	lblDataHead	= iup.label	{ title="Data: "									, tip="Fact/Tag data"				, }
	local	lblDataText	= iup.label	{ title=StrDisplayData(ptrOldData,StrOldData), tip="Fact/Tag data"				, }
	local	lblEditHead	= iup.label	{ title="Option: "									, tip="Fact/Tag edit"				, }
	local	lblEditText	= iup.label	{ title=strEditText									, tip="Fact/Tag edit"				, }
	local	btnEditData	= iup.button	{ title=strEditData									, tip="Edit this Fact/Tag"		, }
	local	btnSkipData	= iup.button	{ title="Skip this "..strOldType				, tip="Skip this Fact/Tag"		, }
	local	btnEditRest	= iup.button	{ title=strEditRest									, tip="Edit rest of Facts/Tags"	, }
	local	btnSkipRest	= iup.button	{ title="Skip all the Rest"						, tip="Skip rest of Facts/Tags"	, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogData	= iup.dialog { title=StrPlugin.." Confirm Edit", dialogframe="YES", startfocus=btnSkipRest,
									iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
										iup.frame { font=StrFontHead, title="Confirm Edit",
											iup.vbox { font=StrFontBody,
												iup.hbox { lblNameHead, lblNameText, margin=StrMinMargin, },
												iup.hbox { lblDataHead, lblDataText, margin=StrMinMargin, },
												iup.hbox { lblEditHead, lblEditText, margin=StrMinMargin, },
												iup.hbox { btnEditData, btnSkipData, margin=StrMinMargin, homogeneous="YES", },
												iup.hbox { btnEditRest, btnSkipRest, margin=StrMinMargin, homogeneous="YES", },
											},
										},
									},
									move_cb =function(self,x,y) IntDataX=x IntDataY=y end,
									close_cb=function() bEdit=false if IntHandledData == 0 then bConf=nil else bConf=false end end,
									-- If nothing has happended can abort Tag changes, otherwise must skip remaining Tags to maintain counters
								}

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~alignment, 3~action function()
		[lblNameHead]= { StrBlack	, "ARIGHT"	, false },
		[lblNameText]= { StrBlack	, false		, false },
		[lblDataHead]= { StrBlack	, "ARIGHT"	, false },
		[lblDataText]= { StrBlack	, false		, false },
		[lblEditHead]= { StrRed	, "ARIGHT"	, false },
		[lblEditText]= { StrRed	, false		, false },
		[btnEditData]= { StrGreen	, false		, function() bEdit=true  bConf=true  return iup.CLOSE end },
		[btnSkipData]= { StrGreen	, false		, function() bEdit=false bConf=true  return iup.CLOSE end },
		[btnEditRest]= { StrGreen	, false		, function() bEdit=true  bConf=false return iup.CLOSE end },
		[btnSkipRest]= { StrGreen	, false		, function() bEdit=false bConf=false return iup.CLOSE end },
		} ) do
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.alignment = tblAttr[2] end
		if iupName.alignment == "ARIGHT" then
			iupName.rastersize = "80"
		else
			iupName.expand = "YES"
		end
		if tblAttr[3] then iupName.action = tblAttr[3] end
	end

	if strEditWarn == "" then
		lblEditHead.fgcolor = StrBlue
		lblEditText.fgcolor = StrBlue
	end

	dialogData:popup(IntDataX,IntDataY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	return bEdit,bConf
end -- function GUI_DataDialogue

-- GUI Main Dialogue --
function GUI_MainDialogue()
	local flgQuitMode	= false				-- btnQuit.action() = true, and btnClose.action() = false
	local strRecTag		= "INDI"				-- Current Record Tag "INDI", "FAM", "NOTE", "SOUR", etc
	local strIndOldSet	= StrStandard		-- Individual Old Tag Set chosen
	local strIndOldTag	= nil					-- Individual Old Tag Name to be removed
	local strIndNewSet	= StrStandard		-- Individual New Tag Set chosen
	local strIndNewTag	= nil					-- Individual New Tag Name to be inserted
	local tblIndFilter	= {"","",""}			-- Individual Old Tag Filters for Value, Date, Place
	local strFamOldSet	= StrStandard		-- Family Old Tag Set chosen
	local strFamOldTag	= nil					-- Family Old Tag Name to be removed
	local strFamNewSet	= StrStandard		-- Family New Tag Set chosen
	local strFamNewTag	= nil					-- Family New Tag Name to be inserted
	local tblFamFilter	= {"","",""}			-- Family Old Tag Filters for Value, Date, Place
	local strRecOldSet	= StrDefinedTags	-- Record Old Tag Set chosen
	local strRecOldTag	= nil					-- Record Old Tag Name to be removed
	local strRecNewSet	= StrDefinedTags	-- Record New Tag Set chosen
	local strRecNewTag	= nil					-- Record New Tag Name to be inserted
	local tblRecFilter	= {"","",""}			-- Record Old Tag Filters for Value, Date, Place
	local strIndDelete	= " Delete every 'Source Tag Name' chosen below "
	local strIndChange	= " Change 'Source Tag Name' into 'Target Tag Name' "
	local strFamDelete	= " Delete every 'Source Tag Name' chosen below "
	local strFamChange	= " Change 'Source Tag Name' into 'Target Tag Name' "
	local strRecDelete	= " Delete every 'Source Tag Name' chosen below "
	local strRecChange	= " Change 'Source Tag Name' into 'Target Tag Name' "

	-- If a button title is too long, then truncate long names and add elipsis
	local function strButtonTitle(strRecTag,strOldTag,strMid,strNewTag)
		local strOld = ""
		local strNew = ""
		if strOldTag ~= nil then
			strOld = TblDictionary[strRecTag][strOldTag]
		end
		if strNewTag ~= nil then
			strNew = TblDictionary[strRecTag][strNewTag]
		end
		if ( string.len(strOld) + string.len(strMid) + string.len(strNew) ) > IntMaxNameLen * 2 - 4 then
			if string.len(strOld) > IntMaxNameLen then
				strOld = string.sub(strOld,1,IntMaxNameLen-3).."..."
			end
			if string.len(strNew) > IntMaxNameLen then
				strNew = string.sub(strNew,1,IntMaxNameLen-3).."..."
			end
		end
		return strOld..strMid..strNew
	end -- local function strButtonTitle

--[[
	-- Create the Individual Records controls
	local	btnCHR_BAPM	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strButtonTitle("INDI","CHR"," to ","BAPM")	, tip="Change Events", }
	local	btnBAPM_CHR	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strButtonTitle("INDI","BAPM"," to ","CHR")	, tip="Change Events", }
	local	btnIndDelete	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strIndDelete, active="NO"						, tip="Delete Facts/Tags", }
	local	btnIndChange	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strIndChange, active="NO"						, tip="Change Facts/Tags", }
	local	lblIndOldSet	= iup.label{	rastersize=strListName	,alignment="ARIGHT", title="Source Tag Set:"									, tip="Select source Tag set", }
			LstIndOldSet	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select source Tag set", }
	local	lblIndNewSet	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Target Tag Set:"									, tip="Select target Tag set", }
			LstIndNewSet	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select target Tag set", }
	local	lblIndOldTag	= iup.label{	rastersize=strListName	,alignment="ARIGHT", title="Source Tag Name:"								, tip="Select source Fact/Tag", }
			LstIndOldTag	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select source Fact/Tag", }
	local	lblIndNewTag	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Target Tag Name:"								, tip="Select target Fact/Tag", }
			LstIndNewTag	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select target Fact/Tag", }
	local	lblIndValue	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Value:"											, tip="Filter on Attribute Value", }
	local	txtIndValue	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblIndFilter[IntFilterValue]					, tip="Filter on Attribute Value", }
	local	lblIndDate	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Date:"												, tip="Filter on Fact Date", }
	local	txtIndDate	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblIndFilter[IntFilterDate]						, tip="Filter on Fact Date", }
	local	lblIndPlace	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Place:"											, tip="Filter on Fact Place", }
	local	txtIndPlace	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblIndFilter[IntFilterPlace]					, tip="Filter on Fact Place", }
]]
	-- Create the Individual Records controls with titles/values and tooltips, etc
	local	btnCHR_BAPM	= iup.button	{ title=strButtonTitle("INDI","CHR"," to ","BAPM")	, tip="Change Events", }
	local	btnBAPM_CHR	= iup.button	{ title=strButtonTitle("INDI","BAPM"," to ","CHR")	, tip="Change Events", }
	local	btnIndDelete	= iup.button	{ title=strIndDelete			, active="NO"			, tip="Delete Facts/Tags", }
	local	btnIndChange	= iup.button	{ title=strIndChange			, active="NO"			, tip="Change Facts/Tags", }
	local	lblIndOldSet	= iup.label	{ title="Source Tag Set:"									, tip="Select source Tag set", }
			LstIndOldSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select source Tag set", }
	local	lblIndNewSet	= iup.label	{ title="Target Tag Set:"									, tip="Select target Tag set", }
			LstIndNewSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select target Tag set", }
	local	lblIndOldTag	= iup.label	{ title="Source Tag Name:"								, tip="Select source Fact/Tag", }
			LstIndOldTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select source Fact/Tag", }
	local	lblIndNewTag	= iup.label	{ title="Target Tag Name:"								, tip="Select target Fact/Tag", }
			LstIndNewTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select target Fact/Tag", }
	local	lblIndValue	= iup.label	{ title="Value:"											, tip="Filter on Attribute Value", }
	local	txtIndValue	= iup.text	{ value=tblIndFilter[IntFilterValue]					, tip="Filter on Attribute Value", }
	local	lblIndDate	= iup.label	{ title="Date:"												, tip="Filter on Fact Date", }
	local	txtIndDate	= iup.text	{ value=tblIndFilter[IntFilterDate]						, tip="Filter on Fact Date", }
	local	lblIndPlace	= iup.label	{ title="Place:"											, tip="Filter on Fact Place", }
	local	txtIndPlace	= iup.text	{ value=tblIndFilter[IntFilterPlace]					, tip="Filter on Fact Place", }

	-- Create the Family Records controls with titles/values and tooltips, etc
	local	btnDIV_ANUL	= iup.button	{ title=strButtonTitle("FAM","DIV"," to ","ANUL")	, tip="Change Events", }
	local	btnANUL_DIV	= iup.button	{ title=strButtonTitle("FAM","ANUL"," to ","DIV")	, tip="Change Events", }
	local	btnFamDelete	= iup.button	{ title=strFamDelete			, active="NO"			, tip="Delete Facts/Tags", }
	local	btnFamChange	= iup.button	{ title=strFamChange			, active="NO"			, tip="Change Facts/Tags", }
	local	lblFamOldSet	= iup.label	{ title="Source Tag Set:"									, tip="Select source Tag set", }
			LstFamOldSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select source Tag set", }
	local	lblFamNewSet	= iup.label	{ title="Target Tag Set:"									, tip="Select target Tag set", }
			LstFamNewSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select target Tag set", }
	local	lblFamOldTag	= iup.label	{ title="Source Tag Name:"								, tip="Select source Fact/Tag", }
			LstFamOldTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select source Fact/Tag", }
	local	lblFamNewTag	= iup.label	{ title="Target Tag Name:"								, tip="Select target Fact/Tag", }
			LstFamNewTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select target Fact/Tag", }
	local	lblFamValue	= iup.label	{ title="Value:"											, tip="Filter on Attribute Value", }
	local	txtFamValue	= iup.text	{ value=tblFamFilter[IntFilterValue]					, tip="Filter on Attribute Value", }
	local	lblFamDate	= iup.label	{ title="Date:"												, tip="Filter on Fact Date", }
	local	txtFamDate	= iup.text	{ value=tblFamFilter[IntFilterDate]						, tip="Filter on Fact Date", }
	local	lblFamPlace	= iup.label	{ title="Place:"											, tip="Filter on Fact Place", }
	local	txtFamPlace	= iup.text	{ value=tblFamFilter[IntFilterPlace]					, tip="Filter on Fact Place", }
--[[
	-- Create the Other Records controls
	local	lblRecords	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Record Type:"										, tip="Select record type", }
			LstRecords	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", value="1"	, visible_items="9" 	, tip="Select record type", }
	local	btnRecDelete	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strRecDelete, active="NO"						, tip="Delete Tags", }
	local	btnRecChange	= iup.button{expand="YES"				, fgcolor=StrGreen	, title=strRecChange, active="NO"						, tip="Change Tags", }
	local	lblRecOldSet	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Source Tag Set:"									, tip="Select source Tag set", }
			LstRecOldSet	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select source Tag set", }
	local	lblRecNewSet	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Target Tag Set:"									, tip="Select target Tag set", }
			LstRecNewSet	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select target Tag set", }
	local	lblRecOldTag	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Source Tag Name:"								, tip="Select source Tag name", }
			LstRecOldTag	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select source Tag name", }
	local	lblRecNewTag	= iup.label{	rastersize=strListName	,alignment="ARIGHT"	, title="Target Tag Name:"								, tip="Select target Tag name", }
			LstRecNewTag	= iup.list{	rastersize=strListData	, fgcolor=StrGreen	, dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select target Tag name", }
	local	lblRecValue	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Value:"											, tip="Filter on Tag Value", }
	local	txtRecValue	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblRecFilter[IntFilterValue]					, tip="Filter on Tag Value", }
	local	lblRecDate	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Date:"												, tip="Filter on Tag Date", }
	local	txtRecDate	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblRecFilter[IntFilterDate]						, tip="Filter on Tag Date", }
	local	lblRecPlace	= iup.label{	rastersize=strTextName	,alignment="ARIGHT"	, title="Place:"											, tip="Filter on Tag Place", }
	local	txtRecPlace	= iup.text{	rastersize=strTextData	, fgcolor=StrGreen	, value=tblRecFilter[IntFilterPlace]					, tip="Filter on Tag Place", }
]]
	-- Create the Other Records controls with titles/values and tooltips, etc
	local	lblRecords	= iup.label	{ title="Record Type:"										, tip="Select record type", }
			LstRecords	= iup.list	{ dropdown="YES", value="1"	, visible_items="9" 	, tip="Select record type", }
	local	btnRecDelete	= iup.button	{ title=strRecDelete			, active="NO"			, tip="Delete Tags", }
	local	btnRecChange	= iup.button	{ title=strRecChange			, active="NO"			, tip="Change Tags", }
	local	lblRecOldSet	= iup.label	{ title="Source Tag Set:"									, tip="Select source Tag set", }
			LstRecOldSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select source Tag set", }
	local	lblRecNewSet	= iup.label	{ title="Target Tag Set:"									, tip="Select target Tag set", }
			LstRecNewSet	= iup.list	{ dropdown="YES", sort="NO"	, visible_items="9" 	, tip="Select target Tag set", }
	local	lblRecOldTag	= iup.label	{ title="Source Tag Name:"								, tip="Select source Tag name", }
			LstRecOldTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select source Tag name", }
	local	lblRecNewTag	= iup.label	{ title="Target Tag Name:"								, tip="Select target Tag name", }
			LstRecNewTag	= iup.list	{ dropdown="YES", sort="YES"	, visible_items="16"	, tip="Select target Tag name", }
	local	lblRecValue	= iup.label	{ title="Value:"											, tip="Filter on Tag Value", }
	local	txtRecValue	= iup.text	{ value=tblRecFilter[IntFilterValue]					, tip="Filter on Tag Value", }
	local	lblRecDate	= iup.label	{ title="Date:"												, tip="Filter on Tag Date", }
	local	txtRecDate	= iup.text	{ value=tblRecFilter[IntFilterDate]						, tip="Filter on Tag Date", }
	local	lblRecPlace	= iup.label	{ title="Place:"											, tip="Filter on Tag Place", }
	local	txtRecPlace	= iup.text	{ value=tblRecFilter[IntFilterPlace]					, tip="Filter on Tag Place", }
--[[
	-- Create the Status & Settings controls
	local	lblCounts		= iup.label{ expand="YES", alignment="ARIGHT", title=" Data Counts: "					, tip="Counts for the last edit", }
			LblCoSkipped	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Skipped. "					, tip="Number of Facts/Tags skipped", }
			LblCoDeleted	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Deleted. "					, tip="Number of Facts/Tags deleted", }
			LblCoChanged	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Changed. "					, tip="Number of Facts/Tags changed", }
			LblCoWarning	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Warnings."					, tip="Number of Fact/Tag warnings", }
	local	lblCoPadding	= iup.label{ expand="YES", alignment="ARIGHT", title=" "									,	visible="NO", }
			LblCoStatus	= iup.label{ expand="YES", alignment="ACENTER",title="No 'Data' Found"					, tip="No Facts/Tags satisfied criteria"	,	floating="YES"	,	visible="NO", }
	local	lblTotals		= iup.label{ expand="YES", alignment="ARIGHT", title=" Data Totals: "					, tip="Totals for this session", }
			LblToSkipped	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Skipped. "					, tip="Number of Facts/Tags skipped", }
			LblToDeleted	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Deleted. "					, tip="Number of Facts/Tags deleted", }
			LblToChanged	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Changed. "					, tip="Number of Facts/Tags changed", }
			LblToWarning	= iup.label{ expand="YES", alignment="ARIGHT", title="   0 Warnings."					, tip="Number of Fact/Tag warnings", }
	local	lblToPadding	= iup.label{ expand="YES", alignment="ARIGHT", title=" "									,	visible="NO", }
	local	tglLogNeed	= iup.toggle{expand="YES", value=StrLogNeed	, title=StrLogNeedTitle.." ?"			, tip="Choose whether to log edits to file", }
	local	tglPattern	= iup.toggle{expand="YES", value=StrPattern	, title=StrPatternTitle.." ?"			, tip="Choose to Filter with Regular Expression style Patterns or Plain Text", }
	local	tglConfirm	= iup.toggle{expand="YES", value=StrConfirm	, title=StrConfirmTitle.." ?"			, tip="Choose whether to confirm Fact/Tag edits", }
	local	tglWarning	= iup.toggle{expand="YES", value=StrWarning	, title=StrWarningTitle.." ?"			, tip="Choose whether to show warning messages", }
			LblLogFile	= iup.label{ expand="YES", alignment=":ATOP"	, title="Log File not created."			, tip="Log file name"	,	wordwrap="YES"	,	size="x18", }
	local	btnViewLog	= iup.button{expand="YES", fgcolor=StrBlue	, title="View && Delete Log Files"		, tip="View and optionally delete all log files", }
			BtnMainHelp	= iup.button{expand="YES", fgcolor=StrBlue	, title="Obtain Help && Advice"			, tip="Obtain help and advice", }
	local	btnFontSet	= iup.button{expand="YES", fgcolor=StrBlue	, title=StrFontSetTitle					, tip="Choose user interface window font style", }
	local	btnDefault	= iup.button{expand="YES", fgcolor=StrBlue	, title="Restore Default Settings"		, tip="Restore default Settings for Window positions, "..StrLogNeedTitle..", "..StrPatternTitle..", "..StrConfirmTitle..", and "..StrWarningTitle, }
	local	btnQuit		= iup.button{expand="YES", fgcolor=StrRed		, title="QUIT Plugin and UNDO Edits"	, tip="Quit the plugin and undo any edits", }
	local	btnClose		= iup.button{expand="YES", fgcolor=StrRed		, title="CLOSE Plugin and KEEP Edits"	, tip="Close the plugin and keep all edits", }
]]
	-- Create the Status & Settings controls with titles/values and tooltips, etc
	local	lblCounts		= iup.label	{ title=" Data Counts: "									, tip="Counts for the last edit"			, }
			LblCoSkipped	= iup.label	{ title="   0 Skipped. "									, tip="Number of Facts/Tags skipped"		, }
			LblCoDeleted	= iup.label	{ title="   0 Deleted. "									, tip="Number of Facts/Tags deleted"		, }
			LblCoChanged	= iup.label	{ title="   0 Changed. "									, tip="Number of Facts/Tags changed"		, }
			LblCoWarning	= iup.label	{ title="   0 Warnings."									, tip="Number of Fact/Tag warnings"			, }
	local	lblCoPadding	= iup.label	{ title=" "							, visible="NO"		, }
			LblCoStatus	= iup.label	{ title="No 'Data' Found"			, visible="NO"		, tip="No Facts/Tags satisfied criteria"	, floating="YES", }
	local	lblTotals		= iup.label	{ title=" Data Totals: "									, tip="Totals for this session"				, }
			LblToSkipped	= iup.label	{ title="   0 Skipped. "									, tip="Number of Facts/Tags skipped"		, }
			LblToDeleted	= iup.label	{ title="   0 Deleted. "									, tip="Number of Facts/Tags deleted"		, }
			LblToChanged	= iup.label	{ title="   0 Changed. "									, tip="Number of Facts/Tags changed"		, }
			LblToWarning	= iup.label	{ title="   0 Warnings."									, tip="Number of Fact/Tag warnings"			, }
	local	lblToPadding	= iup.label	{ title=" "							, visible="NO"		, }
	local	tglLogNeed	= iup.toggle	{ title=StrLogNeedTitle.." ?"	, value=StrLogNeed	, tip="Choose whether to log edits to file"			, }
	local	tglPattern	= iup.toggle	{ title=StrPatternTitle.." ?"	, value=StrPattern	, tip="Choose to Filter with Regular Expression style Patterns or Plain Text", }
	local	tglConfirm	= iup.toggle	{ title=StrConfirmTitle.." ?"	, value=StrConfirm	, tip="Choose whether to confirm Fact/Tag edits"	, }
	local	tglWarning	= iup.toggle	{ title=StrWarningTitle.." ?"	, value=StrWarning	, tip="Choose whether to show warning messages"		, }
			LblLogFile	= iup.label	{ title="Log File not created."	, wordwrap="YES"	, tip="Log file name"		,		size="x18"			, }
	local	btnViewLog	= iup.button	{ title="View && Delete Log Files"						, tip="View and optionally delete all log files"	, }
			BtnMainHelp	= iup.button	{ title="Obtain Help && Advice"							, tip="Obtain online Help and Advice from the FHUG Knowldege Base", }
	local	btnFontSet	= iup.button	{ title=StrFontSetTitle									, tip="Choose user interface window font style"		, }
	local	btnDefault	= iup.button	{ title="Restore Default Settings"						, tip="Restore default Settings for Window positions, "..StrLogNeedTitle..", "..StrPatternTitle..", "..StrConfirmTitle..", and "..StrWarningTitle, }
	local	btnQuit		= iup.button	{ title="QUIT Plugin and UNDO Edits"					, tip="Quit the plugin and undo any edits"			, }
	local	btnClose		= iup.button	{ title="CLOSE Plugin and KEEP Edits"					, tip="Close the plugin and keep all edits"			, }

	-- Layout needs ( strListName + strListData ) * 2 + StrGap * 3 == ( strTextName + strTextData ) * 3 + strGap * 5 == 832
	local strListName	= "140"
	local strListData	= "270"
	local strTextName	= "058"
	local strTextData	= "211"
	local strPadding	= "414x32"	-- 414 = strListName + strListData + StrGap width, and 32 = height to help align Record controls with other tabs
	local strGap			= "5"

	-- Set other GUI control attributes, but see later for further action functions
	for iupName, tblAttr in pairs( {
		-- Control		=	1~fgcolor	, 2~alignment, 3~rastersize	, 4~action function()		Individual Records controls
		[btnCHR_BAPM]	= { StrGreen	, false		, false			, function() DoChangeData("INDI",StrStandard,StrStandard,"CHR","BAPM",tblIndFilter) end },
		[btnBAPM_CHR]	= { StrGreen	, false		, false			, function() DoChangeData("INDI",StrStandard,StrStandard,"BAPM","CHR",tblIndFilter) end },
		[btnIndDelete]	= { StrGreen	, false		, false			, false },
		[btnIndChange]	= { StrGreen	, false		, false			, false },
		[lblIndOldSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstIndOldSet]	= { StrGreen	, false		, strListData	, false },
		[lblIndNewSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstIndNewSet]	= { StrGreen	, false		, strListData	, false },
		[lblIndOldTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstIndOldTag]	= { StrGreen	, false		, strListData	, false },
		[lblIndNewTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstIndNewTag]	= { StrGreen	, false		, strListData	, false },
		[lblIndValue]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtIndValue]	= { StrGreen	, false		, strTextData	, false },
		[lblIndDate]		= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtIndDate]		= { StrGreen	, false		, strTextData	, false },
		[lblIndPlace]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtIndPlace]	= { StrGreen	, false		, strTextData	, false },
		-- Control		=	1~fgcolor	, 2~alignment, 3~rastersize	, 4~action function()		Family Records controls
		[btnDIV_ANUL]	= { StrGreen	, false		, false			, function() DoChangeData("FAM",StrStandard,StrStandard,"DIV","ANUL",tblFamFilter) end },
		[btnANUL_DIV]	= { StrGreen	, false		, false			, function() DoChangeData("FAM",StrStandard,StrStandard,"ANUL","DIV",tblFamFilter) end },
		[btnFamDelete]	= { StrGreen	, false		, false			, false },
		[btnFamChange]	= { StrGreen	, false		, false			, false },
		[lblFamOldSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstFamOldSet]	= { StrGreen	, false		, strListData	, false },
		[lblFamNewSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstFamNewSet]	= { StrGreen	, false		, strListData	, false },
		[lblFamOldTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstFamOldTag]	= { StrGreen	, false		, strListData	, false },
		[lblFamNewTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstFamNewTag]	= { StrGreen	, false		, strListData	, false },
		[lblFamValue]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtFamValue]	= { StrGreen	, false		, strTextData	, false },
		[lblFamDate]		= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtFamDate]		= { StrGreen	, false		, strTextData	, false },
		[lblFamPlace]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtFamPlace]	= { StrGreen	, false		, strTextData	, false },
		-- Control		=	1~fgcolor	, 2~alignment, 3~rastersize	, 4~action function()		Other Records controls
		[lblRecords]		= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstRecords]		= { StrGreen	, false		, strListData	, false },
		[btnRecDelete]	= { StrGreen	, false		, false			, false },
		[btnRecChange]	= { StrGreen	, false		, false			, false },
		[lblRecOldSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstRecOldSet]	= { StrGreen	, false		, strListData	, false },
		[lblRecNewSet]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstRecNewSet]	= { StrGreen	, false		, strListData	, false },
		[lblRecOldTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstRecOldTag]	= { StrGreen	, false		, strListData	, false },
		[lblRecNewTag]	= { StrBlack	, "ARIGHT"	, strListName	, false },
		[LstRecNewTag]	= { StrGreen	, false		, strListData	, false },
		[lblRecValue]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtRecValue]	= { StrGreen	, false		, strTextData	, false },
		[lblRecDate]		= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtRecDate]		= { StrGreen	, false		, strTextData	, false },
		[lblRecPlace]	= { StrBlack	, "ARIGHT"	, strTextName	, false },
		[txtRecPlace]	= { StrGreen	, false		, strTextData	, false },
		-- Control		=	1~fgcolor	, 2~alignment, 3~rastersize	, 4~action function()		Status & Settings controls
		[lblCounts]		= { StrBlack	, "ARIGHT"	, false			, false },
		[LblCoSkipped]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblCoDeleted]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblCoChanged]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblCoWarning]	= { StrBlack	, "ARIGHT"	, false			, false },
		[lblCoPadding]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblCoStatus]	= { StrBlack	, "ACENTER"	, false			, false },
		[lblTotals]		= { StrBlack	, "ARIGHT"	, false			, false },
		[LblToSkipped]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblToDeleted]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblToChanged]	= { StrBlack	, "ARIGHT"	, false			, false },
		[LblToWarning]	= { StrBlack	, "ARIGHT"	, false			, false },
		[lblToPadding]	= { StrBlack	, "ARIGHT"	, false			, false },
		[tglLogNeed]		= { StrBlack	, false		, false			, false },
		[tglPattern]		= { StrBlack	, false		, false			, false },
		[tglConfirm]		= { StrBlack	, false		, false			, false },
		[tglWarning]		= { StrBlack	, false		, false			, false },
		[LblLogFile]		= { StrBlack	, ":ATOP"		, false			, false },
		[btnViewLog]		= { StrBlue	, false		, false			, false },
		[BtnMainHelp]	= { StrBlue	, false		, false			, function() BtnMainHelp.active="NO" GUI_HelpDialogue() end },
		[btnFontSet]		= { StrBlue	, false		, false			, false },
		[btnDefault]		= { StrBlue	, false		, false			, false },
		[btnQuit]			= { StrRed	, false		, false			, function() flgQuitMode=true	return iup.CLOSE end },
		[btnClose]		= { StrRed	, false		, false			, function()							return iup.CLOSE end },
		} ) do
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.alignment	= tblAttr[2] end
		if tblAttr[3] then iupName.rastersize	= tblAttr[3] else iupName.expand = "YES" end
		if tblAttr[4] then iupName.action		= tblAttr[4] end
	end

	-- Create the Individual Records box
	local	hboxIndiv		=	iup.hbox { iup.label{font=StrFontHead, fgcolor=StrBlack, title=" ~ Choose an Individual Record Fact/Tag to Edit ~ ", }, }
	local	vboxIndiv		=	iup.vbox { font=StrFontBody, alignment="ACENTER",
									hboxIndiv,
									iup.hbox { btnCHR_BAPM, 	btnBAPM_CHR,		homogeneous="YES", },
									iup.hbox { btnIndDelete,	btnIndChange,	homogeneous="YES", },
									iup.hbox { lblIndOldSet,	LstIndOldSet,	lblIndNewSet,	LstIndNewSet, },
									iup.hbox { lblIndOldTag,	LstIndOldTag,	lblIndNewTag,	LstIndNewTag, },
									iup.hbox { lblIndValue, txtIndValue,		lblIndDate, txtIndDate,		lblIndPlace, txtIndPlace, gap=strGap, },
								}

	-- Create the Family Records box
	local	hboxFamily	=	iup.hbox { iup.label{font=StrFontHead, fgcolor=StrBlack, title=" ~ Choose a Family Record Fact/Tag to Edit ~ ", }, }
	local	vboxFamily	=	iup.vbox { font=StrFontBody, alignment="ACENTER",
									hboxFamily,
									iup.hbox { btnDIV_ANUL, 	btnANUL_DIV,		homogeneous="YES", },
									iup.hbox { btnFamDelete,	btnFamChange,	homogeneous="YES", },
									iup.hbox { lblFamOldSet,	LstFamOldSet,	lblFamNewSet,	LstFamNewSet, },
									iup.hbox { lblFamOldTag,	LstFamOldTag,	lblFamNewTag,	LstFamNewTag, },
									iup.hbox { lblFamValue, txtFamValue,		lblFamDate, txtFamDate,		lblFamPlace, txtFamPlace, gap=strGap, },
								}

	-- Create the Other Records box
	local	hboxRecord	=	iup.hbox { iup.label{font=StrFontHead, fgcolor=StrBlack, title=" ~ Choose a Record Type Gedcom Tag to Edit ~ ", }, }
	local	vboxRecord	=	iup.vbox { font=StrFontBody, alignment="ACENTER",
									hboxRecord,
									iup.hbox { lblRecords,	LstRecords, iup.label{ rastersize=strPadding, visible="NO", }, },
									iup.hbox { btnRecDelete,	btnRecChange,	homogeneous="YES", },
									iup.hbox { lblRecOldSet,	LstRecOldSet,	lblRecNewSet,	LstRecNewSet, },
									iup.hbox { lblRecOldTag,	LstRecOldTag,	lblRecNewTag,	LstRecNewTag, },
									iup.hbox { lblRecValue, txtRecValue,		lblRecDate, txtRecDate,		lblRecPlace, txtRecPlace, gap=strGap, },
								}

	-- Create the Status box
	local	hboxStatus	=	iup.hbox { iup.label{font=StrFontHead, fgcolor=StrBlack, title=" ~ Status and Settings Information ~ ", }, }
			HboxCounts	=	iup.hbox { lblCounts, LblCoSkipped, LblCoDeleted, LblCoChanged, LblCoWarning, lblCoPadding, LblCoStatus, homogeneous="YES", }
	local	hboxTotals	=	iup.hbox { lblTotals, LblToSkipped, LblToDeleted, LblToChanged, LblToWarning, lblToPadding, homogeneous="YES", }
	local	vboxStatus	=	iup.vbox { font=StrFontBody, alignment="ACENTER",
									hboxStatus,
									HboxCounts,
									hboxTotals,
									iup.hbox { tglLogNeed,	tglPattern,	tglConfirm,	tglWarning,	homogeneous="YES", },
									iup.hbox { LblLogFile, },
									iup.hbox { btnViewLog,	BtnMainHelp,	btnFontSet,	btnDefault,	homogeneous="YES", },
									iup.hbox { btnQuit	,	btnClose	,	homogeneous="YES", },
								}

	-- Create the Tab controls
	local	tabControls	=	iup.tabs { padding="10x7", tip="Choose between Individual Records, Family Records, or Other Records such as Note, Source, Repository, etc.",
									vboxIndiv,	tabtitle0="Individual Records",
									vboxFamily,	tabtitle1="Family Records",
									vboxRecord,	tabtitle2="Other Records",
									tabchangepos_cb=function(self,intNewTab,intOldTab) 	IntChosenTab=intNewTab strRecTag=StrPopulateDropdownLists() end,
								}

	-- Create dialogue and turn off resize, menubox, maximize and minimize
	local	vboxMain		=	iup.vbox { font=StrFontHead, fgcolor=StrBlack, alignment="ACENTER", gap=StrGap, margin="4x2", expandchildren="YES",
									iup.label {fgcolor=StrRed, alignment="ACENTER", title="Please only use this plugin on a copy of your data until you are satisfied with the results." },
									tabControls,
									vboxStatus,
								}
	local	dialogMain	=	iup.dialog { title=StrPlugin..StrIssue, dialogframe="YES", startfocus=btnClose, vboxMain,
									move_cb =function(self,x,y) IntMainX=x IntMainY=y end,
									close_cb=function() return iup.CLOSE end,
								}

	-- GUI Control Functions --

	local function doResetButtonIndChange(strMode)				-- Reset the Delete & Change buttons and Tag Name lists
		-- strMode = StrModeAll if either button is pressed
		-- strMode = StrModeOld if 'Source Tag Set' is changed
		-- strMode = StrModeNew if 'Target Tag Set' is changed
		btnIndChange.title = strIndChange
		btnIndChange.active = "NO"
		if strMode == StrModeOld or strMode == StrModeAll then
			btnIndDelete.title = strIndDelete
			btnIndDelete.active = "NO"
			LstIndOldTag.value = 0
			strIndOldTag = nil
		end
		if strMode == StrModeNew or strMode == StrModeAll then
			LstIndNewTag.value = 0
			strIndNewTag = nil
		end
	end -- local function doResetButtonIndChange

	function btnIndDelete:action()									-- Action for Delete fact button
		DoChangeData("INDI",strIndOldSet,"",strIndOldTag,StrDeleteTag,tblIndFilter)
		doResetButtonIndChange(StrModeAll)
	end

	function btnIndChange:action()									-- Action for Change facts button
		DoChangeData("INDI",strIndOldSet,strIndNewSet,strIndOldTag,strIndNewTag,tblIndFilter)
		doResetButtonIndChange(StrModeAll)
	end

	function LstIndOldSet:action(strText,intItem,iState)		-- Action for Source Tag Set dropdown
		if iState == 1 then
			LstIndOldSet.value = intItem
			local indoldsetval = LstIndOldSet.value				-- Populate Source Tag Name dropdown
			strIndOldSet = strText
			DoPopulateNameDropList(strRecTag,TblOldTagIndex["INDI"][strIndOldSet],LstIndOldTag)
			doResetButtonIndChange(StrModeOld)
		end
	end

	function LstIndNewSet:action(strText,intItem,iState)		-- Action for Target Tag Set dropdown
		if iState == 1 then
			LstIndNewSet.value = intItem
			local indnewsetval = LstIndNewSet.value				-- Populate Target Tag Name dropdown
			strIndNewSet = strText
			DoPopulateNameDropList(strRecTag,TblNewTagIndex["INDI"][strIndNewSet],LstIndNewTag)
			doResetButtonIndChange(StrModeNew)
		end
	end

	function LstIndOldTag:action(strText,intItem,iState)		-- Action for Source Tag Name dropdown
		if iState == 1 then
			strIndOldTag = TblDictionary["INDI"][strText]
			btnIndDelete.active = "YES"								-- Enable & label Delete button
			btnIndDelete.title = strButtonTitle("INDI",nil," Delete every ",strIndOldTag)
			if strIndNewTag ~= nil and strIndNewTag ~= strIndOldTag then
				btnIndChange.active = "YES"							-- Enable & label Change button if Target Tag Name OK
				btnIndChange.title = strButtonTitle("INDI",strIndOldTag," to ",strIndNewTag)
			end
		end
	end

	function LstIndNewTag:action(strText,intItem,iState)		-- Action for Target Tag Name dropdown
		if iState == 1 then
			strIndNewTag = TblDictionary["INDI"][strText]
			if strIndOldTag ~= nil and strIndNewTag ~= strIndOldTag then
				btnIndChange.active = "YES"							-- Enable & label Change button if Source Tag Name OK
				btnIndChange.title = strButtonTitle("INDI",strIndOldTag," to ",strIndNewTag)
			end
		end
	end

	function txtIndValue:valuechanged_cb()							-- Call back when Filter Value is changed
		tblIndFilter[IntFilterValue] = txtIndValue.value
	end

	function txtIndDate:valuechanged_cb()							-- Call back when Filter Date is changed
		tblIndFilter[IntFilterDate] = txtIndDate.value
	end

	function txtIndPlace:valuechanged_cb()							-- Call back when Filter Place is changed
		tblIndFilter[IntFilterPlace] = txtIndPlace.value
	end

	local function doResetButtonFamChange(strMode)				-- Reset the Delete & Change buttons and Tag Name lists
		-- strMode = StrModeAll if either button is used
		-- strMode = StrModeOld if 'Source Tag Set' is changed
		-- strMode = StrModeNew if 'Target Tag Set' is changed
		btnFamChange.title = strFamChange
		btnFamChange.active = "NO"
		if strMode == StrModeOld or strMode == StrModeAll then
			btnFamDelete.title = strFamDelete
			btnFamDelete.active = "NO"
			LstFamOldTag.value = 0
			strFamOldTag = nil
		end
		if strMode == StrModeNew or strMode == StrModeAll then
			LstFamNewTag.value = 0
			strFamNewTag = nil
		end
	end -- local function doResetButtonFamChange

	function btnFamDelete:action()									-- Action for Delete fact button
		DoChangeData("FAM",strFamOldSet,"",strFamOldTag,StrDeleteTag,tblFamFilter)
		doResetButtonFamChange(StrModeAll)
	end

	function btnFamChange:action()									-- Action for Change facts button
		DoChangeData("FAM",strFamOldSet,strFamNewSet,strFamOldTag,strFamNewTag,tblFamFilter)
		doResetButtonFamChange(StrModeAll)
	end

	function LstFamOldSet:action(strText,intItem,iState)		-- Action for Source Tag Set dropdown
		if iState == 1 then
			strFamOldSet = strText										-- Populate Source Tag Name dropdown
			DoPopulateNameDropList(strRecTag,TblOldTagIndex["FAM"][strFamOldSet],LstFamOldTag)
			doResetButtonFamChange(StrModeOld)
		end
	end

	function LstFamNewSet:action(strText,intItem,iState)		-- Action for Target Tag Set dropdown
		if iState == 1 then
			strFamNewSet = strText										-- Populate Target Tag Name dropdown
			DoPopulateNameDropList(strRecTag,TblNewTagIndex["FAM"][strFamNewSet],LstFamNewTag)
			doResetButtonFamChange(StrModeNew)
		end
	end

	function LstFamOldTag:action(strText,intItem,iState)		-- Action for Source Tag Name dropdown
		if iState == 1 then
			strFamOldTag = TblDictionary["FAM"][strText]
			btnFamDelete.active = "YES"								-- Enable & label Delete button
			btnFamDelete.title = strButtonTitle("FAM",nil," Delete every ",strFamOldTag)
			if strFamNewTag ~= nil and strFamNewTag ~= strFamOldTag then
				btnFamChange.active = "YES"							-- Enable & label Change button if Source Tag Name OK
				btnFamChange.title = strButtonTitle("FAM",strFamOldTag," to ",strFamNewTag)
			end
		end
	end

	function LstFamNewTag:action(strText,intItem,iState)		-- Action for Target Tag Name dropdown
		if iState == 1 then
			strFamNewTag = TblDictionary["FAM"][strText]
			if strFamOldTag ~= nil and strFamNewTag ~= strFamOldTag then
				btnFamChange.active = "YES"							-- Enable & label Change button if Source Tag Name OK
				btnFamChange.title = strButtonTitle("FAM",strFamOldTag," to ",strFamNewTag)
			end
		end
	end

	function txtFamValue:valuechanged_cb()							-- Call back when Filter Value is changed
		tblFamFilter[IntFilterValue] = txtFamValue.value
	end

	function txtFamDate:valuechanged_cb()							-- Call back when Filter Date is changed
		tblFamFilter[IntFilterDate] = txtFamDate.value
	end

	function txtFamPlace:valuechanged_cb()							-- Call back when Filter Place is changed
		tblFamFilter[IntFilterPlace] = txtFamPlace.value
	end

	local function doResetButtonRecChange(strMode)				-- Reset the Delete & Change buttons and Tag Name lists
		-- strMode = StrModeAll if either button is used
		-- strMode = StrModeOld if 'Source Tag Set' is changed
		-- strMode = StrModeNew if 'Target Tag Set' is changed
		btnRecChange.title = strRecChange
		btnRecChange.active = "NO"
		if strMode == StrModeOld or strMode == StrModeAll then
			btnRecDelete.title = strRecDelete
			btnRecDelete.active = "NO"
			LstRecOldTag.value = 0
			strRecOldTag = nil
		end
		if strMode == StrModeNew or strMode == StrModeAll then
			LstRecNewTag.value = 0
			strRecNewTag = nil
		end
	end -- local function doResetButtonRecChange

	function LstRecords:action(strText,intItem,iState)			-- Action for Record Type dropdown
		if iState == 1 then
			strRecTag = TblDictionary[strText]						-- Populate Source/Target Tag Set dropdown lists
			doResetButtonRecChange(StrModeAll)
			strRecOldSet,strRecNewSet = StrStrPopulateSetDropList(strRecTag,LstRecOldSet,LstRecNewSet)
			DoPopulateNameDropList(strRecTag,TblOldTagIndex[strRecTag][strRecOldSet],LstRecOldTag)
			DoPopulateNameDropList(strRecTag,TblNewTagIndex[strRecTag][strRecNewSet],LstRecNewTag)
		end
	end

	function btnRecDelete:action()									-- Action for Delete tag button
		DoChangeData(strRecTag,strRecOldSet,"",strRecOldTag,StrDeleteTag,tblRecFilter)
		doResetButtonRecChange(StrModeAll)
	end

	function btnRecChange:action()									-- Action for Change tag button
		DoChangeData(strRecTag,strRecOldSet,strRecNewSet,strRecOldTag,strRecNewTag,tblRecFilter)
		doResetButtonRecChange(StrModeAll)
	end

	function LstRecOldSet:action(strText,intItem,iState)		-- Action for Source Tag Set dropdown
		if iState == 1 then
			strRecOldSet = strText										-- Populate Source Tag Name dropdown
			doResetButtonRecChange(StrModeOld)
			DoPopulateNameDropList(strRecTag,TblOldTagIndex[strRecTag][strRecOldSet],LstRecOldTag)
		end
	end

	function LstRecNewSet:action(strText,intItem,iState)		-- Action for Target Tag Set dropdown
		if iState == 1 then
			strRecNewSet = strText										-- Populate Target Tag Name dropdown
			doResetButtonRecChange(StrModeNew)
			DoPopulateNameDropList(strRecTag,TblNewTagIndex[strRecTag][strRecNewSet],LstRecNewTag)
		end
	end

	function LstRecOldTag:action(strText,intItem,iState)		-- Action for Source Tag Name dropdown
		if iState == 1 then
			strRecOldTag = TblDictionary[strRecTag][strText]
			btnRecDelete.active = "YES"								-- Enable & label Delete button
			btnRecDelete.title = strButtonTitle(strRecTag,nil," Delete every ",strRecOldTag)
			if strRecNewTag ~= nil and strRecNewTag ~= strRecOldTag then
				btnRecChange.active = "YES"							-- Enable & label Change button if Target Tag Name OK
				btnRecChange.title = strButtonTitle(strRecTag,strRecOldTag," to ",strRecNewTag)
			end
		end
	end

	function LstRecNewTag:action(strText,intItem,iState)		-- Action for Target Tag Name dropdown
		if iState == 1 then
			strRecNewTag = TblDictionary[strRecTag][strText]
			if strRecOldTag ~= nil and strRecNewTag ~= strRecOldTag then
				btnRecChange.active = "YES"							-- Enable & label Change button if Target Tag Name OK
				btnRecChange.title = strButtonTitle(strRecTag,strRecOldTag," to ",strRecNewTag)
			end
		end
	end

	function txtRecValue:valuechanged_cb()							-- Call back when Filter Value is changed
		tblRecFilter[IntFilterValue] = txtRecValue.value
	end

	function txtRecDate:valuechanged_cb()							-- Call back when Filter Date is changed
		tblRecFilter[IntFilterDate] = txtRecDate.value
	end

	function txtRecPlace:valuechanged_cb()							-- Call back when Filter Place is changed
		tblRecFilter[IntFilterPlace] = txtRecPlace.value
	end

	function tglLogNeed:action(iState)								-- Action for Log Edits to File setting
		if iState == 0 then
			StrLogNeed = "OFF"
		elseif iState == 1 then
			StrLogNeed = "ON"
		else
			iup.Message(StrPlugin, "tglLogNeed invalid iState")
			StrLogNeed = "ERROR"
		end
	end

	function tglPattern:action(iState)								-- Action for Pattern Filters setting
		if iState == 0 then
			StrPattern = "OFF"
		elseif iState == 1 then
			StrPattern = "ON"
		else
			iup.Message(StrPlugin, "tglPattern invalid iState")
			StrPattern = "ERROR"
		end
	end

	function tglConfirm:action(iState)								-- Action for Confirm all Edits setting
		if iState == 0 then
			StrConfirm = "OFF"
		elseif iState == 1 then
			StrConfirm = "ON"
		else
			iup.Message(StrPlugin, "tglConfirm invalid iState")
			StrConfirm = "ERROR"
		end
	end

	function tglWarning:action(iState)								-- Action for Show all Warnings setting
		if iState == 0 then
			StrWarning = "OFF"
		elseif iState == 1 then
			StrWarning = "ON"
		else
			iup.Message(StrPlugin, "tglWarning invalid iState")
			StrWarning = "ERROR"
		end
	end

	function btnViewLog:action()										-- Action for View & Delete Log Files button
		local tblLogFile = {}											-- Table of log file names
		tblLogFile[0] = 0												-- Count of log file names
		for strFile, tblAttr in dirtree(StrPluginPath) do
			if string.find(strFile,StrPluginPath.."\\"..StrPlugin.." - ",1,true) ~= nil then
				-- Add log file name to table
				tblLogFile[0] = tblLogFile[0] + 1
				tblLogFile[tblLogFile[0]] = strFile
			end
		end
		GUI_ViewDialogue(tblLogFile)									-- Display log file popup
	end

	function btnFontSet:action()										-- Action for User Interface Font button
		local strAnswer = GUI_FontDialogue()
		if strAnswer == "Change" then
			vboxMain.font	= StrFontHead
			vboxIndiv.font	= StrFontBody
			hboxIndiv.font	= StrFontHead
			vboxFamily.font	= StrFontBody
			hboxFamily.font	= StrFontHead
			vboxRecord.font	= StrFontBody
			hboxRecord.font	= StrFontHead
			vboxStatus.font	= StrFontBody
			hboxStatus.font	= StrFontHead
			iup.RefreshChildren(dialogMain)
			iup.RefreshChildren(hboxIndiv)
			iup.RefreshChildren(hboxFamily)
			iup.RefreshChildren(hboxRecord)
			iup.RefreshChildren(hboxStatus)
			if	BtnMainHelp.active == "NO" then
				HboxHelp.font	= StrFontBody
			end
		end
	end

	function btnDefault:action()										-- Action for Restore Defaults button
		ResetDefaultSettings()
		if	BtnMainHelp.active == "NO" then
			DialogHelp.rastersize=StrHelpWinSize					-- If it exists, redisplay Help dialogue
			DialogHelp:showxy(IntHelpX,IntHelpY)
		end
		tglLogNeed.value = StrLogNeed								-- Reset controls & redisplay Main dilaogue
		tglPattern.value = StrPattern
		tglConfirm.value = StrConfirm
		tglWarning.value = StrWarning
		dialogMain:showxy(IntMainX,IntMainY)
	end

	dialogMain:showxy(IntMainX,IntMainY)							-- Show the Main dialogue

	strRecTag = StrPopulateDropdownLists()							-- Populate all the dropdown lists

	LblCoStatus.position = LblCoDeleted.position					-- Overlay the count Status on count Deleted

	UpdateCountStatus()													-- Update all the counters
	IntHandledData = 0

	if LogFileHandle then LblLogFile.title = StrLogFile end	-- Update the log filename display

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	if flgQuitMode then
		SaveSettings(StrStickyFile)									-- Save sticky data settings
		error("\n\nQUIT Plugin and UNDO Changes.\n\n")
	end

end -- function GUI_MainDialogue

-- Main body of Plugin script starts here --

	fhInitialise(5,0,0,"save_recommended")

	PresetGlobalConstants()			-- Preset global data constants

	ResetDefaultSettings()				-- Preset default sticky settings

	IntFontSet = IntFontPlain			-- Font Face & Style default

	LoadSettings(StrStickyFile)		-- Load sticky data settings

	LoadFactsAndTags()					-- Load all defined Fact Sets, undefined Custom Facts, Gedcom Defined Tags, and UDF Tag Sets 

	GUI_MainDialogue()

	SaveSettings(StrStickyFile)		-- Save sticky data settings

	if IntHandledTotal > 0 then		-- Create Query Result Set
		fhOutputResultSetColumn("Record Name",	"item", TblPtrName, IntHandledTotal, 120, "align_left")
		fhOutputResultSetColumn("Old Item"	,	"text", TblOldItem, IntHandledTotal, 060, "align_left")
		fhOutputResultSetColumn("Old Data"	,	"text", TblOldData, IntHandledTotal, 200, "align_left")
		fhOutputResultSetColumn("Action"	,	"text", TblPerform, IntHandledTotal, 030, "align_left")
		fhOutputResultSetColumn("New Item"	,	"text", TblNewItem, IntHandledTotal, 060, "align_left")
		fhOutputResultSetColumn("Link Data",	"item", TblPtrData, IntHandledTotal, 200, "align_left")
		fhOutputResultSetTitles("Results Log")
	end
