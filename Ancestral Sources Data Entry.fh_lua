--[[
@Title:			Ancestral Sources Data Entry V3.1
@Author:			Mike Tate
@LastUpdated:	3 May 2012
@Version:			3.1
@Description:	Launches latest Ancestral Sources Version for the current Project 
					with the current selected person, for any chosen type of data entry.
@V3.1:				FlgFile/FolderExists updated, better AS Not Found wording, and other minor changes.
@V3.0:				Added the Marriage, Add Images, and Close on Save options, also Help window size is sticky.
@V1.7:				Minor bug fixes and code revisions.
@V1.6:				Added user font option, tool tips, help, and other minor updates.
@V1.5:				Revised plugin data folder path, and updated coding style.
@V1.4:				Now supports both Projects and standalone GEDCOM files.
@V1.3:				Remembers some settings for each different PC environment.
@V1.2:				Caters for multi-monitor virtual-screen multi-PC environments.
@V1.1:				Caters for Ancestral Sources V2 installed in a non-default folder,
					and also preserves plugin window position and settings per Project.
]]

	require "iuplua"									-- To access GUI window builder
	require "lfs"										-- To access LUA filing system
	require "iupluaole"									-- To access OLE subsystem
	require "luacom"									-- To access COM subsystem

-- Global Data Constants Definition --
function PresetGlobalConstants()

	-- GUI Global Constants

	StrPlugin			= "Ancestral Sources Data Entry"	-- Plugin title & version
	StrIssue			= " V3.1"
	StrVersion		= "Version 3.1"
	StrRed				= "255 000 000"					-- Color attributes
	StrAmber			= "250 160 000"
	StrGreen			= "000 120 000"
	StrBlue			= "000 000 255"
	StrGray			= "120 120 120"
	StrBlack			= "000 000 000"
	StrBigMargin		= "10x10"							-- Layout attributes
	StrMinMargin		= "1x1"
	StrGap				= "10"

	StrFontSetTitle	= "Set Interface Font"
	IntFontPlain		= 1									-- Font Face & Style values for IntFontSet
	IntFontBold		= 2
	IntArialPlain	= 3
	IntArialBold		= 4
	IntTahomaPlain	= 5
	IntTahomaBold	= 6
	StrFontFace		= string.gsub(iup.GetGlobal("DEFAULTFONT"),",.*","")

	StrType			= nil								-- Type of Ancestral Sources operation required e.g. " -SOURCE CENSUS" or " -SOURCE BAPTISM"

	-- Filename Global Constants
 
	StrComputerName = os.getenv("COMPUTERNAME")	-- Used for local settings
 
	local strStickyFold
	local strStickyOld
	StrStickyFile = fhGetPluginDataFileName()
	-- Allow plugins with variant filenames to use same plugin data files
	StrStickyFile = string.gsub(StrStickyFile,"\\"..StrPlugin..".+%.[D,d][A,a][T,t]$","\\"..StrPlugin..".dat")
	if StrStickyFile == "" then
		-- Use standalone GEDCOM path & filename..".fh_data\Plugin Data\" as the folder + the Plugin Filename..".dat"
		StrStickyFile = fhGetContextInfo("CI_GEDCOM_FILE")
		strStickyFold = string.gsub(StrStickyFile, "%.[G,g][E,e][D,d]", "")
		strStickyOld  = strStickyFold.."\\Launch "..StrPlugin..".dat"
		StrStickyFile = string.gsub(StrStickyFile, "%.[G,g][E,e][D,d]", ".fh_data")
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\Plugin Data"
		lfs.mkdir(StrStickyFile)
		StrStickyFile = StrStickyFile.."\\"..StrPlugin..".dat"

		if FlgFileExists(strStickyOld) then
			-- Sticky settings exist in old location, so move to new location
			local fileHandle,strError = os.rename(strStickyOld,StrStickyFile)
			if fileHandle == nil then
				iup.Message("Error","Cannot move the old file from:\n"..strStickyOld.."\nto its new location at:\n"..StrStickyFile.."\n\n"..strError.."\n")
			end
			local fileHandle,strError = lfs.rmdir(string.gsub(strStickyFold,".*\\",""))
			if fileHandle == nil then
				iup.Message("Error","Cannot remove the old folder:\n"..strStickyFold.."\n\n"..strError.."\n")
			end
		end

	end

	strStickyOld = string.gsub(StrStickyFile, StrPlugin..".dat", "\\Launch "..StrPlugin..".dat")
 	if FlgFileExists(strStickyOld) then
		-- Sticky settings exist for old plugin filename, so rename to new plugin filename
		local fileHandle,strError = os.rename(strStickyOld,StrStickyFile)
		if fileHandle == nil then
			iup.Message("Error","Cannot rename old file from:\n"..strStickyOld.."\nto new file:\n"..StrStickyFile.."\n\n"..strError.."\n")
		end
	end

	StrFHUG = "http://www.fhug.org.uk/wiki/doku.php?id="

end -- function PresetGlobalConstants

-- Split a string using Separator --
function string:split(sep)
	local sep = sep or ":"
	local fields = {}
	local pattern = string.format("([^%s]+)", sep)
	self:gsub(pattern, function(c) fields[#fields+1] = c end)
	return fields
end -- function string:split

-- Split a string into numbers using separators space or comma or x --
function string:SplitNumbers()
	local tblNum = {}
	self:gsub("([^%s,x]+)", function(c) tblNum[#tblNum+1] = c end)
	for i=1, #tblNum do
		tblNum[i] = tonumber(tblNum[i])
	end
	return tblNum
end -- function string:SplitNumbers

-- Check if file exists --
function FlgFileExists(strFileName)
	if lfs.attributes(strFileName,"mode") == "file" then
		return true
	else
		return false
	end
end -- function FlgFileExists

-- Check if folder exists --
function FlgFolderExists(strFolderName)
	if lfs.attributes(strFolderName,"mode") == "directory" then
		return true
	else
		return false
	end
end -- function FlgFolderExists

-- Open File and return Handle --
function OpenFile(strFileName,strMode)
	local fileHandle, strError = io.open(strFileName,strMode)
	if fileHandle == nil then
		error("\n Unable to open file: "..strFileName.." \n "..strError.." \n")
	end
	return fileHandle
end -- function OpenFile

-- Reset Sticky Settings to Default Values --
function ResetDefaultSettings()
	IntMainX		= iup.CENTER			-- GUI Main window position X & Y co-ordinate
	IntMainY		= iup.CENTER
	IntDataX		= iup.CENTER			-- GUI Font window position X & Y co-ordinate
	IntDataY		= iup.CENTER
	IntHelpX		= iup.CENTER			-- GUI Help window position X & Y co-ordinate
	IntHelpY		= iup.CENTER
	StrHelpS		= "1030x730"
	local strPublic = fhGetContextInfo("CI_PROJECT_PUBLIC_FOLDER")
	if strPublic == "" then
		StrFolder = StrPluginPath		-- Output folder for standalone Gedcom
	else
		StrFolder = strPublic			-- Output folder for Project structure
	end
	StrFiles		= nil					-- Program files installation folder
	StrClose		= "ON"					-- Close on Save Entry radio button value
end -- function ResetDefaultSettings

-- Load Sticky Settings from File --
function LoadSettings(strFileName)

	local tblStickyData = {}

	-- Load Local Parameter for this PC --
	local function strLoadLocal(strParam,strDefault)
		-- Load V1.2 data without ComputerName prefix or V1.3 data with ComputerName prefix or strDefault value
		local strValue
		strValue = tblStickyData[strParam] or tblStickyData[StrComputerName.."-"..strParam] or strDefault
		tblStickyData[strParam] = nil	-- Remove old V1.2 data without ComputerName prefix
		return strValue
	end

	-- Load Global Parameter for all PC --
	local function strLoadGlobal(strParam,strDefault)
		return tblStickyData[strParam] or strDefault
	end

	-- Ensure Window Position is on Screen --
	local function intintCheckPosition(x,y)
		local tblScrn = iup.GetGlobal("VIRTUALSCREEN"):SplitNumbers()
		-- tblScrn[1] = origin x, tblScrn[2] = origin y, tblScrn[3] = width, tblScrn[4] = height
		if tonumber(x) == nil then
			x = iup.CENTER
		elseif tonumber(x) > tblScrn[3] then
			x = iup.CENTER
		end
		if tonumber(y) == nil then
			y = iup.CENTER
		elseif tonumber(y) > tblScrn[4] then
			y = iup.CENTER
		end
		return tonumber(x),tonumber(y)
	end -- local function intintCheckPosition

	if FlgFileExists(strFileName) then
		-- Load Settings File in table lines with key & val fields
		local tblField = {}
		for strLine in io.lines(strFileName) do
			tblField = strLine:split("=")
			tblStickyData[tblField[1]] = tblField[2]
		end
		IntMainX = tonumber(strLoadLocal("Pos_X",IntMainX))		-- Old GUI Pos_X & Pos_Y parameters
		IntMainY = tonumber(strLoadLocal("Pos_Y",IntMainY))
		IntMainX = tonumber(strLoadLocal("MainX",IntMainX))
		IntMainY = tonumber(strLoadLocal("MainY",IntMainY))
		IntHelpX = tonumber(strLoadLocal("HelpX",IntHelpX))
		IntHelpY = tonumber(strLoadLocal("HelpY",IntHelpY))
		StrHelpS = strLoadLocal			("HelpS",StrHelpS)
		IntDataX = tonumber(strLoadLocal("DataX",IntDataX))
		IntDataY = tonumber(strLoadLocal("DataY",IntDataY))
		StrFiles = strLoadLocal("Files",StrFiles)
		StrClose = strLoadGlobal("Close",StrClose)
		IntFontSet = tonumber(strLoadGlobal("Fonts",IntFontSet))
	end
	IntMainX,IntMainY = intintCheckPosition(IntMainX,IntMainY)
	IntHelpX,IntHelpY = intintCheckPosition(IntHelpX,IntHelpY)
	GUI_FontDialogue(IntFontSet) 							-- Assign font set
	SaveSettings(strFileName)									-- Save sticky data settings
end -- function LoadSettings

-- Save Sticky Settings to File --
function SaveSettings(strFileName)

	local tblStickyData = {}
 
	-- Save Local Parameter for this PC --
	local function doSaveLocal(strParam,param)
		tblStickyData[StrComputerName.."-"..strParam] = param
	end
 
	-- Save Global Parameter for all PC --
	local function doSaveGlobal(strParam,param)
		tblStickyData[strParam] = param
	end
 
	doSaveLocal("MainX",IntMainX)
	doSaveLocal("MainY",IntMainY)
	doSaveLocal("HelpX",IntHelpX)
	doSaveLocal("HelpY",IntHelpY)
	doSaveLocal("HelpS",StrHelpS)
	doSaveLocal("DataX",IntDataX)
	doSaveLocal("DataY",IntDataY)
	doSaveLocal("Files",StrFiles)
	doSaveGlobal("Close",StrClose)
	doSaveGlobal("Fonts",IntFontSet)
 
	local fileHandle = OpenFile(strFileName,"w")
	for strKey,strVal in pairs(tblStickyData) do
		fileHandle:write(strKey.."="..strVal.."\n")
	end
	fileHandle:close()
end -- function SaveSettings

function IsNormalWindow(dialogGUI)
	-- tblScrn[1] = origin x, tblScrn[2] = origin y, tblScrn[3] = width, tblScrn[4] = height
	local tblPosn = dialogGUI.screenposition:SplitNumbers()
	local intPosX = tblPosn[1]
	local intPosY = tblPosn[2]
	if intPosX < 0 and intPosY < 0 then						-- If origin is negative (-8, -8 = Maximised, -3200, -3200 = Minimised)
		return false												-- then is Maximised or Minimised
	end
	return true
end -- function IsNormalWindow

-- GUI Font Face & Style Dialogue --
function GUI_FontDialogue(intFontSet)

	-- Note: Pixel sizes -21 = -20 & -17 = -16 & -14 = -13 and pixel sizes -22, -18 & -13 have no point size equivalent.
	local tblFontSet = {}			-- Lookup table for StrFontHead and StrFontBody font sets
	tblFontSet[IntFontPlain]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..",      -16", }
	tblFontSet[IntFontBold]		=	{ Head=StrFontFace..", Bold -16",	Body=StrFontFace..", Bold -15", }
	tblFontSet[IntArialPlain]		=	{ Head="Arial,         Bold -16",	Body="Arial,              -16", }
	tblFontSet[IntArialBold]		=	{ Head="Arial,         Bold -16",	Body="Arial,         Bold -15", }
	tblFontSet[IntTahomaPlain]	=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,             -16", }
	tblFontSet[IntTahomaBold]		=	{ Head="Tahoma,        Bold -15",	Body="Tahoma,        Bold -14", }

	-- Assign font set global variables
	local function doAssignFontSet(intFontSet)
		IntFontSet = intFontSet
		StrFontHead = tblFontSet[intFontSet]["Head"] -- Font for all GUI dialog header text
		StrFontBody = tblFontSet[intFontSet]["Body"] -- Font for all GUI dialog body text
	end -- local function doAssignFontSet

	-- If parameter exists, simply set it as current font set
	if intFontSet then doAssignFontSet(intFontSet) return end

	local strAnswer = "Change"

	local strFontPlainTitle	= StrFontFace.." Plain"
	local strFontBoldTitle		= StrFontFace.." Bold"
	local strArialPlainTitle	= "Arial Plain"
	local strArialBoldTitle	= "Arial Bold"
	local strTahomaPlainTitle	= "Tahoma Plain"
	local strTahomaBoldTitle	= "Tahoma Bold"

	-- Create each GUI label and button with title and tooltip
	local	lblHeadName		= iup.label	{ title=" Name :"				, tip="Names of the available Fonts"				, }
	local	lblHeadPlain		= iup.label	{ title=" Plain :"				, tip="Plain versions of the Fonts"					, }
	local	lblHeadBold		= iup.label	{ title=" Bold :"				, tip="Bold versions of the Fonts"					, }
	local	lblFontName		= iup.label	{ title="Font "..StrFontFace	, tip="Default Windows fontface"					, }
	local	btnFontPlain		= iup.button	{ title=strFontPlainTitle		, tip="Choose "..strFontPlainTitle.." style"		, }
	local	btnFontBold		= iup.button	{ title=strFontBoldTitle		, tip="Choose "..strFontBoldTitle.." style"		, }
	local	lblArialName		= iup.label	{ title="Font Arial"			, tip="Arial alternative fontface"					, }
	local	btnArialPlain	= iup.button	{ title=strArialPlainTitle	, tip="Choose "..strArialPlainTitle.." style"	, }
	local	btnArialBold		= iup.button	{ title=strArialBoldTitle		, tip="Choose "..strArialBoldTitle.." style"		, }
	local	lblTahomaName	= iup.label	{ title="Font Tahoma"			, tip="Tahoma alternative fontface"					, }
	local	btnTahomaPlain	= iup.button	{ title=strTahomaPlainTitle	, tip="Choose "..strTahomaPlainTitle.." style"	, }
	local	btnTahomaBold	= iup.button	{ title=strTahomaBoldTitle	, tip="Choose "..strTahomaBoldTitle.." style"	, }
	local	lblChoose			= iup.label	{ title="Choose your interface font style or"										, }
	local	btnClose			= iup.button	{ title="Close"					, tip="Close this Font Style window"				, }

	-- Create dialogue and turn off resize, maximize, minimize, and menubox except Close button
	local	dialogFont		= iup.dialog { title=StrPlugin.." Font Style", dialogframe="YES", startfocus=btnClose,
										iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
											iup.frame { font=StrFontHead, fgcolor=StrBlack, active="YES", title="Font Style",
												iup.vbox { margin=StrMinMargin,
													iup.hbox { homogeneous="YES", lblHeadName,	lblHeadPlain,	lblHeadBold,		},
													iup.hbox { homogeneous="YES", lblFontName,	btnFontPlain,	btnFontBold,		},
													iup.hbox { homogeneous="YES", lblArialName,	btnArialPlain,	btnArialBold,	},
													iup.hbox { homogeneous="YES", lblTahomaName,	btnTahomaPlain,	btnTahomaBold,	},
													iup.hbox { lblChoose, btnClose, },
												},
											},
										},
										move_cb =function(self,x,y) IntDataX=x IntDataY=y end,
										close_cb=function() strAnswer="Ignore" return iup.CLOSE end,
									}

	-- Assign font styles for GUI labels and buttons
	local strFontPlain		= tblFontSet	[IntFontPlain]	["Body"]
	local strFontBold		= tblFontSet	[IntFontBold]	["Body"]
	local strArialPlain		= tblFontSet	[IntArialPlain]	["Body"]
	local strArialBold		= tblFontSet	[IntArialBold]	["Body"]
	local strTahomaPlain	= tblFontSet	[IntTahomaPlain]["Body"]
	local strTahomaBold		= tblFontSet	[IntTahomaBold]	["Body"]

	-- Set other GUI attributes for labels and buttons
	for iupName, tblAttr in pairs( {
		--	Control		=	1~fgcolor	, 2~font			, 3~FontSet		, 4~action function()
		[lblHeadName]	= { StrBlack	, StrFontBody	, false			, false	},
		[lblHeadPlain]	= { StrBlack	, strFontPlain	, false			, false	},
		[lblHeadBold]	= { StrBlack	, strFontBold	, false			, false	},
		[lblFontName]	= { StrBlack	, strFontPlain	, false			, false	},
		[btnFontPlain]	= { StrGreen	, strFontPlain	, IntFontPlain	, false	},
		[btnFontBold]	= { StrGreen	, strFontBold	, IntFontBold	, false	},
		[lblArialName]	= { StrBlack	, strArialPlain	, false			, false	},
		[btnArialPlain]	= { StrGreen	, strArialPlain	, IntArialPlain	, false	},
		[btnArialBold]	= { StrGreen	, strArialBold	, IntArialBold	, false	},
		[lblTahomaName]	= { StrBlack	, strTahomaPlain, false			, false	},
		[btnTahomaPlain]= { StrGreen	, strTahomaPlain, IntTahomaPlain, false	},
		[btnTahomaBold]	= { StrGreen	, strTahomaBold	, IntTahomaBold	, false	},
		[lblChoose]		= { StrBlack	, StrFontBody	, false			, false	},
		[btnClose]		= { StrRed	, StrFontBody	, false			, dialogFont.close_cb },
		} ) do
		iupName.expand	= "YES"
		iupName.fgcolor	= tblAttr[1]
		iupName.font		= tblAttr[2]
		if tblAttr[3] then
			if tblAttr[3] == IntFontSet then iupName.active = "NO" end	-- Disable button for currently selected font
			iupName.action = function() doAssignFontSet(tblAttr[3]) return iup.CLOSE end
		end
		if tblAttr[4] then iupName.action = tblAttr[4] end
	end

	dialogFont:popup(IntDataX,IntDataY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

	return strAnswer
end -- function GUI_FontDialogue

-- GUI Help & Advice Dialogue --
function GUI_HelpDialogue()

	local function doActivateMainHelpButton()
		if BtnMainHelp then BtnMainHelp.active = "YES" end
		if BtnFileHelp then BtnFileHelp.active = "YES" end
	end -- local function doActivateMainHelpButton

	-- Create the WebBrowser based on its ProgID and connect it to LuaCOM
	local	oleControl = iup.olecontrol{ "Shell.Explorer.1", designmode="NO", }
			oleControl:CreateLuaCOM()

	-- Create each GUI button with title and tooltip
	local	btnMain	= iup.button	{ title="Ancestral Sources Data Entry"		, tip="Ancestral Sources Data Entry window"	, }
	local	btnPath	= iup.button	{ title="Ancestral Sources Not Found"		, tip="Ancestral Sources Not Found window"	, }
	local	btnAbout	= iup.button	{ title="About latest Ancestral Sources"	, tip="About Ancestral Sources "..StrVersion	, }
	local	btnClose	= iup.button	{ title="Close this Window"					, tip="Close this Help and Advice window"		, }

	-- The following control is global to allow Main GUI to alter font
			HboxHelp		=	iup.hbox { font=StrFontBody, margin=StrMinMargin, homogeneous="YES", btnMain, btnPath, btnAbout, btnClose, }
	local	dialogHelp	=	iup.dialog { title=StrPlugin.." Help & Advice", startfocus=btnClose, rastersize=StrHelpS,
									iup.vbox { alignment="ACENTER", gap=StrGap, margin=StrBigMargin, expandchildren="YES",
										oleControl,
										HboxHelp,
									},
									move_cb	= function(self,x,y) if IsNormalWindow(self) then IntHelpX=x IntHelpY=y end end,
									resize_cb	= function(self) if IsNormalWindow(self) then StrHelpS=self.rastersize end end,
									close_cb	= function() doActivateMainHelpButton() end,
								}

	local	strFHUG = StrFHUG.."plugins:help:as_data_entry:"

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control=	1~fgcolor	, 2~Navigate URL						, 3~action function()
		[btnMain] = { StrGreen	, strFHUG.."as_data_entry"			, false },
		[btnPath] = { StrGreen	, strFHUG.."as_not_found"				, false },
		[btnAbout]= { StrGreen	, StrFHUG.."ancestralsources:about"	, false },
		[btnClose]= { StrRed	, false									, function() dialogHelp:destroy() doActivateMainHelpButton() end },
		} ) do
		iupName.expand	= "HORIZONTAL"
		iupName.size		= "x10"
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.action = function() oleControl.com:Navigate(tblAttr[2]) end end
		if tblAttr[3] then iupName.action = tblAttr[3] end
	end

	dialogHelp:showxy(IntHelpX,IntHelpY)		-- Show Help GUI window
	dialogHelp.rastersize=nil						-- Allow window to be resized

	local strOrigin = ""
	if BtnMainHelp then strOrigin = "as_data_entry" end
	if BtnFileHelp then strOrigin = "as_not_found" end

	oleControl.com:Navigate(strFHUG..strOrigin)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_HelpDialogue

-- GUI File Dialogue --
function GUI_FileDialogue(strPathEdit)

	local flgStatus	= true

	while	( lfs.attributes(strPathEdit..StrASexe,"size") or 0 )
		+	( lfs.attributes(strPathEdit..StrASchm,"size") or 0 ) < 5400000 and flgStatus do

		if FlgFolderExists(strPathEdit) then StrDirectory = strPathEdit end 	-- Remember last valid folder for doPathEdit() browse directory GUI 

	-- Create each GUI label and button with title and tooltip
		local	lblMessage	= iup.label	{ title="This Plugin runs the Program with the same name,\nbut the Ancestral Sources Program "..StrVersion.."\nis not installed in the expected folder:\n"..strPathEdit
																																	, tip="Ancestral Sources "..StrVersion.." does not appear to be installed on your PC", }
		local	lblOptions	= iup.label	{ title="Please choose one of these options :-"							, tip="Choose one of the options below to resolve this situation"				, }
		local	lblOption1	= iup.label	{ title="(1)  Install Ancestral Sources "..StrVersion.." ..."		, tip="Install Ancestral Sources "..StrVersion.." on your PC"								, }
		local	btnDownload	= iup.button	{ title="Click here for downloads"											, tip="Click here to Download Ancestral Sources from FHUG Knowledge Base"		, }
		local	lblOption2	= iup.label	{ title="(2)  Edit installation path listed below ..."					, tip="Edit the path below to refer to your installation of Ancestral Sources", }
		local	btnPathEdit	= iup.button	{ title="Browse to installation path"										, tip="Select your installation path for Ancestral Sources"						, }
		local	txtPathEdit	= iup.text	{ value=strPathEdit																, tip="Enter your installation path for Ancestral Sources here"					, }
		local	btnRetry		= iup.button	{ title="Click here to check path"											, tip="Click here to check installation path above is now valid"				, }
		local	lblOption3	= iup.label	{ title="(3)  Quit from this plugin ..."									, tip="Quit from this plugin making no changes"										, }
		local	btnCancel		= iup.button	{ title="Click here to quit plugin"											, tip="Click here to quit this plugin"													, }
				BtnFileHelp	= iup.button	{ title="Help and Advice"														, tip="Obtain online Help and Advice from the FHUG Knowledge Base"				, }

		-- Create dialogue and turn off resize, menubox, maximize and minimize
		local	dialogFile	= iup.dialog { title="Ancestral Sources Not Found", dialogframe="YES", defaultenter=btnCancel, rastersize="400",
										iup.vbox { font=StrFontBody, expandchildren="YES", alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
											lblMessage, iup.vbox{}, lblOptions, iup.vbox{}, lblOption1, btnDownload, iup.vbox{}, lblOption2, btnPathEdit, txtPathEdit, btnRetry, iup.vbox{}, lblOption3, btnCancel, iup.vbox{}, BtnFileHelp,
										},
										move_cb =function(self,x,y) IntMainX=x IntMainY=y end,
										close_cb=function() flgStatus=false end,
									}

		local function doPathEdit()
			local strDirectory = strPathEdit
			if not FlgFolderExists(strDirectory) then strDirectory = StrDirectory end
			local dialogPathEdit = iup.filedlg{dialogtype="DIR", title="Please select installation path", DIRECTORY=strDirectory}
			dialogPathEdit:popup(iup.CENTER, iup.CENTER)
			if dialogPathEdit.status == "0" then strPathEdit = dialogPathEdit.value end
			txtPathEdit.value = strPathEdit
		end -- local	function doPathEdit

		-- Set other GUI control attributes
		for iupName, tblAttr in pairs( {
			-- Control	=	1~fgcolor	, 2~alignment, 3~action function()
			[lblMessage]	= { StrRed	, "ACENTER"	, false		},
			[lblOptions]	= { StrBlack	, "ACENTER"	, false		},
			[lblOption1]	= { StrGreen	, false		, false		},
			[btnDownload]= { StrGreen	, false		, function() iup.Help(StrFHUG.."fhugdownloads:contents:ancestral_sources") flgStatus=false return iup.CLOSE end },
			[lblOption2]	= {	 StrGreen	, false		, false		},
			[btnPathEdit]= { StrGreen	, false		, function() doPathEdit() end },
			[txtPathEdit]= { StrBlack	, false		, function(self,char,value) strPathEdit=value return char end },
			[btnRetry]	= { StrGreen	, false		, function() StrProgramFiles=strPathEdit flgStatus=true return iup.CLOSE end },
			[lblOption3]	= { StrGreen	, false		, false		},
			[btnCancel]	= { StrGreen	, false		, function() flgStatus=false	return iup.CLOSE end },
			[BtnFileHelp]= { StrGreen	, false		, function() BtnFileHelp.active="NO" GUI_HelpDialogue() end },
			} ) do
			iupName.expand	= "YES"
			iupName.fgcolor	= tblAttr[1]
			if tblAttr[2] then iupName.alignment = tblAttr[2] end
			if tblAttr[3] then iupName.action = tblAttr[3] end
		end

		dialogFile:showxy(IntMainX,IntMainY)
		iup.SetFocus(txtPathEdit)
		if (iup.MainLoopLevel()==0) then iup.MainLoop() end
		dialogFile:destroy()
		BtnFileHelp = nil
	end

	return flgStatus

end -- function GUI_FileDialogue

-- GUI Main Dialogue --
function GUI_MainDialogue()

	-- Create each GUI label and button with title and tooltip, etc
	local	lblMessage	= iup.label	{ title="Please choose a data entry mode:", tip="Choose a data entry mode\n(Greyed-out buttons will be enabled as new features are added)"		, alignment="ACENTER", font=StrFontHead , }
	local	btnCensus		= iup.button	{ title="Census Editor"						, tip="Choose the Census Editor mode"		, }
	local	btnBirth		= iup.button	{ title="Birth Editor"							, tip="Choose the Birth Editor mode"		, }
	local	btnBaptism	= iup.button	{ title="Baptism Editor"						, tip="Choose the Baptism Editor mode"		, }
	local	btnMarriage	= iup.button	{ title="Marriage Editor"						, tip="Choose the Marriage Editor mode"	, }
	local	btnDeath		= iup.button	{ title="Death Editor"							, tip="Choose the Death Editor mode"		, }
	local	btnBurial		= iup.button	{ title="Burial Editor"						, tip="Choose the Burial Editor mode"		, }
	local	btnProbate	= iup.button	{ title="Probate Editor"						, tip="Choose the Probate Editor mode"		, }
	local	btnImages		= iup.button	{ title="Add Images to Sources"				, tip="Choose the Add Images mode"			, }
	local	tglClosure	= iup.toggle	{ title=" Close on 'Save Entry to File' ?", tip="Choose whether to Close Ancestral Sources on 'Save Entry to File'", value=StrClose, }
	local	btnFontSet	= iup.button	{ title=StrFontSetTitle						, tip="Choose user interface font style"	, }
			BtnMainHelp	= iup.button	{ title="Help and Advice"						, tip="Obtain online Help and Advice from the FHUG Knowledge Base", }
	local	btnCancel		= iup.button	{ title="Cancel Plugin"						, tip="Cancel this Plugin"					, }

	local	vboxMain		= iup.vbox { font=StrFontBody, expandchildren="YES", alignment="ACENTER", gap=StrGap, margin=StrBigMargin,
									lblMessage, btnCensus, btnBirth, btnBaptism, btnMarriage, btnDeath, btnBurial, btnProbate, btnImages, iup.hbox { tglClosure, margin="18x8", }, btnFontSet, BtnMainHelp, btnCancel,
								}

	-- Create dialogue and turn off resize, menubox, maximize and minimize
	local	dialogMain	= iup.dialog { title=StrPlugin..StrIssue, dialogframe="YES", startfocus=btnCancel, rastersize="300", vboxMain,
									move_cb =function(self,x,y) IntMainX=x IntMainY=y end,
									close_cb=function() return iup.CLOSE end,
								}

	local function doClose(iState)
		if iState == 0 then
			StrClose = "OFF"
		elseif iState == 1 then
			StrClose = "ON"
		else
			iup.Message(strTitle, "tglClosure invalid iState")
			StrClose = "ERROR"
		end
	end -- local function doClose

	local function doFontSet()
		if GUI_FontDialogue() == "Change" then
			lblMessage.font	= StrFontHead
			vboxMain.font	= StrFontBody
			if 	BtnMainHelp.active == "NO" then
				HboxHelp.font = StrFontBody
			end
		end
	end -- local function doFontSet

	-- Set other GUI control attributes
	for iupName, tblAttr in pairs( {
		-- Control	=	1~fgcolor	, 2~active, 3~SOURCE	, 4~action function()
		[lblMessage]	= { StrBlack	, false	, false		, false	},
		[btnCensus]	= { StrGreen	, false	, "CENSUS"	, false	},
		[btnBirth]	= { StrGreen	, "NO"		, "BIRTH"		, false	},
		[btnBaptism]	= { StrGreen	, false	, "BAPTISM"	, false	},
		[btnMarriage]= { StrGreen	, false	, "MARRIAGE"	, false	},
		[btnDeath]	= { StrGreen	, "NO"		, "DEATH"		, false	},
		[btnBurial]	= { StrGreen	, "NO"		, "BURIAL"	, false	},
		[btnProbate]	= { StrGreen	, "NO"		, "PROBATE"	, false	},
		[btnImages]	= { StrGreen	, false	, "IMAGES"	, false	},
		[tglClosure]	= { false		, false	, false		, function(self,iState) doClose(iState) end },
		[btnFontSet]	= { StrGreen	, false	, false		, function() doFontSet() end },
		[BtnMainHelp]= { StrGreen	, false	, false		, function() BtnMainHelp.active="NO" GUI_HelpDialogue() end },
		[btnCancel]	= { StrRed	, false	, false		, function() return iup.CLOSE end },
		} ) do
		iupName.expand	= "YES"
		iupName.fgcolor	= tblAttr[1]
		if tblAttr[2] then iupName.active = tblAttr[2] end
		if tblAttr[3] then iupName.action = function() StrType=" -SOURCE "..tblAttr[3] return iup.CLOSE end end
		if tblAttr[4] then iupName.action = tblAttr[4] end
	end

	dialogMain:showxy(IntMainX,IntMainY)

	if (iup.MainLoopLevel()==0) then iup.MainLoop() end

end -- function GUI_MainDialogue

-- Invoke FH Shell Execute API --
function DoExecute(strExecutable, strParameter)
	local isOK, intErrorCode, strErrorText = fhShellExecute(strExecutable, strParameter)
	if not isOK then
		fhMessageBox(strErrorText.." ("..intErrorCode..")")
	end
end -- function DoExecute

-- Main body of Plugin script starts here --

	PresetGlobalConstants()														-- Preset global data constants

	ResetDefaultSettings()															-- Preset default sticky settings

	IntFontSet = IntFontBold														-- Initial Font Face & Style default

	LoadSettings(StrStickyFile)													-- Load sticky data settings

	StrASdir = "\\Ancestral Sources"											-- Ancestral Sources folder in Program Files
	StrASexe = "\\Ancestral Sources.exe"										-- Ancestral Sources executable in Program Files
	StrASchm = "\\Ancestral Sources.chm"										-- Ancestral Sources compiled help in Program Files
	StrProgramFiles = StrFiles or os.getenv("PROGRAMFILES")..StrASdir	-- Program files folder for Ancestral Sources
	if not FlgFileExists(StrProgramFiles..StrASexe) then					-- Try alternative Program Files OS Path on 64-bit PC
		StrProgramFiles = ( os.getenv("PROGRAMW6432") or os.getenv("PROGRAMFILES") )..StrASdir
	end
	StrDirectory = StrProgramFiles												-- Default for doPathEdit() browse directory GUI
	if GUI_FileDialogue(StrProgramFiles) then

		local strProgram = StrProgramFiles..StrASexe
		if not FlgFileExists(strProgram) then
			error("\n Ancestral Sources executable not found.\n")
		end

		local strProjectFile = fhGetContextInfo("CI_GEDCOM_FILE")
		if not FlgFileExists(strProjectFile) then
			error("\n Family Historian GEDCOM file not found.\n")
		end

		StrFiles = StrProgramFiles
		SaveSettings(StrStickyFile)												-- Save sticky data settings

		fhInitialise(5,0,0,"save_required")

		GUI_MainDialogue()

		if StrType then
			local tblIndi = fhGetCurrentRecordSel("INDI")					-- Get Currently Selected Record(s)
			local strIndi = " "
			if #tblIndi > 0 then
				strIndi = " -IND "..fhGetRecordId(tblIndi[1])				-- Get first Record Id
			end
			local strClose = ""
			if StrClose == "ON" then strClose = " -CLOSE" end				-- Set closure on Save mode
			DoExecute( '"'..strProgram..'"', '-FILE "'..strProjectFile..'"'..strIndi..StrType..strClose )
		end

	end
	StrFiles = StrProgramFiles
	SaveSettings(StrStickyFile)													-- Save sticky data settings
